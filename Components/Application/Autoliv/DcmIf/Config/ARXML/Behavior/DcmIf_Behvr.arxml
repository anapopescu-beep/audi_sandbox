<?xml version="1.0" encoding="UTF-8"?>
<AUTOSAR xmlns="http://autosar.org/schema/r4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://autosar.org/schema/r4.0 autosar_4-2-2.xsd">
  <AR-PACKAGES>
    <AR-PACKAGE>
      <SHORT-NAME>AUTOLIV</SHORT-NAME>
      <AR-PACKAGES>
        <AR-PACKAGE>
          <SHORT-NAME>SoftwareComponents</SHORT-NAME>
          <AR-PACKAGES>
            <AR-PACKAGE T="2016-05-30T16:03:21+02:00">
              <SHORT-NAME>DcmIf</SHORT-NAME>
              <ELEMENTS>
                <APPLICATION-SW-COMPONENT-TYPE T="2022-09-09T10:10:22+03:00">
                  <SHORT-NAME>DcmIf</SHORT-NAME>
                  <CATEGORY>BSW_Communication_Services</CATEGORY>
                  <PORTS>
                    <R-PORT-PROTOTYPE T="2023-02-21T20:57:58+02:00" UUID="e40e7fd6-2305-4d4e-8b58-1547e82f4dcf">
                      <SHORT-NAME>pclNvmIfServices</SHORT-NAME>
                      <DESC T="2023-03-30T16:17:21+03:00">
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 T="2023-03-30T16:17:21+03:00" L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                        <L-2 L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_ReadBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_ReadBlockByAddress runnable will read the memory space specified in the {Start address} input parameter &#xD;
	- The NvmIf_ReadBlockByAddress runnable will output the read memory bytes in the  {Pointer to the buffer in DcmIf} output parameter &#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be retrieved)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_490;DOM_eCS_TF_E_491;DOM_eCS_TF_E_1174;DOM_eCS_TF_E_494;DOM_eCS_TF_E_1920&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_ReadMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_ReadMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
---------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_WriteBlockByAddress&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_WriteBlockByAddress runnable will write the memory space specified in the {Start address} input parameter with the data from the {Pointer to the buffer in DcmIf} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Start address} (of the memory from which data is to be written)&#xD;
&#xD;
## Outputs&#xD;
- {Pointer to the buffer in DcmIf}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
DOM_eCS_TF_E_1008;DOM_eCS_TF_E_1009;DOM_eCS_TF_E_1355;DOM_eCS_TF_E_1357;DOM_eCS_TF_E_1012;DOM_eCS_TF_E_1013;DOM_eCS_TF_E_1354;DOM_eCS_TF_E_2021;DOM_eCS_TF_E_2022;DOM_eCS_TF_E_2024&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetNvmBlockStatus_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetNvmBlockStatus runnable will return the NvM block status on the {Block Status} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {Block Status}&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
&#xD;
-------------------------------------------------------------------------------------&#xD;
&#xD;
# Architecture Element ID&#xD;
ARCH_SW_DcmIf_pclNvmIfServices_GetRamAddressByBlockId_Dcm_WriteMemory&#xD;
&#xD;
# Description&#xD;
	- The NvmIf_GetRamAddressByBlockId runnable will return the NvM block RAM address on the {BlockRamAddress} output parameter for the selected {Block Id} input parameter&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
- {Block Id}&#xD;
&#xD;
## Outputs&#xD;
- {BlockRamAddress} &#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability </L-2>
                      </DESC>
                      <ADMIN-DATA T="2023-02-23T07:28:22+02:00">
                        <LANGUAGE>FOR-ALL</LANGUAGE>
                        <DOC-REVISIONS>
                          <DOC-REVISION T="2023-02-23T07:28:22+02:00">
                            <REVISION-LABEL>eCS_SBE_AUDI_MCC_R1.1_04</REVISION-LABEL>
                            <REVISION-LABEL-P-1></REVISION-LABEL-P-1>
                            <REVISION-LABEL-P-2></REVISION-LABEL-P-2>
                            <STATE>_InReviewByTestTeam</STATE>
                            <ISSUED-BY>gabriel.brasoveanu</ISSUED-BY>
                            <DATE>2023-02-21T20:57:48.478+02:00</DATE>
                            <MODIFICATIONS>
                              <MODIFICATION>
                                <CHANGE>
                                  <L-2 L="FOR-ALL">update for R1.1</L-2>
                                </CHANGE>
                                <REASON>
                                  <L-2 L="FOR-ALL">functionality was updated</L-2>
                                </REASON>
                              </MODIFICATION>
                              <MODIFICATION T="2023-02-23T07:28:22+02:00">
                                <CHANGE>
                                  <L-2 L="FOR-ALL">[DDU_23.02.2023]: reviewed for R1.1</L-2>
                                </CHANGE>
                                <REASON>
                                  <L-2 L="FOR-ALL">no findings</L-2>
                                </REASON>
                              </MODIFICATION>
                            </MODIFICATIONS>
                          </DOC-REVISION>
                          <DOC-REVISION>
                            <REVISION-LABEL>eCS_SBE_AUDI_MCC_R2.0</REVISION-LABEL>
                            <REVISION-LABEL-P-1></REVISION-LABEL-P-1>
                            <REVISION-LABEL-P-2></REVISION-LABEL-P-2>
                            <STATE>_InReviewByTestTeam</STATE>
                            <ISSUED-BY>david.puscasu</ISSUED-BY>
                            <DATE>2023-07-20T11:52:13.173+03:00</DATE>
                            <MODIFICATIONS>
                              <MODIFICATION>
                                <CHANGE>
                                  <L-2 L="FOR-ALL">update for R2.0</L-2>
                                </CHANGE>
                                <REASON>
                                  <L-2 L="FOR-ALL">Add new requirement on port</L-2>
                                </REASON>
                              </MODIFICATION>
                              <MODIFICATION>
                                <CHANGE>
                                  <L-2 L="FOR-ALL">[DPU_21.07.2023] Reviewed for R2.0</L-2>
                                </CHANGE>
                                <REASON>
                                  <L-2 L="FOR-ALL">No findings</L-2>
                                </REASON>
                              </MODIFICATION>
                            </MODIFICATIONS>
                          </DOC-REVISION>
                        </DOC-REVISIONS>
                      </ADMIN-DATA>
                      <REQUIRED-COM-SPECS>
                        <CLIENT-COM-SPEC>
                          <OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices/NvmIf_GetRamAddressByBlockId</OPERATION-REF>
                        </CLIENT-COM-SPEC>
                        <CLIENT-COM-SPEC>
                          <OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices/GetNvmBlockLength</OPERATION-REF>
                        </CLIENT-COM-SPEC>
                        <CLIENT-COM-SPEC>
                          <OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices/GetNvmBlockStatus</OPERATION-REF>
                        </CLIENT-COM-SPEC>
                        <CLIENT-COM-SPEC>
                          <OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices/ReadBlockByAddress</OPERATION-REF>
                        </CLIENT-COM-SPEC>
                        <CLIENT-COM-SPEC>
                          <OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices/RestorePRAMBlockDefaults</OPERATION-REF>
                        </CLIENT-COM-SPEC>
                        <CLIENT-COM-SPEC>
                          <OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices/SetRamBlockStatus</OPERATION-REF>
                        </CLIENT-COM-SPEC>
                        <CLIENT-COM-SPEC>
                          <OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices/WriteBlockByAddress</OPERATION-REF>
                        </CLIENT-COM-SPEC>
                        <CLIENT-COM-SPEC>
                          <OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices/WriteNvmBlock</OPERATION-REF>
                        </CLIENT-COM-SPEC>
                      </REQUIRED-COM-SPECS>
                      <REQUIRED-INTERFACE-TREF DEST="CLIENT-SERVER-INTERFACE">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices</REQUIRED-INTERFACE-TREF>
                    </R-PORT-PROTOTYPE>
                    <R-PORT-PROTOTYPE T="2023-02-21T20:58:12+02:00" UUID="68b673a9-9a7a-4a83-a952-9aafcb957a4a">
                      <SHORT-NAME>pseNvpBlockData</SHORT-NAME>
                      <DESC>
                        <L-2 L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pseNvpBlockData_Dcm_GetProgConditions&#xD;
&#xD;
# Description&#xD;
	- The DcmIf module shall be able to use the KU8_ECU_UNLOCK / KU8_ECU_LOCK defines&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
## Outputs&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
</L-2>
                        <L-2 L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pseNvpBlockData_Dcm_GetProgConditions&#xD;
&#xD;
# Description&#xD;
	- The DcmIf module shall be able to use the KU8_ECU_UNLOCK / KU8_ECU_LOCK defines&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
## Outputs&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
</L-2>
                        <L-2 L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pseNvpBlockData_Dcm_GetProgConditions&#xD;
&#xD;
# Description&#xD;
	- The DcmIf module shall be able to use the KU8_ECU_UNLOCK / KU8_ECU_LOCK defines&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
## Outputs&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
</L-2>
                        <L-2 L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pseNvpBlockData_Dcm_GetProgConditions&#xD;
&#xD;
# Description&#xD;
	- The DcmIf module shall be able to use the KU8_ECU_UNLOCK / KU8_ECU_LOCK defines&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
## Outputs&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
</L-2>
                        <L-2 L="FOR-ALL"># Architecture Element ID&#xD;
ARCH_SW_DcmIf_pseNvpBlockData_Dcm_GetProgConditions&#xD;
&#xD;
# Description&#xD;
	- The DcmIf module shall be able to use the KU8_ECU_UNLOCK / KU8_ECU_LOCK defines&#xD;
&#xD;
# Data Flow&#xD;
## Inputs&#xD;
## Outputs&#xD;
&#xD;
# Linked Runnable&#xD;
	- Dcm_WriteMemory&#xD;
&#xD;
#Traceability &#xD;
</L-2>
                      </DESC>
                      <ADMIN-DATA T="2023-02-23T07:28:37+02:00">
                        <LANGUAGE>FOR-ALL</LANGUAGE>
                        <DOC-REVISIONS>
                          <DOC-REVISION T="2023-07-11T10:30:18+03:00">
                            <REVISION-LABEL>eCS_SBE_AUDI_MCC_R2.0</REVISION-LABEL>
                            <REVISION-LABEL-P-1></REVISION-LABEL-P-1>
                            <REVISION-LABEL-P-2></REVISION-LABEL-P-2>
                            <STATE>_InReviewByTestTeam</STATE>
                            <ISSUED-BY>gabriel.brasoveanu</ISSUED-BY>
                            <DATE>2023-02-21T20:58:03.135+02:00</DATE>
                            <MODIFICATIONS>
                              <MODIFICATION>
                                <CHANGE>
                                  <L-2 L="FOR-ALL">update for R1.1</L-2>
                                </CHANGE>
                                <REASON>
                                  <L-2 L="FOR-ALL">functionality was updated</L-2>
                                </REASON>
                              </MODIFICATION>
                              <MODIFICATION T="2023-02-23T07:28:37+02:00">
                                <CHANGE>
                                  <L-2 L="FOR-ALL">[DDU_23.02.2023]: reviewed for R1.1</L-2>
                                </CHANGE>
                                <REASON>
                                  <L-2 L="FOR-ALL">no findings</L-2>
                                </REASON>
                              </MODIFICATION>
                              <MODIFICATION>
                                <CHANGE>
                                  <L-2 L="FOR-ALL">[DPU_06.07.2023]: Update Port description</L-2>
                                </CHANGE>
                                <REASON>
                                  <L-2 L="FOR-ALL">The architecture requirement tag was wrong</L-2>
                                </REASON>
                              </MODIFICATION>
                              <MODIFICATION T="2023-07-11T10:30:18+03:00">
                                <CHANGE>
                                  <L-2 L="FOR-ALL">[GBR_11.07.2023]: reviewed for R2.0</L-2>
                                </CHANGE>
                                <REASON>
                                  <L-2 L="FOR-ALL">no findings</L-2>
                                </REASON>
                              </MODIFICATION>
                            </MODIFICATIONS>
                          </DOC-REVISION>
                        </DOC-REVISIONS>
                      </ADMIN-DATA>
                      <REQUIRED-COM-SPECS>
                        <NV-REQUIRE-COM-SPEC T="2022-09-09T10:10:22+03:00">
                          <VARIABLE-REF DEST="VARIABLE-DATA-PROTOTYPE">/AUTOLIV/NVP_DataDictionnary/SenderReceiverInterfaces/nvNvpBlockDescriptor/u8NvpProcessMode</VARIABLE-REF>
                        </NV-REQUIRE-COM-SPEC>
                        <NV-REQUIRE-COM-SPEC T="2022-09-09T10:10:22+03:00">
                          <VARIABLE-REF DEST="VARIABLE-DATA-PROTOTYPE">/AUTOLIV/NVP_DataDictionnary/SenderReceiverInterfaces/nvNvpBlockDescriptor/u8NvpEcuLockStatus</VARIABLE-REF>
                        </NV-REQUIRE-COM-SPEC>
                      </REQUIRED-COM-SPECS>
                      <REQUIRED-INTERFACE-TREF DEST="NV-DATA-INTERFACE">/AUTOLIV/NVP_DataDictionnary/SenderReceiverInterfaces/nvNvpBlockDescriptor</REQUIRED-INTERFACE-TREF>
                    </R-PORT-PROTOTYPE>
                  </PORTS>
                  <INTERNAL-BEHAVIORS>
                    <SWC-INTERNAL-BEHAVIOR T="2023-02-21T21:00:09+02:00">
                      <SHORT-NAME>DcmIf_IB</SHORT-NAME>
                      <DATA-TYPE-MAPPING-REFS>
                        <DATA-TYPE-MAPPING-REF DEST="DATA-TYPE-MAPPING-SET">/AUTOLIV/DcmIf_DataDictionary/DataTypeMappingSet/DataTypeMappingSet_DcmIf</DATA-TYPE-MAPPING-REF>
                        <DATA-TYPE-MAPPING-REF DEST="DATA-TYPE-MAPPING-SET">/AUTOLIV/NVP_DataDictionnary/DataTypeMappingSet/DataTypeMappingSet_NVP</DATA-TYPE-MAPPING-REF>
                        <DATA-TYPE-MAPPING-REF DEST="DATA-TYPE-MAPPING-SET">/AUTOLIV/NvmIf_DataDictionnary/DataTypeMappingSet/DataTypeMappingSet_NvmIf</DATA-TYPE-MAPPING-REF>
                      </DATA-TYPE-MAPPING-REFS>
                      <HANDLE-TERMINATION-AND-RESTART>NO-SUPPORT</HANDLE-TERMINATION-AND-RESTART>
                      <RUNNABLES>
                        <RUNNABLE-ENTITY T="2022-08-28T11:28:27+03:00" UUID="DCE:5066383d-eeee-4d33-a6dd-abad08ee647f">
                          <SHORT-NAME>Dcm_GetProgConditions</SHORT-NAME>
                          <MINIMUM-START-INTERVAL>0.0</MINIMUM-START-INTERVAL>
                          <CAN-BE-INVOKED-CONCURRENTLY>false</CAN-BE-INVOKED-CONCURRENTLY>
                          <EXTERNAL-TRIGGERING-POINTS>
                            <EXTERNAL-TRIGGERING-POINT>
                              <TRIGGER-IREF>
                                <P-TRIGGER-IN-ATOMIC-SWC-TYPE-INSTANCE-REF>
                                  <CONTEXT-P-PORT-REF DEST="P-PORT-PROTOTYPE">/AUTOLIV/SoftwareComponents/DcmIf/DcmIf/ptrpAsrDcmServicesDcmIf</CONTEXT-P-PORT-REF>
                                  <TARGET-TRIGGER-REF DEST="TRIGGER">/EB/TriggerInterfaces/itrAsrDcmServices/Dcm_GetProgConditions</TARGET-TRIGGER-REF>
                                </P-TRIGGER-IN-ATOMIC-SWC-TYPE-INSTANCE-REF>
                              </TRIGGER-IREF>
                            </EXTERNAL-TRIGGERING-POINT>
                          </EXTERNAL-TRIGGERING-POINTS>
                          <SYMBOL>Dcm_GetProgConditionsStub</SYMBOL>
                        </RUNNABLE-ENTITY>
                        <RUNNABLE-ENTITY T="2022-08-28T11:28:41+03:00" UUID="DCE:ca5e9d02-051c-4077-9f28-51522d378da6">
                          <SHORT-NAME>Dcm_ReadMemory</SHORT-NAME>
                          <MINIMUM-START-INTERVAL>0.0</MINIMUM-START-INTERVAL>
                          <CAN-BE-INVOKED-CONCURRENTLY>false</CAN-BE-INVOKED-CONCURRENTLY>
                          <EXTERNAL-TRIGGERING-POINTS>
                            <EXTERNAL-TRIGGERING-POINT>
                              <TRIGGER-IREF>
                                <P-TRIGGER-IN-ATOMIC-SWC-TYPE-INSTANCE-REF>
                                  <CONTEXT-P-PORT-REF DEST="P-PORT-PROTOTYPE">/AUTOLIV/SoftwareComponents/DcmIf/DcmIf/ptrpAsrDcmServicesDcmIf</CONTEXT-P-PORT-REF>
                                  <TARGET-TRIGGER-REF DEST="TRIGGER">/EB/TriggerInterfaces/itrAsrDcmServices/Dcm_ReadMemory</TARGET-TRIGGER-REF>
                                </P-TRIGGER-IN-ATOMIC-SWC-TYPE-INSTANCE-REF>
                              </TRIGGER-IREF>
                            </EXTERNAL-TRIGGERING-POINT>
                          </EXTERNAL-TRIGGERING-POINTS>
                          <SERVER-CALL-POINTS>
                            <SYNCHRONOUS-SERVER-CALL-POINT UUID="ecb47866-13ca-416b-8be5-ec9e124fc78e">
                              <SHORT-NAME>scp_GetNvmBlockStatus</SHORT-NAME>
                              <OPERATION-IREF>
                                <CONTEXT-R-PORT-REF DEST="R-PORT-PROTOTYPE">/AUTOLIV/SoftwareComponents/DcmIf/DcmIf/pclNvmIfServices</CONTEXT-R-PORT-REF>
                                <TARGET-REQUIRED-OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices/GetNvmBlockStatus</TARGET-REQUIRED-OPERATION-REF>
                              </OPERATION-IREF>
                              <TIMEOUT>0.0</TIMEOUT>
                            </SYNCHRONOUS-SERVER-CALL-POINT>
                            <SYNCHRONOUS-SERVER-CALL-POINT UUID="962526a4-ae86-4e5e-80d9-7bc18f0b5bb8">
                              <SHORT-NAME>scp_ReadBlockByAddress</SHORT-NAME>
                              <OPERATION-IREF>
                                <CONTEXT-R-PORT-REF DEST="R-PORT-PROTOTYPE">/AUTOLIV/SoftwareComponents/DcmIf/DcmIf/pclNvmIfServices</CONTEXT-R-PORT-REF>
                                <TARGET-REQUIRED-OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices/ReadBlockByAddress</TARGET-REQUIRED-OPERATION-REF>
                              </OPERATION-IREF>
                              <TIMEOUT>0.0</TIMEOUT>
                            </SYNCHRONOUS-SERVER-CALL-POINT>
                          </SERVER-CALL-POINTS>
                          <SYMBOL>Dcm_ReadMemoryStub</SYMBOL>
                        </RUNNABLE-ENTITY>
                        <RUNNABLE-ENTITY T="2022-08-28T11:28:34+03:00" UUID="DCE:bfeb1b22-acf5-480b-a9ba-2f8cde20de58">
                          <SHORT-NAME>Dcm_SetProgConditions</SHORT-NAME>
                          <MINIMUM-START-INTERVAL>0.0</MINIMUM-START-INTERVAL>
                          <CAN-BE-INVOKED-CONCURRENTLY>false</CAN-BE-INVOKED-CONCURRENTLY>
                          <EXTERNAL-TRIGGERING-POINTS>
                            <EXTERNAL-TRIGGERING-POINT>
                              <TRIGGER-IREF>
                                <P-TRIGGER-IN-ATOMIC-SWC-TYPE-INSTANCE-REF>
                                  <CONTEXT-P-PORT-REF DEST="P-PORT-PROTOTYPE">/AUTOLIV/SoftwareComponents/DcmIf/DcmIf/ptrpAsrDcmServicesDcmIf</CONTEXT-P-PORT-REF>
                                  <TARGET-TRIGGER-REF DEST="TRIGGER">/EB/TriggerInterfaces/itrAsrDcmServices/Dcm_SetProgConditions</TARGET-TRIGGER-REF>
                                </P-TRIGGER-IN-ATOMIC-SWC-TYPE-INSTANCE-REF>
                              </TRIGGER-IREF>
                            </EXTERNAL-TRIGGERING-POINT>
                          </EXTERNAL-TRIGGERING-POINTS>
                          <SYMBOL>Dcm_SetProgConditionsStub</SYMBOL>
                        </RUNNABLE-ENTITY>
                        <RUNNABLE-ENTITY T="2022-09-09T10:11:29+03:00" UUID="DCE:3629a807-a81e-49f2-bfaa-48cee5d1fdeb">
                          <SHORT-NAME>Dcm_WriteMemory</SHORT-NAME>
                          <MINIMUM-START-INTERVAL>0.0</MINIMUM-START-INTERVAL>
                          <CAN-BE-INVOKED-CONCURRENTLY>false</CAN-BE-INVOKED-CONCURRENTLY>
                          <EXTERNAL-TRIGGERING-POINTS>
                            <EXTERNAL-TRIGGERING-POINT>
                              <TRIGGER-IREF>
                                <P-TRIGGER-IN-ATOMIC-SWC-TYPE-INSTANCE-REF>
                                  <CONTEXT-P-PORT-REF DEST="P-PORT-PROTOTYPE">/AUTOLIV/SoftwareComponents/DcmIf/DcmIf/ptrpAsrDcmServicesDcmIf</CONTEXT-P-PORT-REF>
                                  <TARGET-TRIGGER-REF DEST="TRIGGER">/EB/TriggerInterfaces/itrAsrDcmServices/Dcm_WriteMemory</TARGET-TRIGGER-REF>
                                </P-TRIGGER-IN-ATOMIC-SWC-TYPE-INSTANCE-REF>
                              </TRIGGER-IREF>
                            </EXTERNAL-TRIGGERING-POINT>
                          </EXTERNAL-TRIGGERING-POINTS>
                          <SERVER-CALL-POINTS>
                            <SYNCHRONOUS-SERVER-CALL-POINT UUID="a8a7ee8a-01fc-4d6d-a4bd-8177480718db">
                              <SHORT-NAME>scp_NvmIf_GetRamAddressByBlo</SHORT-NAME>
                              <OPERATION-IREF>
                                <CONTEXT-R-PORT-REF DEST="R-PORT-PROTOTYPE">/AUTOLIV/SoftwareComponents/DcmIf/DcmIf/pclNvmIfServices</CONTEXT-R-PORT-REF>
                                <TARGET-REQUIRED-OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices/NvmIf_GetRamAddressByBlockId</TARGET-REQUIRED-OPERATION-REF>
                              </OPERATION-IREF>
                              <TIMEOUT>0.0</TIMEOUT>
                            </SYNCHRONOUS-SERVER-CALL-POINT>
                            <SYNCHRONOUS-SERVER-CALL-POINT UUID="5bbe3b09-5c80-490f-8ba4-24434bab97d9">
                              <SHORT-NAME>scp_WriteBlockByAddress</SHORT-NAME>
                              <OPERATION-IREF>
                                <CONTEXT-R-PORT-REF DEST="R-PORT-PROTOTYPE">/AUTOLIV/SoftwareComponents/DcmIf/DcmIf/pclNvmIfServices</CONTEXT-R-PORT-REF>
                                <TARGET-REQUIRED-OPERATION-REF DEST="CLIENT-SERVER-OPERATION">/AUTOLIV/NvmIf_DataDictionnary/ClientServerInterfaces/icsNvmIfServices/WriteBlockByAddress</TARGET-REQUIRED-OPERATION-REF>
                              </OPERATION-IREF>
                              <TIMEOUT>0.0</TIMEOUT>
                            </SYNCHRONOUS-SERVER-CALL-POINT>
                          </SERVER-CALL-POINTS>
                          <SYMBOL>Dcm_WriteMemoryStub</SYMBOL>
                        </RUNNABLE-ENTITY>
                        <RUNNABLE-ENTITY T="2023-02-22T08:17:59+02:00" UUID="DCE:06ddff19-f9f2-4066-98d2-c85c94562782">
                          <SHORT-NAME>Rte_DcmConfirmation</SHORT-NAME>
                          <MINIMUM-START-INTERVAL>0.0</MINIMUM-START-INTERVAL>
                          <CAN-BE-INVOKED-CONCURRENTLY>false</CAN-BE-INVOKED-CONCURRENTLY>
                          <EXTERNAL-TRIGGERING-POINTS>
                            <EXTERNAL-TRIGGERING-POINT>
                              <TRIGGER-IREF>
                                <P-TRIGGER-IN-ATOMIC-SWC-TYPE-INSTANCE-REF>
                                  <CONTEXT-P-PORT-REF DEST="P-PORT-PROTOTYPE">/AUTOLIV/SoftwareComponents/DcmIf/DcmIf/ptrpAsrDcmServicesDcmIf</CONTEXT-P-PORT-REF>
                                  <TARGET-TRIGGER-REF DEST="TRIGGER">/EB/TriggerInterfaces/itrAsrDcmServices/Rte_DcmConfirmation</TARGET-TRIGGER-REF>
                                </P-TRIGGER-IN-ATOMIC-SWC-TYPE-INSTANCE-REF>
                              </TRIGGER-IREF>
                            </EXTERNAL-TRIGGERING-POINT>
                          </EXTERNAL-TRIGGERING-POINTS>
                          <SYMBOL>Rte_DcmConfirmation_symb</SYMBOL>
                        </RUNNABLE-ENTITY>
                      </RUNNABLES>
                      <SUPPORTS-MULTIPLE-INSTANTIATION>false</SUPPORTS-MULTIPLE-INSTANTIATION>
                    </SWC-INTERNAL-BEHAVIOR>
                  </INTERNAL-BEHAVIORS>
                </APPLICATION-SW-COMPONENT-TYPE>
                <SWC-IMPLEMENTATION T="2015-10-21T09:49:22+02:00">
                  <SHORT-NAME>DcmIf_imp</SHORT-NAME>
                  <CATEGORY>BSW_Communication_Services</CATEGORY>
                  <CODE-DESCRIPTORS>
                    <CODE T="2015-10-12T16:44:00+02:00">
                      <SHORT-NAME>DcmIf_Impl_Code</SHORT-NAME>
                      <ARTIFACT-DESCRIPTORS>
                        <AUTOSAR-ENGINEERING-OBJECT>
                          <SHORT-LABEL>DcmIf_Impl_Code_CodeDesc</SHORT-LABEL>
                          <CATEGORY>SWSRC</CATEGORY>
                        </AUTOSAR-ENGINEERING-OBJECT>
                      </ARTIFACT-DESCRIPTORS>
                    </CODE>
                  </CODE-DESCRIPTORS>
                  <PROGRAMMING-LANGUAGE>C</PROGRAMMING-LANGUAGE>
                  <RESOURCE-CONSUMPTION T="2016-05-27T17:04:30+02:00">
                    <SHORT-NAME>DcmIf_Impl_ResCons</SHORT-NAME>
                    <MEMORY-SECTIONS>
                      <MEMORY-SECTION T="2023-01-29T17:29:47+02:00" UUID="804ed0e9-8ea4-4851-a6ae-33ee5a86b152">
                        <SHORT-NAME>CODE</SHORT-NAME>
                        <SIZE>0</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/CODE</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:29:47+02:00">
                        <SHORT-NAME>CODE_ASIL_A</SHORT-NAME>
                        <SIZE>0</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/CODE_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:29:55+02:00" UUID="3eac44b8-47a4-4962-977f-ff2d586c580e">
                        <SHORT-NAME>CONST_16</SHORT-NAME>
                        <ALIGNMENT>16</ALIGNMENT>
                        <SIZE>16</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/CONST</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:29:55+02:00">
                        <SHORT-NAME>CONST_16_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>16</ALIGNMENT>
                        <SIZE>16</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/CONST_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:29:55+02:00" UUID="8c254d5b-9b26-4dcb-82c6-7c0fd5395fa4">
                        <SHORT-NAME>CONST_32</SHORT-NAME>
                        <ALIGNMENT>32</ALIGNMENT>
                        <SIZE>32</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/CONST</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:29:55+02:00">
                        <SHORT-NAME>CONST_32_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>32</ALIGNMENT>
                        <SIZE>32</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/CONST_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:29:55+02:00" UUID="246b5bd0-e9e0-4666-820b-9723a69b38b7">
                        <SHORT-NAME>CONST_8</SHORT-NAME>
                        <ALIGNMENT>8</ALIGNMENT>
                        <SIZE>8</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/CONST</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:29:55+02:00">
                        <SHORT-NAME>CONST_8_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>8</ALIGNMENT>
                        <SIZE>8</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/CONST_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:29:55+02:00" UUID="bc8738bc-71ea-46e0-90a3-696b263a2636">
                        <SHORT-NAME>CONST_BOOL</SHORT-NAME>
                        <ALIGNMENT>8</ALIGNMENT>
                        <SIZE>1</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/CONST</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:29:55+02:00">
                        <SHORT-NAME>CONST_BOOL_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>8</ALIGNMENT>
                        <SIZE>1</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/CONST_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:29:55+02:00" UUID="5dae723a-bd94-4e99-9def-1447dea9afc2">
                        <SHORT-NAME>CONST_UNSPECIFIED</SHORT-NAME>
                        <ALIGNMENT>UNSPECIFIED</ALIGNMENT>
                        <SIZE>0</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/CONST</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:29:55+02:00">
                        <SHORT-NAME>CONST_UNSPECIFIED_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>UNSPECIFIED</ALIGNMENT>
                        <SIZE>0</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/CONST_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2018-09-05T14:52:41+02:00" UUID="4b33656f-02b5-442c-8b9d-ad927fcec2b5">
                        <SHORT-NAME>VAR_INIT_16</SHORT-NAME>
                        <ALIGNMENT>16</ALIGNMENT>
                        <SIZE>16</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/VAR_INIT</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION>
                        <SHORT-NAME>VAR_INIT_16_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>16</ALIGNMENT>
                        <SIZE>16</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/VAR_INIT_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2018-09-05T14:52:41+02:00" UUID="d0ace677-5a07-4977-8993-d67431db307a">
                        <SHORT-NAME>VAR_INIT_32</SHORT-NAME>
                        <ALIGNMENT>32</ALIGNMENT>
                        <SIZE>32</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/VAR_INIT</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION>
                        <SHORT-NAME>VAR_INIT_32_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>32</ALIGNMENT>
                        <SIZE>32</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/VAR_INIT_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:30:21+02:00" UUID="4c17a71b-a658-4a8e-89be-c82fb5dd52a7">
                        <SHORT-NAME>VAR_INIT_8</SHORT-NAME>
                        <ALIGNMENT>8</ALIGNMENT>
                        <SIZE>8</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/VAR_INIT</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:30:21+02:00">
                        <SHORT-NAME>VAR_INIT_8_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>8</ALIGNMENT>
                        <SIZE>8</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/VAR_INIT_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2018-09-05T14:53:16+02:00" UUID="61547cea-e0a3-441c-add0-1b0034aff1cc">
                        <SHORT-NAME>VAR_INIT_BOOL</SHORT-NAME>
                        <ALIGNMENT>8</ALIGNMENT>
                        <SIZE>1</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/VAR_INIT</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION>
                        <SHORT-NAME>VAR_INIT_BOOL_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>8</ALIGNMENT>
                        <SIZE>1</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/VAR_INIT_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:30:21+02:00" UUID="0173eb7e-81e3-465d-8cae-80586ef9d593">
                        <SHORT-NAME>VAR_INIT_UNSPECIFIED</SHORT-NAME>
                        <ALIGNMENT>UNSPECIFIED</ALIGNMENT>
                        <SIZE>0</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/VAR_INIT</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2023-01-29T17:30:21+02:00">
                        <SHORT-NAME>VAR_INIT_UNSPECIFIED_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>UNSPECIFIED</ALIGNMENT>
                        <SIZE>0</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/VAR_INIT_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2018-09-05T14:54:54+02:00" UUID="7cb750fd-13b0-43c8-85b4-5f450f6b92d5">
                        <SHORT-NAME>VAR_NO_INIT_16</SHORT-NAME>
                        <ALIGNMENT>16</ALIGNMENT>
                        <SIZE>16</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/VAR_NOINIT</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION>
                        <SHORT-NAME>VAR_NO_INIT_16_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>16</ALIGNMENT>
                        <SIZE>16</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/VAR_NOINIT_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2018-09-05T14:54:54+02:00" UUID="73850ca1-92b3-4ea0-b1f6-6004c671b9f3">
                        <SHORT-NAME>VAR_NO_INIT_32</SHORT-NAME>
                        <ALIGNMENT>32</ALIGNMENT>
                        <SIZE>32</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/VAR_NOINIT</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION>
                        <SHORT-NAME>VAR_NO_INIT_32_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>32</ALIGNMENT>
                        <SIZE>32</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/VAR_NOINIT_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2018-09-05T14:54:54+02:00" UUID="92f92362-58c4-4e78-b319-357a3199bd01">
                        <SHORT-NAME>VAR_NO_INIT_8</SHORT-NAME>
                        <ALIGNMENT>8</ALIGNMENT>
                        <SIZE>8</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/VAR_NOINIT</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION>
                        <SHORT-NAME>VAR_NO_INIT_8_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>8</ALIGNMENT>
                        <SIZE>8</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/VAR_NOINIT_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2018-09-05T14:54:54+02:00" UUID="c4aad9bb-0b98-46f0-80a8-27a2213b238a">
                        <SHORT-NAME>VAR_NO_INIT_BOOL</SHORT-NAME>
                        <ALIGNMENT>8</ALIGNMENT>
                        <SIZE>1</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/VAR_NOINIT</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION>
                        <SHORT-NAME>VAR_NO_INIT_BOOL_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>8</ALIGNMENT>
                        <SIZE>1</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/VAR_NOINIT_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION T="2017-02-07T16:23:34+01:00" UUID="cfe4fb9b-981c-48c7-b721-a5670bce80ad">
                        <SHORT-NAME>VAR_NO_INIT_UNSPECIFIED</SHORT-NAME>
                        <ALIGNMENT>UNSPECIFIED</ALIGNMENT>
                        <SIZE>0</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR/MemMap/SwAddrMethods/VAR_NOINIT</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION>
                        <SHORT-NAME>VAR_NO_INIT_UNSPECIFIED_ASIL_A</SHORT-NAME>
                        <ALIGNMENT>UNSPECIFIED</ALIGNMENT>
                        <SIZE>0</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOLIV/AUTOSAR_MemMap/SwAddrMethods/VAR_NOINIT_ASIL_A</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                      <MEMORY-SECTION>
                        <SHORT-NAME>VAR_POWER_ON_CLEARED</SHORT-NAME>
                        <ALIGNMENT>UNSPECIFIED</ALIGNMENT>
                        <SIZE>0</SIZE>
                        <SW-ADDRMETHOD-REF DEST="SW-ADDR-METHOD">/AUTOSAR_MemMap/SwAddrMethods/VAR_POWER_ON_CLEARED</SW-ADDRMETHOD-REF>
                      </MEMORY-SECTION>
                    </MEMORY-SECTIONS>
                  </RESOURCE-CONSUMPTION>
                  <SW-VERSION>1.0.0</SW-VERSION>
                  <VENDOR-ID>0</VENDOR-ID>
                  <BEHAVIOR-REF DEST="SWC-INTERNAL-BEHAVIOR">/AUTOLIV/SoftwareComponents/DcmIf/DcmIf/DcmIf_IB</BEHAVIOR-REF>
                </SWC-IMPLEMENTATION>
              </ELEMENTS>
            </AR-PACKAGE>
          </AR-PACKAGES>
        </AR-PACKAGE>
      </AR-PACKAGES>
    </AR-PACKAGE>
  </AR-PACKAGES>
</AUTOSAR>
