#if !defined(RTE_ACC_H)
#define RTE_ACC_H

/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2018 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

 /*
  * This file contains Rte component declarations for component type ACC
  *
  * This file has been automatically generated by
  * EB tresos AutoCore Rte Generator Version 6.2.21
  */

 /* \addtogroup Rte Runtime Environment
  * @{ */

/*==================[inclusions]=============================================*/

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <Rte_Intern.h>
#include <Rte_Main.h>         /* RTE main header file */
#include <Rte_ACC_Type.h> /* RTE application types header file */
#include <Rte_ACC_Hook.h> /* RTE application trace hooks header file */

/*==================[macros]=================================================*/

#if (!defined RTE_CORE) /* if included by software component */

#if (!defined RTE_APPLICATION_HEADER_FILE_H) /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif /* if !defined( RTE_APPLICATION_HEADER_FILE_H ) */

#endif

/*------------------[API mapping]--------------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
#if (!defined(RTE_RUNNABLEAPI_ACC_GetAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_ACC_ReadAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_ACC_RestartInitialization)) && (!defined(RTE_RUNNABLEAPI_ACC_runMainFunction))
#define Rte_Write_psrAccStatusFailiureSource_u32AccAlarmRegStatus(data) (Rte_ReceiveBuffer_5F4AAF01077B640ECA8CD3376BD9AB84_value = (data), RTE_E_OK)

#define Rte_Write_psrAccStatusFailiureSource_u8AccReturnStatus(data) (Rte_ReceiveBuffer_4F9F3861A864CBE56D3C085CBB4358BA_value = (data), RTE_E_OK)

#define Rte_Write_psrAccStatusFailiureSource_u8AccCRCStatus(data) (Rte_ReceiveBuffer_E290676B8E0042F0E900CFEABF41311D_value = (data), RTE_E_OK)

#define Rte_Call_pclDioIfServices_ReadChannel(u8ChannelID, u8Level) (DioIf_runReadChannel(u8ChannelID, u8Level), RTE_E_OK)

#endif
#if (!defined(RTE_RUNNABLEAPI_ACC_Autotest_CheckAlarmbPin)) && (!defined(RTE_RUNNABLEAPI_ACC_GetAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_ACC_RestartInitialization)) && (!defined(RTE_RUNNABLEAPI_ACC_runMainFunction))
#define Rte_Trigger_ptrpAsrOsServicesACC_OsTask_Alv_Wdg_Refresh() (Rte_TriggerHook_ACC_ptrpAsrOsServicesACC_OsTask_Alv_Wdg_Refresh_Start(), Rte_TriggerHook_ACC_ptrpAsrOsServicesACC_OsTask_Alv_Wdg_Refresh_Return())

#endif
#if (!defined(RTE_RUNNABLEAPI_ACC_Autotest_CheckAlarmbPin)) && (!defined(RTE_RUNNABLEAPI_ACC_GetAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_ACC_ReadAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_ACC_RestartInitialization))
#define Rte_Write_psr3DAcceleration_st3DAccel(data) Rte_Write_ACC_psr3DAcceleration_st3DAccel(data)

#define Rte_Write_psrAccelMtrPerSecSqd_stAccelMtrPerSecSqd(data) Rte_Write_ACC_psrAccelMtrPerSecSqd_stAccelMtrPerSecSqd(data)

#define Rte_Write_psrAccStatusFailiureSource_u8AccAlarmbPreinitSeqStatus(data) (Rte_ReceiveBuffer_BE95DADF0AE0C0DDD3057EF325CB2E3F_value = (data), RTE_E_OK)

#define Rte_Write_psrACCServices_u8AccInitStateMachine(data) (Rte_ReceiveBuffer_D884FEABE5B833CFF5DB5C08E13DA662_value = (data), RTE_E_OK)

#define Rte_Write_psrAccStatusFailiureSource_u8AccelAxisBroken(data) (Rte_ReceiveBuffer_CEEFA87ADE9C6E304E2C2EC199ADC8A1_value = (data), RTE_E_OK)

#define Rte_Read_prrSolenoidProfile_au8SelectedProfile(data) Rte_Read_ACC_prrSolenoidProfile_au8SelectedProfile(data)

#define Rte_Trigger_ptrpAsrOsServicesACC_ACC_GetAccelerometerData() (Rte_TriggerHook_ACC_ptrpAsrOsServicesACC_ACC_GetAccelerometerData_Start(), Rte_TriggerHook_ACC_ptrpAsrOsServicesACC_ACC_GetAccelerometerData_Return())

#endif

#endif

/*------------------[port handle API mapping]--------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*------------------[application errors]-------------------------------------*/

/*------------------[executable entity activation reasons]-------------------*/

/*------------------[init values]--------------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#define Rte_InitValue_psrACCServices_u8AccInitStateMachine 0U
#define Rte_InitValue_psrAccStatusFailiureSource_u32AccAlarmRegStatus 0U
#define Rte_InitValue_psrAccStatusFailiureSource_u8AccAlarmbPreinitSeqStatus 0U
#define Rte_InitValue_psrAccStatusFailiureSource_u8AccCRCStatus 0U
#define Rte_InitValue_psrAccStatusFailiureSource_u8AccReturnStatus 0U
#define Rte_InitValue_psrAccStatusFailiureSource_u8AccelAxisBroken 0U

#endif

/*==================[type definitions]=======================================*/

/*------------------[instance handle type]-----------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_ACC, RTE_CONST, RTE_CONST) Rte_Instance;
#endif

/*------------------[port handle types]--------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
#endif

/*------------------[per instance memory types]------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*==================[external function declarations]=========================*/

/*------------------[declaration of runnable entities]-----------------------*/

#define ACC_START_SEC_CODE_ASIL_A
#include <ACC_MemMap.h>
extern FUNC(void, RTE_CODE) ACC_Autotest_CheckAlarmbPin (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
#define ACC_STOP_SEC_CODE_ASIL_A
#include <ACC_MemMap.h>

#define ACC_START_SEC_CODE
#include <ACC_MemMap.h>
extern FUNC(void, RTE_CODE) ACC_GetAccelerometerTemperature (P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) u16SpiTemperatureData);
extern FUNC(void, RTE_CODE) ACC_ReadAccelerometerTemperature (void);
#define ACC_STOP_SEC_CODE
#include <ACC_MemMap.h>

#define ACC_START_SEC_CODE_ASIL_A
#include <ACC_MemMap.h>
extern FUNC(void, RTE_CODE) ACC_RestartInitialization (void);
extern FUNC(void, RTE_CODE) ACC_runMainFunction (void);
#define ACC_STOP_SEC_CODE_ASIL_A
#include <ACC_MemMap.h>

/*--------------[declaration of API functions provided by Rte]--------------*/

#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>

#if (!defined(RTE_RUNNABLEAPI_ACC_GetAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_ACC_ReadAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_ACC_RestartInitialization)) && (!defined(RTE_RUNNABLEAPI_ACC_runMainFunction))
#endif
#if (!defined(RTE_RUNNABLEAPI_ACC_Autotest_CheckAlarmbPin)) && (!defined(RTE_RUNNABLEAPI_ACC_GetAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_ACC_RestartInitialization)) && (!defined(RTE_RUNNABLEAPI_ACC_runMainFunction))
#endif
#if (!defined(RTE_RUNNABLEAPI_ACC_Autotest_CheckAlarmbPin)) && (!defined(RTE_RUNNABLEAPI_ACC_GetAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_ACC_ReadAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_ACC_RestartInitialization))
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_ACC_psr3DAcceleration_st3DAccel (P2CONST(REC_3D_AccelerationType, AUTOMATIC, RTE_APPL_DATA) data);

extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_ACC_psrAccelMtrPerSecSqd_stAccelMtrPerSecSqd (P2CONST(REC_3D_AccelMtrPerSecSqdType, AUTOMATIC, RTE_APPL_DATA) data);

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_ACC_prrSolenoidProfile_au8SelectedProfile (P2VAR(au8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_ACC_prrSolenoidProfile_au8SelectedProfile (P2VAR(u8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/*--------------[declaration of API functions provided by other Appl]--------*/

#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>

#if (!defined RTE_CORE) /* if included by software component */
extern FUNC(void, RTE_CODE) DioIf_runReadChannel (u8DioIfChannelType u8ChannelID, P2VAR(u8DioIfLvlType, AUTOMATIC, RTE_APPL_DATA) u8Level);

#endif /* (!defined RTE_CORE) */

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*------------------[instance handle declaration]----------------------------*/
#define RTE_START_SEC_CONST_UNSPECIFIED
#include <Rte_MemMap.h>

extern CONSTP2CONST(Rte_CDS_ACC, RTE_CONST, RTE_CONST) Rte_Inst_ACC;

#define RTE_STOP_SEC_CONST_UNSPECIFIED
#include <Rte_MemMap.h>

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */
/** @} doxygen end group definition */
#endif /* !defined(RTE_ACC_H) */
/*==================[end of file]============================================*/

