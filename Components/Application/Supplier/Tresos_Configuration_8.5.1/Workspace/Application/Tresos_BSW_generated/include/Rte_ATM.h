#if !defined(RTE_ATM_H)
#define RTE_ATM_H

/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2018 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

 /*
  * This file contains Rte component declarations for component type ATM
  *
  * This file has been automatically generated by
  * EB tresos AutoCore Rte Generator Version 6.2.21
  */

 /* \addtogroup Rte Runtime Environment
  * @{ */

/*==================[inclusions]=============================================*/

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <Rte_Intern.h>
#include <Rte_Main.h>         /* RTE main header file */
#include <Rte_ATM_Type.h> /* RTE application types header file */
#include <Rte_ATM_Hook.h> /* RTE application trace hooks header file */

/*==================[macros]=================================================*/

#if (!defined RTE_CORE) /* if included by software component */

#if (!defined RTE_APPLICATION_HEADER_FILE_H) /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif /* if !defined( RTE_APPLICATION_HEADER_FILE_H ) */

#endif

/*------------------[API mapping]--------------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
#if (!defined(RTE_RUNNABLEAPI_ATM_runGetCriticalAutoTestsReachedFlag)) && (!defined(RTE_RUNNABLEAPI_ATM_runGetTestResult)) && (!defined(RTE_RUNNABLEAPI_ATM_runMainFunction))
#define Rte_Trigger_ptrpAtmServicesBswMIf_ATM_Init() (Rte_TriggerHook_ATM_ptrpAtmServicesBswMIf_ATM_Init_Start(), BswM_OnStartComEffective(), Rte_TriggerHook_ATM_ptrpAtmServicesBswMIf_ATM_Init_Return())

#endif
#if (!defined(RTE_RUNNABLEAPI_ATM_Init)) && (!defined(RTE_RUNNABLEAPI_ATM_runGetCriticalAutoTestsReachedFlag)) && (!defined(RTE_RUNNABLEAPI_ATM_runGetTestResult))
#define Rte_Call_pclCheckAdc_AutotestCallback(pu8TestResult) (AdcIf_Autotest_CheckAdc(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclRunResetCause_AutotestCallback(pu8TestResult) (RCM_Autotest_ResetCause(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckShortToVBAT_AutotestCallback(pu8TestResult) (SAD_CheckSolenoidShortToVBATAutotest(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckAccAlarmbPin_AutotestCallback(pu8TestResult) (ACC_Autotest_CheckAlarmbPin(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckSbcStatusInfo_AutotestCallback(pu8TestResult) (SBC_Autotest_CheckStatusInformation(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclEcuOverTemperature_AutotestCallback(pu8TestResult) (IoHwAb_CheckEcuOverTemperatureAutotest(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckPowerStage_AutotestCallback(pu8TestResult) (SAD_CheckPowerStage(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckSolenoidOvervoltage_AutotestCallback(pu8TestResult) (SAD_CheckSolenoidOvervoltage(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckMcuSelfTest_AutotestCallback(pu8TestResult) (McuIf_CheckMcuSelfTest(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckCrcOnMcuRegisters_AutotestCallback(pu8TestResult) (McuIf_CheckMcuCrcRegisterStatus(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclRunPFlashMemoryCorruption_AutotestCallback(pu8TestResult) (MIC_Autotest_RunPFlashMemoryCorruption(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclRunEepromMemoryCorruption_AutotestCallback(pu8TestResult) (MIC_Autotest_RunEepromMemoryCorruption(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclRunRamMemoryCorruption_AutotestCallback(pu8TestResult) (MIC_Autotest_RunRamMemoryCorruption(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclRunEepromMemoryNotProgrammed_AutotestCallback(pu8TestResult) (NvmIf_Autotest_RunEepromMemoryNotProgrammed(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckAdcCalib_AutotestCallback(pu8TestResult) (AdcIf_Autotest_CheckAdcCalib(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclRunExtWDTest_AutotestCallback(pu8TestResult) (SBC_Autotest_WdgTest(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckPowerSupplyUV_AutotestCallback(pu8TestResult) (IoHwAb_CheckPowerSupplyUndervoltageAutotest(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckPowerSupplyOV_AutotestCallback(pu8TestResult) (IoHwAb_CheckPowerSupplyOvervoltageAutotest(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckActuatorState_AutotestCallback(pu8TestResult) (SAD_checkActuatorState(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckShortToGND_AutotestCallback(pu8TestResult) (SAD_CheckSolenoidShortToGNDAutotest(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclCheckOpenCircuit_AutotestCallback(pu8TestResult) (SAD_CheckSolenoidOpenCircuitAutotest(pu8TestResult), RTE_E_OK)

#define Rte_Call_pclModeManagement_CheckModeStatus(u64ModesToCheck, bModeStatus) (FSM_runCheckModeStatus(u64ModesToCheck, bModeStatus), RTE_E_OK)

#define Rte_Call_pclEvtActuatorState_SetEventStatus(EventStatus) Dem_SetEventStatus(14U, EventStatus)

#define Rte_Call_pclInjectError_EIM_ManageAecStatus() (EIM_ManageAecStatus(), RTE_E_OK)

#define Rte_Call_pclEvtAdcOutOfOrder_SetEventStatus(EventStatus) Dem_SetEventStatus(2U, EventStatus)

#define Rte_Call_pclEvtPowerSupllyOV_SetEventStatus(EventStatus) Dem_SetEventStatus(12U, EventStatus)

#define Rte_Call_pclEvtSolenoidOvervoltage_SetEventStatus(EventStatus) Dem_SetEventStatus(21U, EventStatus)

#define Rte_Call_pclEvtMcuCrcRegisters_SetEventStatus(EventStatus) Dem_SetEventStatus(23U, EventStatus)

#define Rte_Call_pclEvtEcuoverTemperature_SetEventStatus(EventStatus) Dem_SetEventStatus(9U, EventStatus)

#define Rte_Call_pclEvtPowerSupllyUV_SetEventStatus(EventStatus) Dem_SetEventStatus(13U, EventStatus)

#define Rte_Call_pclEvtNvmNotPrg_SetEventStatus(EventStatus) Dem_SetEventStatus(6U, EventStatus)

#define Rte_Call_pclEvtExtWdgOutOfOrder_SetEventStatus(EventStatus) Dem_SetEventStatus(5U, EventStatus)

#define Rte_Call_pclEvtWarmReset_SetEventStatus(EventStatus) Dem_SetEventStatus(3U, EventStatus)

#define Rte_Call_pclEvtAdcCalibration_SetEventStatus(EventStatus) Dem_SetEventStatus(8U, EventStatus)

#define Rte_Call_pclEvtMcuSelftest_SetEventStatus(EventStatus) Dem_SetEventStatus(15U, EventStatus)

#define Rte_Call_pclEvtRamEcc_SetEventStatus(EventStatus) Dem_SetEventStatus(7U, EventStatus)

#define Rte_Call_pclEvtNvmEcc_SetEventStatus(EventStatus) Dem_SetEventStatus(10U, EventStatus)

#define Rte_Call_pclEvtFlsEcc_SetEventStatus(EventStatus) Dem_SetEventStatus(4U, EventStatus)

#define Rte_Call_pclEvtActuatorShortToVBAT_SetEventStatus(EventStatus) Dem_SetEventStatus(18U, EventStatus)

#define Rte_Call_pclEvtActuatorShortToGND_SetEventStatus(EventStatus) Dem_SetEventStatus(17U, EventStatus)

#define Rte_Call_pclEvtActuatorOpenCircuit_SetEventStatus(EventStatus) Dem_SetEventStatus(16U, EventStatus)

#define Rte_Call_pclEvtSbcStatusFailiure_SetEventStatus(EventStatus) Dem_SetEventStatus(11U, EventStatus)

#define Rte_Call_pclEvtAccStatusFailure_SetEventStatus(EventStatus) Dem_SetEventStatus(19U, EventStatus)

#define Rte_Call_pclEvtPowerStageFailiure_SetEventStatus(EventStatus) Dem_SetEventStatus(22U, EventStatus)

#define Rte_Trigger_ptrpAtmServicesAsrOs_ATM_runMainFunction() (Rte_TriggerHook_ATM_ptrpAtmServicesAsrOs_ATM_runMainFunction_Start(), Rte_TriggerHook_ATM_ptrpAtmServicesAsrOs_ATM_runMainFunction_Return())

#endif

#endif

/*------------------[port handle API mapping]--------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*------------------[application errors]-------------------------------------*/

#define RTE_E_Dem_ASR42_DiagnosticMonitor_E_NOT_OK 1U

/*------------------[executable entity activation reasons]-------------------*/

/*------------------[init values]--------------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*==================[type definitions]=======================================*/

/*------------------[instance handle type]-----------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_ATM, RTE_CONST, RTE_CONST) Rte_Instance;
#endif

/*------------------[port handle types]--------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
#endif

/*------------------[per instance memory types]------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*==================[external function declarations]=========================*/

/*------------------[declaration of runnable entities]-----------------------*/

#define ATM_START_SEC_CODE_ASIL_A
#include <ATM_MemMap.h>
extern FUNC(void, RTE_CODE) ATM_Init (void);
extern FUNC(void, RTE_CODE) ATM_runGetCriticalAutoTestsReachedFlag (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) u8CriticalAutoTestsReachedFlag);
extern FUNC(void, RTE_CODE) ATM_runGetTestResult (u8AutoTestIdType u8AutoTestId, P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) u8TestResult);
extern FUNC(void, RTE_CODE) ATM_runMainFunction (void);
#define ATM_STOP_SEC_CODE_ASIL_A
#include <ATM_MemMap.h>

/*--------------[declaration of API functions provided by Rte]--------------*/

#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>

#if (!defined(RTE_RUNNABLEAPI_ATM_runGetCriticalAutoTestsReachedFlag)) && (!defined(RTE_RUNNABLEAPI_ATM_runGetTestResult)) && (!defined(RTE_RUNNABLEAPI_ATM_runMainFunction))
#endif
#if (!defined(RTE_RUNNABLEAPI_ATM_Init)) && (!defined(RTE_RUNNABLEAPI_ATM_runGetCriticalAutoTestsReachedFlag)) && (!defined(RTE_RUNNABLEAPI_ATM_runGetTestResult))
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/*--------------[declaration of API functions provided by other Appl]--------*/

#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>

#if (!defined RTE_CORE) /* if included by software component */
extern FUNC(void, RTE_CODE) AdcIf_Autotest_CheckAdc (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) RCM_Autotest_ResetCause (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SAD_CheckSolenoidShortToVBATAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) ACC_Autotest_CheckAlarmbPin (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SBC_Autotest_CheckStatusInformation (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) IoHwAb_CheckEcuOverTemperatureAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SAD_CheckPowerStage (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SAD_CheckSolenoidOvervoltage (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) McuIf_CheckMcuSelfTest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) McuIf_CheckMcuCrcRegisterStatus (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) MIC_Autotest_RunPFlashMemoryCorruption (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) MIC_Autotest_RunEepromMemoryCorruption (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) MIC_Autotest_RunRamMemoryCorruption (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) NvmIf_Autotest_RunEepromMemoryNotProgrammed (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) AdcIf_Autotest_CheckAdcCalib (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SBC_Autotest_WdgTest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) IoHwAb_CheckPowerSupplyUndervoltageAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) IoHwAb_CheckPowerSupplyOvervoltageAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SAD_checkActuatorState (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SAD_CheckSolenoidShortToGNDAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SAD_CheckSolenoidOpenCircuitAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) FSM_runCheckModeStatus (uint64 u64ModesToCheck, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) bModeStatus);

extern FUNC(Std_ReturnType, RTE_CODE) Dem_SetEventStatus (Dem_ASR42_EventIdType pdav0, Dem_ASR42_EventStatusType EventStatus);

extern FUNC(void, RTE_CODE) EIM_ManageAecStatus (void);

#endif /* (!defined RTE_CORE) */

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*------------------[instance handle declaration]----------------------------*/
#define RTE_START_SEC_CONST_UNSPECIFIED
#include <Rte_MemMap.h>

extern CONSTP2CONST(Rte_CDS_ATM, RTE_CONST, RTE_CONST) Rte_Inst_ATM;

#define RTE_STOP_SEC_CONST_UNSPECIFIED
#include <Rte_MemMap.h>

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */
/** @} doxygen end group definition */
#endif /* !defined(RTE_ATM_H) */
/*==================[end of file]============================================*/

