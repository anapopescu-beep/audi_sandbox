#if !defined(RTE_DEM_H)
#define RTE_DEM_H

/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2018 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

 /*
  * This file contains Rte component declarations for component type Dem
  *
  * This file has been automatically generated by
  * EB tresos AutoCore Rte Generator Version 6.2.21
  */

 /* \addtogroup Rte Runtime Environment
  * @{ */

/*==================[inclusions]=============================================*/

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <Rte_Intern.h>
#include <Rte_Main.h>         /* RTE main header file */
#include <Rte_Dem_Type.h> /* RTE application types header file */
#include <Rte_Dem_Hook.h> /* RTE application trace hooks header file */

/*==================[macros]=================================================*/

#if (!defined RTE_CORE) /* if included by software component */

#if (!defined RTE_APPLICATION_HEADER_FILE_H) /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif /* if !defined( RTE_APPLICATION_HEADER_FILE_H ) */

#endif

/*------------------[API mapping]--------------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*------------------[port handle API mapping]--------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*------------------[application errors]-------------------------------------*/

#define RTE_E_Dem_ASR42_DiagnosticInfo_E_NOT_OK 1U
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_NO_DTC_AVAILABLE 2U
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_NODATAAVAILABLE 48U
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_WRONG_RECORDNUMBER 49U
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_WRONG_BUFFERSIZE 21U
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_WRONG_DIDNUMBER 50U
#define RTE_E_Dem_ASR42_DiagnosticMonitor_E_NOT_OK 1U
#define RTE_E_Dem_ASR42_GeneralDiagnosticInfo_E_NOT_OK 1U
#define RTE_E_Dem_ASR42_GeneralDiagnosticInfo_DEM_E_NO_DTC_AVAILABLE 2U
#define RTE_E_Dem_ASR42_GeneralDiagnosticInfo_DEM_E_NODATAAVAILABLE 48U
#define RTE_E_Dem_ASR42_GeneralDiagnosticInfo_DEM_E_WRONG_RECORDNUMBER 49U
#define RTE_E_Dem_ASR42_GeneralDiagnosticInfo_DEM_E_WRONG_DIDNUMBER 50U
#define RTE_E_Dem_ASR42_GeneralDiagnosticInfo_DEM_E_WRONG_BUFFERSIZE 21U
#define RTE_E_Dem_ASR42_OperationCycle_E_NOT_OK 1U
#define RTE_E_Dem_ASR42_EvMemOverflowIndication_E_NOT_OK 1U
#define RTE_E_Dem_ASR42_PowerTakeOff_E_NOT_OK 1U
#define RTE_E_DiagnosticInfo_E_NOT_OK 1U
#define RTE_E_DiagnosticInfo_DEM_E_NO_DTC_AVAILABLE 2U
#define RTE_E_DiagnosticInfo_DEM_E_NODATAAVAILABLE 48U
#define RTE_E_DiagnosticInfo_DEM_E_WRONG_RECORDNUMBER 49U
#define RTE_E_DiagnosticInfo_DEM_E_WRONG_DIDNUMBER 50U
#define RTE_E_DiagnosticInfo_DEM_E_WRONG_BUFFERSIZE 21U
#define RTE_E_DiagnosticMonitor_E_NOT_OK 1U
#define RTE_E_GeneralDiagnosticInfo_E_NOT_OK 1U
#define RTE_E_GeneralDiagnosticInfo_DEM_E_NO_DTC_AVAILABLE 2U
#define RTE_E_GeneralDiagnosticInfo_DEM_E_NODATAAVAILABLE 48U
#define RTE_E_GeneralDiagnosticInfo_DEM_E_WRONG_RECORDNUMBER 49U
#define RTE_E_GeneralDiagnosticInfo_DEM_E_WRONG_BUFFERSIZE 21U
#define RTE_E_GeneralDiagnosticInfo_DEM_E_WRONG_DIDNUMBER 50U
#define RTE_E_OperationCycle_E_NOT_OK 1U
#define RTE_E_EvMemOverflowIndication_E_NOT_OK 1U
#define RTE_E_DcmIf_DEM_CLEAR_WRONG_DTC 1U
#define RTE_E_DcmIf_DEM_CLEAR_WRONG_DTCORIGIN 2U
#define RTE_E_DcmIf_DEM_CLEAR_FAILED 3U
#define RTE_E_DcmIf_DEM_CLEAR_PENDING 4U
#define RTE_E_DcmIf_DEM_CLEAR_BUSY 5U
#define RTE_E_CddIf_DEM_CLEAR_WRONG_DTC 1U
#define RTE_E_CddIf_DEM_CLEAR_WRONG_DTCORIGIN 2U
#define RTE_E_CddIf_DEM_CLEAR_FAILED 3U
#define RTE_E_CddIf_DEM_CLEAR_PENDING 4U
#define RTE_E_CddIf_DEM_CLEAR_BUSY 5U
#define RTE_E_PowerTakeOff_E_NOT_OK 1U

/*------------------[executable entity activation reasons]-------------------*/

/*------------------[init values]--------------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*==================[type definitions]=======================================*/

/*------------------[instance handle type]-----------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_Dem, RTE_CONST, RTE_CONST) Rte_Instance;
#endif

/*------------------[port handle types]--------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
#endif

/*------------------[per instance memory types]------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*==================[external function declarations]=========================*/

/*------------------[declaration of runnable entities]-----------------------*/

#define Dem_START_SEC_CODE
#include <Dem_MemMap.h>
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetDTCOfEvent (Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) DTCOfEvent);
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Dem_ASR42_GetEventFreezeFrameData (Dem_EventIdType EventId, uint8 RecordNumber, boolean ReportTotalRecord, uint16 DataId, P2VAR(Dem_MaxDataValueType, AUTOMATIC, RTE_APPL_DATA) DestBuffer);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Dem_ASR42_GetEventFreezeFrameData (Dem_EventIdType EventId, uint8 RecordNumber, boolean ReportTotalRecord, uint16 DataId, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) DestBuffer);
#endif

extern FUNC(Std_ReturnType, RTE_CODE) Dem_DcmClearDTC (uint32 DTC, Dem_DTCFormatType DTCFormat, Dem_DTCOriginType DTCOrigin);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_ASR42_ClearDTC (uint32 DTC, Dem_DTCFormatType DTCFormat, Dem_DTCOriginType DTCOrigin);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_SetEventStatus (Dem_EventIdType EventId, Dem_EventStatusType EventStatus);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_ResetEventStatus (Dem_EventIdType EventId);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_PrestoreFreezeFrame (Dem_EventIdType EventId);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_ClearPrestoredFreezeFrame (Dem_EventIdType EventId);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_ResetEventDebounceStatus (Dem_EventIdType EventId, Dem_DebounceResetStatusType DebounceResetStatus);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetEventStatus (Dem_EventIdType EventId, P2VAR(Dem_EventStatusExtendedType, AUTOMATIC, RTE_APPL_DATA) EventStatusExtended);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetEventFailed (Dem_EventIdType EventId, P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) EventFailed);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetEventTested (Dem_EventIdType EventId, P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) EventTested);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetFaultDetectionCounter (Dem_EventIdType EventId, P2VAR(sint8, AUTOMATIC, RTE_APPL_DATA) FaultDetectionCounter);
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetEventExtendedDataRecord (Dem_EventIdType EventId, uint8 RecordNumber, P2VAR(Dem_MaxDataValueType, AUTOMATIC, RTE_APPL_DATA) DestBuffer);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetEventExtendedDataRecord (Dem_EventIdType EventId, uint8 RecordNumber, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) DestBuffer);
#endif

extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetDebouncingOfEvent (Dem_EventIdType EventId, P2VAR(Dem_DebouncingStateType, AUTOMATIC, RTE_APPL_DATA) DebouncingState);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetEventFreezeFrameDataEx (Dem_EventIdType EventId, uint8 RecordNumber, uint16 DataId, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) DestBuffer, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) BufSize);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetEventExtendedDataRecordEx (Dem_EventIdType EventId, uint8 RecordNumber, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) DestBuffer, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) BufSize);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_SetOperationCycleState (Dem_OperationCycleIdType OperationCycleId, Dem_OperationCycleStateType CycleState);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetEventMemoryOverflow (Dem_DTCOriginType DTCOrigin, P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) OverflowIndication);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetNumberOfEventMemoryEntries (Dem_DTCOriginType DTCOrigin, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) NumberOfEventMemoryEntries);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_SetPtoStatus (boolean PtoStatus);
#define Dem_STOP_SEC_CODE
#include <Dem_MemMap.h>

/*--------------[declaration of API functions provided by Rte]--------------*/

/*--------------[declaration of API functions provided by other Appl]--------*/

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*------------------[instance handle declaration]----------------------------*/
#define RTE_START_SEC_CONST_UNSPECIFIED
#include <Rte_MemMap.h>

extern CONSTP2CONST(Rte_CDS_Dem, RTE_CONST, RTE_CONST) Rte_Inst_Dem;

#define RTE_STOP_SEC_CONST_UNSPECIFIED
#include <Rte_MemMap.h>

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */
/** @} doxygen end group definition */
#endif /* !defined(RTE_DEM_H) */
/*==================[end of file]============================================*/

