#if !defined(RTE_LPM_H)
#define RTE_LPM_H

/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2018 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

 /*
  * This file contains Rte component declarations for component type LPM
  *
  * This file has been automatically generated by
  * EB tresos AutoCore Rte Generator Version 6.2.21
  */

 /* \addtogroup Rte Runtime Environment
  * @{ */

/*==================[inclusions]=============================================*/

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <Rte_Intern.h>
#include <Rte_Main.h>         /* RTE main header file */
#include <Rte_LPM_Type.h> /* RTE application types header file */
#include <Rte_LPM_Hook.h> /* RTE application trace hooks header file */

/*==================[macros]=================================================*/

#if (!defined RTE_CORE) /* if included by software component */

#if (!defined RTE_APPLICATION_HEADER_FILE_H) /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif /* if !defined( RTE_APPLICATION_HEADER_FILE_H ) */

#endif

/*------------------[API mapping]--------------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
#if (!defined(RTE_RUNNABLEAPI_LPM_sleepMainLoop)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepRestore)) && (!defined(RTE_RUNNABLEAPI_LPTMR_ISR)) && (!defined(RTE_RUNNABLEAPI_PORTD_ISR))
#define Rte_Call_pclSbcServices_SBC_SetToLowPower() (SBC_SetToLowPower(), RTE_E_OK)

#define Rte_Call_pclSbcServices_SBC_sleepTriggerWatchdog() (SBC_sleepTriggerWatchdog(), RTE_E_OK)

#define Rte_Trigger_ptrpLpmServicesBswMIf_LPM_sleepInit() (Rte_TriggerHook_LPM_ptrpLpmServicesBswMIf_LPM_sleepInit_Start(), BswM_OnLowPwrFromPostRun(), Rte_TriggerHook_LPM_ptrpLpmServicesBswMIf_LPM_sleepInit_Return())

#endif
#if (!defined(RTE_RUNNABLEAPI_LPM_sleepInit)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepRestore)) && (!defined(RTE_RUNNABLEAPI_LPTMR_ISR)) && (!defined(RTE_RUNNABLEAPI_PORTD_ISR))
#define Rte_Call_pclLowPowerWakeUp_HandleSeatVariants(u16WakeCh1, u16WakeCh2, bReturn) (IoHwAb_HandleSeatVariants(u16WakeCh1, u16WakeCh2, bReturn), RTE_E_OK)

#define Rte_Call_pclHandleSeatCurrentCircuit_IoHwAb_HandleSeatCurrentCircuit(pu16WakeCh1, pu16WakeCh2, pu8Valid, u8ResetState) (IoHwAb_HandleSeatCurrentCircuit(pu16WakeCh1, pu16WakeCh2, pu8Valid, u8ResetState), RTE_E_OK)

#define Rte_Call_pclAdcIfServices_StartConversion() (AdcIf_StartConversion(), RTE_E_OK)

#define Rte_Call_pclAdcIfServices_StopConversion() (AdcIf_StopConversion(), RTE_E_OK)

#define Rte_Call_pclAdcIfServices_WaitForConversion() (AdcIf_WaitForConversion(), RTE_E_OK)

#define Rte_Trigger_ptrpLpmServicesBswMIf_LPM_sleepMainLoop() (Rte_TriggerHook_LPM_ptrpLpmServicesBswMIf_LPM_sleepMainLoop_Start(), BswM_OnLowPwrFromPostRun(), Rte_TriggerHook_LPM_ptrpLpmServicesBswMIf_LPM_sleepMainLoop_Return())

#endif
#if (!defined(RTE_RUNNABLEAPI_LPM_sleepInit)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepMainLoop)) && (!defined(RTE_RUNNABLEAPI_LPTMR_ISR)) && (!defined(RTE_RUNNABLEAPI_PORTD_ISR))
#define Rte_Call_pclAccRestartInit_RestartInitialization() (ACC_RestartInitialization(), RTE_E_OK)

#define Rte_Call_pclSbcServices_SBC_SetToNormal() (SBC_SetToNormal(), RTE_E_OK)

#define Rte_Trigger_ptrpLpmServicesBswMIf_LPM_sleepRestore() (Rte_TriggerHook_LPM_ptrpLpmServicesBswMIf_LPM_sleepRestore_Start(), BswM_OnLowPwrFromPostRun(), Rte_TriggerHook_LPM_ptrpLpmServicesBswMIf_LPM_sleepRestore_Return())

#endif
#if (!defined(RTE_RUNNABLEAPI_LPM_sleepInit)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepMainLoop)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepRestore)) && (!defined(RTE_RUNNABLEAPI_PORTD_ISR))
#define Rte_Trigger_ptrpLpmServicesAsrOs_LPTMR_ISR() (Rte_TriggerHook_LPM_ptrpLpmServicesAsrOs_LPTMR_ISR_Start(), Rte_TriggerHook_LPM_ptrpLpmServicesAsrOs_LPTMR_ISR_Return())

#endif
#if (!defined(RTE_RUNNABLEAPI_LPM_sleepInit)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepMainLoop)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepRestore)) && (!defined(RTE_RUNNABLEAPI_LPTMR_ISR))
#define Rte_Trigger_ptrpLpmServicesAsrOs_PORTD_ISR() (Rte_TriggerHook_LPM_ptrpLpmServicesAsrOs_PORTD_ISR_Start(), Rte_TriggerHook_LPM_ptrpLpmServicesAsrOs_PORTD_ISR_Return())

#endif

#endif

/*------------------[port handle API mapping]--------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*------------------[application errors]-------------------------------------*/

/*------------------[executable entity activation reasons]-------------------*/

/*------------------[init values]--------------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*==================[type definitions]=======================================*/

/*------------------[instance handle type]-----------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_LPM, RTE_CONST, RTE_CONST) Rte_Instance;
#endif

/*------------------[port handle types]--------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
#endif

/*------------------[per instance memory types]------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*==================[external function declarations]=========================*/

/*------------------[declaration of runnable entities]-----------------------*/

#define LPM_START_SEC_CODE
#include <LPM_MemMap.h>
extern FUNC(void, RTE_CODE) LPM_sleepInit (void);
extern FUNC(void, RTE_CODE) LPM_sleepMainLoop (void);
extern FUNC(void, RTE_CODE) LPM_sleepRestore (void);
extern FUNC(void, RTE_CODE) LPM_LPTMR_ISR (void);
extern FUNC(void, RTE_CODE) LPM_PORTD_ISR (void);
#define LPM_STOP_SEC_CODE
#include <LPM_MemMap.h>

/*--------------[declaration of API functions provided by Rte]--------------*/

#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>

#if (!defined(RTE_RUNNABLEAPI_LPM_sleepMainLoop)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepRestore)) && (!defined(RTE_RUNNABLEAPI_LPTMR_ISR)) && (!defined(RTE_RUNNABLEAPI_PORTD_ISR))
#endif
#if (!defined(RTE_RUNNABLEAPI_LPM_sleepInit)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepRestore)) && (!defined(RTE_RUNNABLEAPI_LPTMR_ISR)) && (!defined(RTE_RUNNABLEAPI_PORTD_ISR))
#endif
#if (!defined(RTE_RUNNABLEAPI_LPM_sleepInit)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepMainLoop)) && (!defined(RTE_RUNNABLEAPI_LPTMR_ISR)) && (!defined(RTE_RUNNABLEAPI_PORTD_ISR))
#endif
#if (!defined(RTE_RUNNABLEAPI_LPM_sleepInit)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepMainLoop)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepRestore)) && (!defined(RTE_RUNNABLEAPI_PORTD_ISR))
#endif
#if (!defined(RTE_RUNNABLEAPI_LPM_sleepInit)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepMainLoop)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepRestore)) && (!defined(RTE_RUNNABLEAPI_LPTMR_ISR))
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/*--------------[declaration of API functions provided by other Appl]--------*/

#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>

#if (!defined RTE_CORE) /* if included by software component */
extern FUNC(void, RTE_CODE) SBC_SetToLowPower (void);

extern FUNC(void, RTE_CODE) SBC_sleepTriggerWatchdog (void);

extern FUNC(void, RTE_CODE) IoHwAb_HandleSeatVariants (uint16 u16WakeCh1, uint16 u16WakeCh2, P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) bReturn);

extern FUNC(void, RTE_CODE) IoHwAb_HandleSeatCurrentCircuit (P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) pu16WakeCh1, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) pu16WakeCh2, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) pu8Valid, uint8 u8ResetState);

extern FUNC(void, RTE_CODE) AdcIf_StartConversion (void);

extern FUNC(void, RTE_CODE) AdcIf_StopConversion (void);

extern FUNC(void, RTE_CODE) AdcIf_WaitForConversion (void);

extern FUNC(void, RTE_CODE) ACC_RestartInitialization (void);

extern FUNC(void, RTE_CODE) SBC_SetToNormal (void);

#endif /* (!defined RTE_CORE) */

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*------------------[instance handle declaration]----------------------------*/
#define RTE_START_SEC_CONST_UNSPECIFIED
#include <Rte_MemMap.h>

extern CONSTP2CONST(Rte_CDS_LPM, RTE_CONST, RTE_CONST) Rte_Inst_LPM;

#define RTE_STOP_SEC_CONST_UNSPECIFIED
#include <Rte_MemMap.h>

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */
/** @} doxygen end group definition */
#endif /* !defined(RTE_LPM_H) */
/*==================[end of file]============================================*/

