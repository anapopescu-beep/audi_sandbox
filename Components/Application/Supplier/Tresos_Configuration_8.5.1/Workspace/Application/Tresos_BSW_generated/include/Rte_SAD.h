#if !defined(RTE_SAD_H)
#define RTE_SAD_H

/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2018 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

 /*
  * This file contains Rte component declarations for component type SAD
  *
  * This file has been automatically generated by
  * EB tresos AutoCore Rte Generator Version 6.2.21
  */

 /* \addtogroup Rte Runtime Environment
  * @{ */

/*==================[inclusions]=============================================*/

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <Rte_Intern.h>
#include <Rte_Main.h>         /* RTE main header file */
#include <Rte_SAD_Type.h> /* RTE application types header file */
#include <Rte_SAD_Hook.h> /* RTE application trace hooks header file */

/*==================[macros]=================================================*/

#if (!defined RTE_CORE) /* if included by software component */

#if (!defined RTE_APPLICATION_HEADER_FILE_H) /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif /* if !defined( RTE_APPLICATION_HEADER_FILE_H ) */

#endif

/*------------------[API mapping]--------------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
#define Rte_Call_pclDioIfServices_ReadChannel(u8ChannelID, u8Level) (DioIf_runReadChannel(u8ChannelID, u8Level), RTE_E_OK)

#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
#define Rte_Write_psrSolenoidOpenCircutStatus_au8SolenoidAutotestStatus(data) Rte_Write_SAD_psrSolenoidOpenCircutStatus_au8SolenoidAutotestStatus(data)

#define Rte_Call_pclEvtActuatorOpenCircuit_GetEventStatus(EventStatusExtended) Dem_GetEventStatus(16U, EventStatusExtended)

#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
#define Rte_Write_psrSolenoidOvervoltageStatus_au8SolenoidOvervoltageStatus(data) Rte_Write_SAD_psrSolenoidOvervoltageStatus_au8SolenoidOvervoltageStatus(data)

#define Rte_Call_pclEvtSolenoidOvervoltage_GetEventStatus(EventStatusExtended) Dem_GetEventStatus(21U, EventStatusExtended)

#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
#define Rte_Write_psrSolenoidShortToGndStatus_au8SolenoidAutotestStatus(data) Rte_Write_SAD_psrSolenoidShortToGndStatus_au8SolenoidAutotestStatus(data)

#define Rte_Call_pclEvtActuatorShortToGround_GetEventStatus(EventStatusExtended) Dem_GetEventStatus(17U, EventStatusExtended)

#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
#define Rte_Write_psrSolenoidShortToVccStatus_au8SolenoidAutotestStatus(data) Rte_Write_SAD_psrSolenoidShortToVccStatus_au8SolenoidAutotestStatus(data)

#define Rte_Call_pclEvtActuatorShortToVbat_GetEventStatus(EventStatusExtended) Dem_GetEventStatus(18U, EventStatusExtended)

#define Rte_Call_pclAutotestServices_GetTestResult(u8AutoTestId, u8TestResult) (ATM_runGetTestResult(u8AutoTestId, u8TestResult), RTE_E_OK)

#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
#define Rte_IrvWrite_SAD_Init_stProfileCfg(data) Rte_IrvWrite_SAD_SAD_Init_stProfileCfg(data)

#define Rte_Trigger_ptrpSadServicesBswMIf_SAD_Init() (Rte_TriggerHook_SAD_ptrpSadServicesBswMIf_SAD_Init_Start(), BswM_OnStartComEffective(), Rte_TriggerHook_SAD_ptrpSadServicesBswMIf_SAD_Init_Return())

#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState))
#define Rte_IrvRead_SAD_runMainFunction_stProfileCfg(data) Rte_IrvRead_SAD_SAD_runMainFunction_stProfileCfg(data)

#define Rte_Write_pseSolenoidPWM_au16Pwm(data) Rte_Write_SAD_pseSolenoidPWM_au16Pwm(data)

#define Rte_Write_psrSolenoidElectricalCharacteristics_au32SolenoidmATarget(data) Rte_Write_SAD_psrSolenoidElectricalCharacteristics_au32SolenoidmATarget(data)

#define Rte_Write_pseSolenoidStep_au8CurrentStep(data) Rte_Write_SAD_pseSolenoidStep_au8CurrentStep(data)

#define Rte_Write_pseDiagRequestServices_au8DiagReq(data) Rte_Write_SAD_pseDiagRequestServices_au8DiagReq(data)

#define Rte_Write_pseDiagRequestServices_au8DiagReqComplement(data) Rte_Write_SAD_pseDiagRequestServices_au8DiagReqComplement(data)

#define Rte_Read_prrSolenoidProfile_au8SelectedProfile(data) Rte_Read_SAD_prrSolenoidProfile_au8SelectedProfile(data)

#define Rte_IsUpdated_prrSolenoidProfile_au8SelectedProfile() Rte_ReceiveBuffer_F4EFEAB4F61420A7A82F5C87C95E3F7F_isUpdated

#define Rte_Read_prrSolenoidStuckStatus_au8SolenoidIsStuck(data) Rte_Read_SAD_prrSolenoidStuckStatus_au8SolenoidIsStuck(data)

#define Rte_IsUpdated_prrSolenoidStuckStatus_au8SolenoidIsStuck() Rte_ReceiveBuffer_51A693B7CF22219339A6B30EF9D816CE_isUpdated

#define Rte_Read_prrSolenoidState_au8SolenoidState(data) Rte_Read_SAD_prrSolenoidState_au8SolenoidState(data)

#define Rte_Call_pclModeManagement_CheckModeStatus(u64ModesToCheck, bModeStatus) (FSM_runCheckModeStatus(u64ModesToCheck, bModeStatus), RTE_E_OK)

#define Rte_Call_pclPwmServices_SetDutyCycle(cu8ChannelID, cu16DutyCycle) (PwmIf_SetDutyCycle(cu8ChannelID, cu16DutyCycle), RTE_E_OK)

#define Rte_Call_pclDioIfServices_WriteChannel(u8ChannelID, u8Level) (DioIf_runWriteChannel(u8ChannelID, u8Level), RTE_E_OK)

#define Rte_Call_pclConvAdcService_getMeasure(u8TypeOfMeasure, u16Measure) (IoHwAb_runGetMeasure(u8TypeOfMeasure, u16Measure), RTE_E_OK)

#define Rte_Trigger_ptrpAsrOsServicesSAD_SAD_runMainFunction() (Rte_TriggerHook_SAD_ptrpAsrOsServicesSAD_SAD_runMainFunction_Start(), Rte_TriggerHook_SAD_ptrpAsrOsServicesSAD_SAD_runMainFunction_Return())

#endif

#endif

/*------------------[port handle API mapping]--------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*------------------[application errors]-------------------------------------*/

#define RTE_E_Dem_ASR42_DiagnosticInfo_E_NOT_OK 1U
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_NO_DTC_AVAILABLE 2U
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_NODATAAVAILABLE 48U
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_WRONG_RECORDNUMBER 49U
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_WRONG_BUFFERSIZE 21U
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_WRONG_DIDNUMBER 50U

/*------------------[executable entity activation reasons]-------------------*/

/*------------------[init values]--------------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*==================[type definitions]=======================================*/

/*------------------[instance handle type]-----------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_SAD, RTE_CONST, RTE_CONST) Rte_Instance;
#endif

/*------------------[port handle types]--------------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */
#endif

/*------------------[per instance memory types]------------------------------*/

#if (!defined RTE_CORE) /* if included by software component */

#endif

/*==================[external function declarations]=========================*/

/*------------------[declaration of runnable entities]-----------------------*/

#define SAD_START_SEC_CODE_ASIL_A
#include <SAD_MemMap.h>
extern FUNC(void, RTE_CODE) SAD_CheckPowerStage (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SAD_CheckSolenoidOpenCircuitAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SAD_CheckSolenoidOvervoltage (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SAD_CheckSolenoidShortToGNDAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SAD_CheckSolenoidShortToVBATAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SAD_Init (void);
extern FUNC(void, RTE_CODE) SAD_checkActuatorState (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SAD_runMainFunction (void);
#define SAD_STOP_SEC_CODE_ASIL_A
#include <SAD_MemMap.h>

/*--------------[declaration of API functions provided by Rte]--------------*/

#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>

#if (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidOpenCircutStatus_au8SolenoidAutotestStatus (P2CONST(au8SolenoidOCStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidOpenCircutStatus_au8SolenoidAutotestStatus (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidOvervoltageStatus_au8SolenoidOvervoltageStatus (P2CONST(au8SolenoidOvervoltageStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidOvervoltageStatus_au8SolenoidOvervoltageStatus (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidShortToGndStatus_au8SolenoidAutotestStatus (P2CONST(au8SolenoidShortToGndStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidShortToGndStatus_au8SolenoidAutotestStatus (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidShortToVccStatus_au8SolenoidAutotestStatus (P2CONST(au8SolenoidShortToVccStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidShortToVccStatus_au8SolenoidAutotestStatus (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
extern FUNC(void, RTE_CODE) Rte_IrvWrite_SAD_SAD_Init_stProfileCfg (P2CONST(REC_stProfileCfgType, AUTOMATIC, RTE_APPL_DATA) data);

#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState))
extern FUNC(void, RTE_CODE) Rte_IrvRead_SAD_SAD_runMainFunction_stProfileCfg (P2VAR(REC_stProfileCfgType, AUTOMATIC, RTE_APPL_DATA) data);

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseSolenoidPWM_au16Pwm (P2CONST(au16PwmType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseSolenoidPWM_au16Pwm (P2CONST(unsigned short, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidElectricalCharacteristics_au32SolenoidmATarget (P2CONST(au32SolenoidmATargetType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidElectricalCharacteristics_au32SolenoidmATarget (P2CONST(unsigned int, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseSolenoidStep_au8CurrentStep (P2CONST(au8CurrentStepType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseSolenoidStep_au8CurrentStep (P2CONST(u8CurrentStepType, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseDiagRequestServices_au8DiagReq (P2CONST(au8eCSDiagReqType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseDiagRequestServices_au8DiagReq (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseDiagRequestServices_au8DiagReqComplement (P2CONST(au8eCSDiagReqType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseDiagRequestServices_au8DiagReqComplement (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SAD_prrSolenoidProfile_au8SelectedProfile (P2VAR(au8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SAD_prrSolenoidProfile_au8SelectedProfile (P2VAR(u8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SAD_prrSolenoidStuckStatus_au8SolenoidIsStuck (P2VAR(au8SolenoidBackupsType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SAD_prrSolenoidStuckStatus_au8SolenoidIsStuck (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SAD_prrSolenoidState_au8SolenoidState (P2VAR(au8FsmStateType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SAD_prrSolenoidState_au8SolenoidState (P2VAR(u8FsmStateType, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/*--------------[declaration of API functions provided by other Appl]--------*/

#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>

#if (!defined RTE_CORE) /* if included by software component */
extern FUNC(void, RTE_CODE) DioIf_runReadChannel (u8DioIfChannelType u8ChannelID, P2VAR(u8DioIfLvlType, AUTOMATIC, RTE_APPL_DATA) u8Level);

extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetEventStatus (Dem_ASR42_EventIdType pdav0, P2VAR(Dem_ASR42_EventStatusExtendedType, AUTOMATIC, RTE_APPL_DATA) EventStatusExtended);

extern FUNC(void, RTE_CODE) ATM_runGetTestResult (u8AutoTestIdType u8AutoTestId, P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) u8TestResult);

extern FUNC(void, RTE_CODE) FSM_runCheckModeStatus (uint64 u64ModesToCheck, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) bModeStatus);

extern FUNC(void, RTE_CODE) PwmIf_SetDutyCycle (u8PwmChannelType cu8ChannelID, u16PwmDutyCycleType cu16DutyCycle);

extern FUNC(void, RTE_CODE) DioIf_runWriteChannel (u8DioIfChannelType u8ChannelID, u8DioIfLvlType u8Level);

extern FUNC(void, RTE_CODE) IoHwAb_runGetMeasure (u8AdcChannelIDType u8TypeOfMeasure, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) u16Measure);

#endif /* (!defined RTE_CORE) */

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*------------------[instance handle declaration]----------------------------*/
#define RTE_START_SEC_CONST_UNSPECIFIED
#include <Rte_MemMap.h>

extern CONSTP2CONST(Rte_CDS_SAD, RTE_CONST, RTE_CONST) Rte_Inst_SAD;

#define RTE_STOP_SEC_CONST_UNSPECIFIED
#include <Rte_MemMap.h>

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */
/** @} doxygen end group definition */
#endif /* !defined(RTE_SAD_H) */
/*==================[end of file]============================================*/

