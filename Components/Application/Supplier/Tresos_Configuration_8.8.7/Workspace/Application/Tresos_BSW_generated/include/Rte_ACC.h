#ifndef RTE_ACC_H
#define RTE_ACC_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type ACC
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_ACC_Type.h>
#include <Rte_ACC_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_ACC_Autotest_CheckAlarmbPin)) && (!defined(RTE_RUNNABLEAPI_ACC_GetAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_ACC_ReadAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_ACC_RestartInitialization)) && (!defined(RTE_RUNNABLEAPI_ACC_runMainFunction))
#define RTE_RUNNABLEAPI_ACC_Autotest_CheckAlarmbPin
#define RTE_RUNNABLEAPI_ACC_GetAccelerometerTemperature
#define RTE_RUNNABLEAPI_ACC_ReadAccelerometerTemperature
#define RTE_RUNNABLEAPI_ACC_RestartInitialization
#define RTE_RUNNABLEAPI_ACC_runMainFunction
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_ACC_Autotest_CheckAlarmbPin)
#define Rte_Write_psrAccStatusFailiureSource_u32AccAlarmRegStatus(data) (Rte_ReceiveBuffer__CIL_prrAccStatusFailiureSource_u32AccAlarmRegStatus_value = (data)/* RTE.Review.VariableAssignment.Justification: Destination of assignment only writes to a Rte local or global variable. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Write_psrAccStatusFailiureSource_u8AccReturnStatus(data) (Rte_ReceiveBuffer__CIL_prrAccStatusFailiureSource_u8AccReturnStatus_value = (data)/* RTE.Review.VariableAssignment.Justification: Destination of assignment only writes to a Rte local or global variable. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Write_psrAccStatusFailiureSource_u8AccCRCStatus(data) (Rte_ReceiveBuffer__CIL_prrAccStatusFailiureSource_u8AccCRCStatus_value = (data)/* RTE.Review.VariableAssignment.Justification: Destination of assignment only writes to a Rte local or global variable. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclDioIfServices_ReadChannel(u8ChannelID, u8Level) (DioIf_runReadChannel(u8ChannelID, u8Level)/*
Review instructions/justifications for parameter #2 with name 'u8Level' and passed argument 'u8Level':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#136: Verify that the pointer u8Level always points to a u8DioIfLvlType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#141: Verify that the called function does not write more than sizeof(u8DioIfLvlType) bytes to *u8Level. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_ACC_ReadAccelerometerTemperature)
#define Rte_Trigger_ptrpAsrOsServicesACC_OsTask_Alv_Wdg_Refresh() (Rte_TriggerHook_ACC_ptrpAsrOsServicesACC_OsTask_Alv_Wdg_Refresh_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_ACC_ptrpAsrOsServicesACC_OsTask_Alv_Wdg_Refresh_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_ACC_runMainFunction)
#define Rte_Write_psr3DAcceleration_st3DAccel(data) Rte_Write_ACC_psr3DAcceleration_st3DAccel(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_psrAccelMtrPerSecSqd_stAccelMtrPerSecSqd(data) Rte_Write_ACC_psrAccelMtrPerSecSqd_stAccelMtrPerSecSqd(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_psrAccStatusFailiureSource_u8AccAlarmbPreinitSeqStatus(data) (Rte_ReceiveBuffer__CIL_prrAccStatusFailiureSource_u8AccAlarmbPreinitSeqStatus_value = (data)/* RTE.Review.VariableAssignment.Justification: Destination of assignment only writes to a Rte local or global variable. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Write_psrACCServices_u8AccInitStateMachine(data) (Rte_ReceiveBuffer__FSM_prrACCServices_u8AccInitStateMachine_value = (data)/* RTE.Review.VariableAssignment.Justification: Destination of assignment only writes to a Rte local or global variable. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Write_psrAccStatusFailiureSource_u8AccelAxisBroken(data) (Rte_ReceiveBuffer__CIL_prrAccStatusFailiureSource_u8AccelAxisBroken_value = (data)/* RTE.Review.VariableAssignment.Justification: Destination of assignment only writes to a Rte local or global variable. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_prrSolenoidProfile_au8SelectedProfile(data) Rte_Read_ACC_prrSolenoidProfile_au8SelectedProfile(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#137: Verify that the pointer data always points to a au8SolenoidProfileType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#142: Verify that the called function does not write more than sizeof(au8SolenoidProfileType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Trigger_ptrpAsrOsServicesACC_ACC_GetAccelerometerData() (Rte_TriggerHook_ACC_ptrpAsrOsServicesACC_ACC_GetAccelerometerData_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_ACC_ptrpAsrOsServicesACC_ACC_GetAccelerometerData_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#ifndef RTE_CORE /* if included by software component */
#define Rte_InitValue_psrACCServices_u8AccInitStateMachine 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_psrAccStatusFailiureSource_u32AccAlarmRegStatus 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_psrAccStatusFailiureSource_u8AccAlarmbPreinitSeqStatus 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_psrAccStatusFailiureSource_u8AccCRCStatus 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_psrAccStatusFailiureSource_u8AccReturnStatus 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_psrAccStatusFailiureSource_u8AccelAxisBroken 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_ACC, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_ACC, RTE_CONST) Rte_Instance_ACC;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_ACC, RTE_CONST, RTE_CONST) Rte_Inst_ACC;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define ACC_START_SEC_CODE_ASIL_A
#include <ACC_MemMap.h>
extern FUNC(void, RTE_CODE) ACC_Autotest_CheckAlarmbPin (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

#define ACC_STOP_SEC_CODE_ASIL_A
#include <ACC_MemMap.h>
#define ACC_START_SEC_CODE
#include <ACC_MemMap.h>
extern FUNC(void, RTE_CODE) ACC_GetAccelerometerTemperature (P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) u16SpiTemperatureData);

extern FUNC(void, RTE_CODE) ACC_ReadAccelerometerTemperature (void);

#define ACC_STOP_SEC_CODE
#include <ACC_MemMap.h>
#define ACC_START_SEC_CODE_ASIL_A
#include <ACC_MemMap.h>
extern FUNC(void, RTE_CODE) ACC_RestartInitialization (void);

extern FUNC(void, RTE_CODE) ACC_runMainFunction (void);

#define ACC_STOP_SEC_CODE_ASIL_A
#include <ACC_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_ACC_runMainFunction))
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_ACC_psr3DAcceleration_st3DAccel (P2CONST(REC_3D_AccelerationType, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_ACC_psrAccelMtrPerSecSqd_stAccelMtrPerSecSqd (P2CONST(REC_3D_AccelMtrPerSecSqdType, AUTOMATIC, RTE_APPL_DATA) data);
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_ACC_prrSolenoidProfile_au8SelectedProfile (P2VAR(au8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_ACC_prrSolenoidProfile_au8SelectedProfile (P2VAR(u8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) DioIf_runReadChannel (u8DioIfChannelType u8ChannelID, P2VAR(u8DioIfLvlType, AUTOMATIC, RTE_APPL_DATA) u8Level);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
