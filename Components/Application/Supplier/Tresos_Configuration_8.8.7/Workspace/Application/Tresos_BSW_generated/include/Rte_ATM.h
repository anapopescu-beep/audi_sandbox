#ifndef RTE_ATM_H
#define RTE_ATM_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type ATM
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_ATM_Type.h>
#include <Rte_ATM_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_ATM_Init)) && (!defined(RTE_RUNNABLEAPI_ATM_runGetCriticalAutoTestsReachedFlag)) && (!defined(RTE_RUNNABLEAPI_ATM_runGetTestResult)) && (!defined(RTE_RUNNABLEAPI_ATM_runMainFunction))
#define RTE_RUNNABLEAPI_ATM_Init
#define RTE_RUNNABLEAPI_ATM_runGetCriticalAutoTestsReachedFlag
#define RTE_RUNNABLEAPI_ATM_runGetTestResult
#define RTE_RUNNABLEAPI_ATM_runMainFunction
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_ATM_Init)
#define Rte_Trigger_ptrpAtmServicesBswMIf_ATM_Init() (Rte_TriggerHook_ATM_ptrpAtmServicesBswMIf_ATM_Init_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnStartComEffective()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_ATM_ptrpAtmServicesBswMIf_ATM_Init_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_ATM_runMainFunction)
#define Rte_Call_pclCheckAdc_AutotestCallback(pu8TestResult) (AdcIf_Autotest_CheckAdc(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#138: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#145: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclRunResetCause_AutotestCallback(pu8TestResult) (RCM_Autotest_ResetCause(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#139: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#146: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckShortToVBAT_AutotestCallback(pu8TestResult) (SAD_CheckSolenoidShortToVBATAutotest(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#140: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#147: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckAccAlarmbPin_AutotestCallback(pu8TestResult) (ACC_Autotest_CheckAlarmbPin(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#141: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#148: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckSbcStatusInfo_AutotestCallback(pu8TestResult) (SBC_Autotest_CheckStatusInformation(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#142: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#149: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclEcuOverTemperature_AutotestCallback(pu8TestResult) (IoHwAb_CheckEcuOverTemperatureAutotest(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#143: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#150: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckPowerStage_AutotestCallback(pu8TestResult) (SAD_CheckPowerStage(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#144: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#151: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckSolenoidOvervoltage_AutotestCallback(pu8TestResult) (SAD_CheckSolenoidOvervoltage(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#145: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#152: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckMcuSelfTest_AutotestCallback(pu8TestResult) (McuIf_CheckMcuSelfTest(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#146: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#153: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckCrcOnMcuRegisters_AutotestCallback(pu8TestResult) (McuIf_CheckMcuCrcRegisterStatus(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#147: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#154: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclRunPFlashMemoryCorruption_AutotestCallback(pu8TestResult) (MIC_Autotest_RunPFlashMemoryCorruption(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#148: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#155: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclRunEepromMemoryCorruption_AutotestCallback(pu8TestResult) (MIC_Autotest_RunEepromMemoryCorruption(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#149: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#156: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclRunRamMemoryCorruption_AutotestCallback(pu8TestResult) (MIC_Autotest_RunRamMemoryCorruption(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#150: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#157: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclRunEepromMemoryNotProgrammed_AutotestCallback(pu8TestResult) (NvmIf_Autotest_RunEepromMemoryNotProgrammed(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#151: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#158: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckAdcCalib_AutotestCallback(pu8TestResult) (AdcIf_Autotest_CheckAdcCalib(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#152: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#159: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclRunExtWDTest_AutotestCallback(pu8TestResult) (SBC_Autotest_WdgTest(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#153: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#160: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckPowerSupplyUV_AutotestCallback(pu8TestResult) (IoHwAb_CheckPowerSupplyUndervoltageAutotest(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#154: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#161: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckPowerSupplyOV_AutotestCallback(pu8TestResult) (IoHwAb_CheckPowerSupplyOvervoltageAutotest(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#155: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#162: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckActuatorState_AutotestCallback(pu8TestResult) (SAD_checkActuatorState(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#156: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#163: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckShortToGND_AutotestCallback(pu8TestResult) (SAD_CheckSolenoidShortToGNDAutotest(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#157: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#164: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclCheckOpenCircuit_AutotestCallback(pu8TestResult) (SAD_CheckSolenoidOpenCircuitAutotest(pu8TestResult)/*
Review instructions/justifications for parameter #1 with name 'pu8TestResult' and passed argument 'pu8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#158: Verify that the pointer pu8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#165: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *pu8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclModeManagement_CheckModeStatus(u64ModesToCheck, bModeStatus) (FSM_runCheckModeStatus(u64ModesToCheck, bModeStatus)/*
Review instructions/justifications for parameter #2 with name 'bModeStatus' and passed argument 'bModeStatus':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#159: Verify that the pointer bModeStatus always points to a uint8 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#166: Verify that the called function does not write more than sizeof(uint8) bytes to *bModeStatus. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclEvtActuatorState_SetEventStatus(EventStatus) Dem_SetEventStatus(14U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclInjectError_EIM_ManageAecStatus() (EIM_ManageAecStatus()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclEvtAdcOutOfOrder_SetEventStatus(EventStatus) Dem_SetEventStatus(2U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtPowerSupllyOV_SetEventStatus(EventStatus) Dem_SetEventStatus(12U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtSolenoidOvervoltage_SetEventStatus(EventStatus) Dem_SetEventStatus(21U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtMcuCrcRegisters_SetEventStatus(EventStatus) Dem_SetEventStatus(23U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtEcuoverTemperature_SetEventStatus(EventStatus) Dem_SetEventStatus(9U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtPowerSupllyUV_SetEventStatus(EventStatus) Dem_SetEventStatus(13U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtNvmNotPrg_SetEventStatus(EventStatus) Dem_SetEventStatus(6U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtExtWdgOutOfOrder_SetEventStatus(EventStatus) Dem_SetEventStatus(5U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtWarmReset_SetEventStatus(EventStatus) Dem_SetEventStatus(3U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtAdcCalibration_SetEventStatus(EventStatus) Dem_SetEventStatus(8U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtMcuSelftest_SetEventStatus(EventStatus) Dem_SetEventStatus(15U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtRamEcc_SetEventStatus(EventStatus) Dem_SetEventStatus(7U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtNvmEcc_SetEventStatus(EventStatus) Dem_SetEventStatus(10U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtFlsEcc_SetEventStatus(EventStatus) Dem_SetEventStatus(4U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtActuatorShortToVBAT_SetEventStatus(EventStatus) Dem_SetEventStatus(18U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtActuatorShortToGND_SetEventStatus(EventStatus) Dem_SetEventStatus(17U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtActuatorOpenCircuit_SetEventStatus(EventStatus) Dem_SetEventStatus(16U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtSbcStatusFailiure_SetEventStatus(EventStatus) Dem_SetEventStatus(11U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtAccStatusFailure_SetEventStatus(EventStatus) Dem_SetEventStatus(19U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtPowerStageFailiure_SetEventStatus(EventStatus) Dem_SetEventStatus(22U, EventStatus)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Trigger_ptrpAtmServicesAsrOs_ATM_runMainFunction() (Rte_TriggerHook_ATM_ptrpAtmServicesAsrOs_ATM_runMainFunction_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_ATM_ptrpAtmServicesAsrOs_ATM_runMainFunction_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#define RTE_E_Dem_ASR42_DiagnosticMonitor_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_ATM, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_ATM, RTE_CONST) Rte_Instance_ATM;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_ATM, RTE_CONST, RTE_CONST) Rte_Inst_ATM;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define ATM_START_SEC_CODE_ASIL_A
#include <ATM_MemMap.h>
extern FUNC(void, RTE_CODE) ATM_Init (void);

extern FUNC(void, RTE_CODE) ATM_runGetCriticalAutoTestsReachedFlag (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) u8CriticalAutoTestsReachedFlag);

extern FUNC(void, RTE_CODE) ATM_runGetTestResult (u8AutoTestIdType u8AutoTestId, P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) u8TestResult);

extern FUNC(void, RTE_CODE) ATM_runMainFunction (void);

#define ATM_STOP_SEC_CODE_ASIL_A
#include <ATM_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) BswM_OnStartComEffective (void);
extern FUNC(void, RTE_CODE) AdcIf_Autotest_CheckAdc (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) RCM_Autotest_ResetCause (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SAD_CheckSolenoidShortToVBATAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) ACC_Autotest_CheckAlarmbPin (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SBC_Autotest_CheckStatusInformation (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) IoHwAb_CheckEcuOverTemperatureAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SAD_CheckPowerStage (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SAD_CheckSolenoidOvervoltage (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) McuIf_CheckMcuSelfTest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) McuIf_CheckMcuCrcRegisterStatus (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) MIC_Autotest_RunPFlashMemoryCorruption (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) MIC_Autotest_RunEepromMemoryCorruption (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) MIC_Autotest_RunRamMemoryCorruption (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) NvmIf_Autotest_RunEepromMemoryNotProgrammed (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) AdcIf_Autotest_CheckAdcCalib (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SBC_Autotest_WdgTest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) IoHwAb_CheckPowerSupplyUndervoltageAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) IoHwAb_CheckPowerSupplyOvervoltageAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SAD_checkActuatorState (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SAD_CheckSolenoidShortToGNDAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) SAD_CheckSolenoidOpenCircuitAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);
extern FUNC(void, RTE_CODE) FSM_runCheckModeStatus (uint64 u64ModesToCheck, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) bModeStatus);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_SetEventStatus (Dem_ASR42_EventIdType pdav0, Dem_ASR42_EventStatusType EventStatus);
extern FUNC(void, RTE_CODE) EIM_ManageAecStatus (void);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
