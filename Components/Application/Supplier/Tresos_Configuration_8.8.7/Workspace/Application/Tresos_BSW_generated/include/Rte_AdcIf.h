#ifndef RTE_ADCIF_H
#define RTE_ADCIF_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type AdcIf
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_AdcIf_Type.h>
#include <Rte_AdcIf_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_AdcIf_Autotest_CheckAdc)) && (!defined(RTE_RUNNABLEAPI_AdcIf_Autotest_CheckAdcCalib)) && (!defined(RTE_RUNNABLEAPI_AdcIf_Calib)) && (!defined(RTE_RUNNABLEAPI_AdcIf_GPTOnTimer_Expiration)) && (!defined(RTE_RUNNABLEAPI_AdcIf_StartConversion)) && (!defined(RTE_RUNNABLEAPI_AdcIf_StopConversion)) && (!defined(RTE_RUNNABLEAPI_AdcIf_WaitForConversion)) && (!defined(RTE_RUNNABLEAPI_AdcIf_runDeInit)) && (!defined(RTE_RUNNABLEAPI_AdcIf_runGetChannelValue)) && (!defined(RTE_RUNNABLEAPI_AdcIf_runInit))
#define RTE_RUNNABLEAPI_AdcIf_Autotest_CheckAdc
#define RTE_RUNNABLEAPI_AdcIf_Autotest_CheckAdcCalib
#define RTE_RUNNABLEAPI_AdcIf_Calib
#define RTE_RUNNABLEAPI_AdcIf_GPTOnTimer_Expiration
#define RTE_RUNNABLEAPI_AdcIf_StartConversion
#define RTE_RUNNABLEAPI_AdcIf_StopConversion
#define RTE_RUNNABLEAPI_AdcIf_WaitForConversion
#define RTE_RUNNABLEAPI_AdcIf_runDeInit
#define RTE_RUNNABLEAPI_AdcIf_runGetChannelValue
#define RTE_RUNNABLEAPI_AdcIf_runInit
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_AdcIf_Calib)
#define Rte_Trigger_ptrpEcuMIfServicesAdcIf_AdcIf_Calib() (Rte_TriggerHook_AdcIf_ptrpEcuMIfServicesAdcIf_AdcIf_Calib_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, EcuM_DefaultInitListOne_0_symb()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_AdcIf_ptrpEcuMIfServicesAdcIf_AdcIf_Calib_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_AdcIf_GPTOnTimer_Expiration)
#define Rte_Write_prrAdcBufferServices_aau16HistoricalAdcSamples(data) Rte_Write_AdcIf_prrAdcBufferServices_aau16HistoricalAdcSamples(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_prrAdcBufferServices_u8HistoricalAdcSampleIndex(data) Rte_Write_AdcIf_prrAdcBufferServices_u8HistoricalAdcSampleIndex(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Trigger_ptrpAsrGptServicesAdcIf_AdcIf_GPTOnTimer_Expiration() (Rte_TriggerHook_AdcIf_ptrpAsrGptServicesAdcIf_AdcIf_GPTOnTimer_Expiration_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_AdcIf_ptrpAsrGptServicesAdcIf_AdcIf_GPTOnTimer_Expiration_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_AdcIf_runDeInit)
#define Rte_Trigger_ptrpAdcIfServicesBswMIf_AdcIf_runDeInit() (Rte_TriggerHook_AdcIf_ptrpAdcIfServicesBswMIf_AdcIf_runDeInit_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnGoOffOneA()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_AdcIf_ptrpAdcIfServicesBswMIf_AdcIf_runDeInit_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_AdcIf_runInit)
#define Rte_Trigger_ptrpAdcIfServicesBswMIf_AdcIf_runInit() (Rte_TriggerHook_AdcIf_ptrpAdcIfServicesBswMIf_AdcIf_runInit_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnStartupTwoA()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_AdcIf_ptrpAdcIfServicesBswMIf_AdcIf_runInit_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#ifndef RTE_CORE /* if included by software component */
#define Rte_InitValue_prrAdcBufferServices_u8HistoricalAdcSampleIndex 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_AdcIf, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_AdcIf, RTE_CONST) Rte_Instance_AdcIf;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_AdcIf, RTE_CONST, RTE_CONST) Rte_Inst_AdcIf;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define AdcIf_START_SEC_CODE_ASIL_A
#include <AdcIf_MemMap.h>
extern FUNC(void, RTE_CODE) AdcIf_Autotest_CheckAdc (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) AdcIf_Autotest_CheckAdcCalib (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) AdcIf_Calib (void);

extern FUNC(void, RTE_CODE) AdcIf_GPTOnTimer_Expiration (void);

extern FUNC(void, RTE_CODE) AdcIf_StartConversion (void);

extern FUNC(void, RTE_CODE) AdcIf_StopConversion (void);

extern FUNC(void, RTE_CODE) AdcIf_WaitForConversion (void);

extern FUNC(void, RTE_CODE) AdcIf_runDeInit (void);

extern FUNC(void, RTE_CODE) AdcIf_runGetChannelValue (u8AdcChannelIDType u8ChannelId, P2VAR(u16AdcValueLsbType, AUTOMATIC, RTE_APPL_DATA) u16Value);

extern FUNC(void, RTE_CODE) AdcIf_runInit (void);

#define AdcIf_STOP_SEC_CODE_ASIL_A
#include <AdcIf_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_AdcIf_GPTOnTimer_Expiration))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_AdcIf_prrAdcBufferServices_aau16HistoricalAdcSamples (P2CONST(aau16HistoricalAdcSamplesType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_AdcIf_prrAdcBufferServices_aau16HistoricalAdcSamples (P2CONST(unsigned short, AUTOMATIC, RTE_APPL_DATA) data);
#endif
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_AdcIf_prrAdcBufferServices_u8HistoricalAdcSampleIndex (uint8 data);
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) EcuM_DefaultInitListOne_0_symb (void);
extern FUNC(void, RTE_CODE) BswM_OnGoOffOneA (void);
extern FUNC(void, RTE_CODE) BswM_OnStartupTwoA (void);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
