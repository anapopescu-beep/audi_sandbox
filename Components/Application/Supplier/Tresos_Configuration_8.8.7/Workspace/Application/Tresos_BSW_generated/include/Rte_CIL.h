#ifndef RTE_CIL_H
#define RTE_CIL_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type CIL
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_CIL_Type.h>
#include <Rte_CIL_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_CIL_runAppliToCAN)) && (!defined(RTE_RUNNABLEAPI_CIL_runCANToAppli)) && (!defined(RTE_RUNNABLEAPI_CIL_runCANToSafetyAppli)) && (!defined(RTE_RUNNABLEAPI_CIL_runInit)) && (!defined(RTE_RUNNABLEAPI_CIL_runManageMF)) && (!defined(RTE_RUNNABLEAPI_CIL_updateCurrentEcuState))
#define RTE_RUNNABLEAPI_CIL_runAppliToCAN
#define RTE_RUNNABLEAPI_CIL_runCANToAppli
#define RTE_RUNNABLEAPI_CIL_runCANToSafetyAppli
#define RTE_RUNNABLEAPI_CIL_runInit
#define RTE_RUNNABLEAPI_CIL_runManageMF
#define RTE_RUNNABLEAPI_CIL_updateCurrentEcuState
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_CIL_runAppliToCAN)
#define Rte_Write_SP_IF_eCS_Error_Reihe1_BFS_1_DE_eCS_Error_Reihe1_BFS_1(data) Rte_Write_CIL_SP_IF_eCS_Error_Reihe1_BFS_1_DE_eCS_Error_Reihe1_BFS_1(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Error_Reihe1_BFS_2_DE_eCS_Error_Reihe1_BFS_2(data) Rte_Write_CIL_SP_IF_eCS_Error_Reihe1_BFS_2_DE_eCS_Error_Reihe1_BFS_2(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Error_Reihe1_FS_1_DE_eCS_Error_Reihe1_FS_1(data) Rte_Write_CIL_SP_IF_eCS_Error_Reihe1_FS_1_DE_eCS_Error_Reihe1_FS_1(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Error_Reihe1_FS_2_DE_eCS_Error_Reihe1_FS_2(data) Rte_Write_CIL_SP_IF_eCS_Error_Reihe1_FS_2_DE_eCS_Error_Reihe1_FS_2(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Error_Reihe2_BFS_DE_eCS_Error_Reihe2_BFS(data) Rte_Write_CIL_SP_IF_eCS_Error_Reihe2_BFS_DE_eCS_Error_Reihe2_BFS(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Error_Reihe2_FS_DE_eCS_Error_Reihe2_FS(data) Rte_Write_CIL_SP_IF_eCS_Error_Reihe2_FS_DE_eCS_Error_Reihe2_FS(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Gurtschloss_Status_Reihe2_BF_XIX_Grundumfang_XIX_eCS_DE_eCS_Gurtschloss_Status_Reihe2_BF(data) Rte_Write_CIL_SP_IF_eCS_Gurtschloss_Status_Reihe2_BF_XIX_Grundumfang_XIX_eCS_DE_eCS_Gurtschloss_Status_Reihe2_BF(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Gurtschloss_Status_Reihe2_FA_XIX_Grundumfang_XIX_eCS_DE_eCS_Gurtschloss_Status_Reihe2_FA(data) Rte_Write_CIL_SP_IF_eCS_Gurtschloss_Status_Reihe2_FA_XIX_Grundumfang_XIX_eCS_DE_eCS_Gurtschloss_Status_Reihe2_FA(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_HW_defekt_XIX_Grundumfang_XIX_eCS_DE_eCS_HW_defekt(data) Rte_Write_CIL_SP_IF_eCS_HW_defekt_XIX_Grundumfang_XIX_eCS_DE_eCS_HW_defekt(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_SBS_Belegung_Reihe2_BF_XIX_Grundumfang_XIX_eCS_DE_eCS_SBS_Belegung_Reihe2_BF(data) Rte_Write_CIL_SP_IF_eCS_SBS_Belegung_Reihe2_BF_XIX_Grundumfang_XIX_eCS_DE_eCS_SBS_Belegung_Reihe2_BF(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_SBS_Belegung_Reihe2_FA_XIX_Grundumfang_XIX_eCS_DE_eCS_SBS_Belegung_Reihe2_FA(data) Rte_Write_CIL_SP_IF_eCS_SBS_Belegung_Reihe2_FA_XIX_Grundumfang_XIX_eCS_DE_eCS_SBS_Belegung_Reihe2_FA(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_SBS_LastState_Reihe2_BFS_DE_eCS_SBS_LastState_Reihe2_BFS(data) Rte_Write_CIL_SP_IF_eCS_SBS_LastState_Reihe2_BFS_DE_eCS_SBS_LastState_Reihe2_BFS(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_SBS_LastState_Reihe2_FS_DE_eCS_SBS_LastState_Reihe2_FS(data) Rte_Write_CIL_SP_IF_eCS_SBS_LastState_Reihe2_FS_DE_eCS_SBS_LastState_Reihe2_FS(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Status_XIX_Grundumfang_XIX_eCS_DE_eCS_Status(data) Rte_Write_CIL_SP_IF_eCS_Status_XIX_Grundumfang_XIX_eCS_DE_eCS_Status(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Status_Verr_Reihe1_BFS_1_DE_eCS_Status_Verr_Reihe1_BFS_1(data) Rte_Write_CIL_SP_IF_eCS_Status_Verr_Reihe1_BFS_1_DE_eCS_Status_Verr_Reihe1_BFS_1(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Status_Verr_Reihe1_BFS_2_DE_eCS_Status_Verr_Reihe1_BFS_2(data) Rte_Write_CIL_SP_IF_eCS_Status_Verr_Reihe1_BFS_2_DE_eCS_Status_Verr_Reihe1_BFS_2(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Status_Verr_Reihe1_FS_1_DE_eCS_Status_Verr_Reihe1_FS_1(data) Rte_Write_CIL_SP_IF_eCS_Status_Verr_Reihe1_FS_1_DE_eCS_Status_Verr_Reihe1_FS_1(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Status_Verr_Reihe1_FS_2_DE_eCS_Status_Verr_Reihe1_FS_2(data) Rte_Write_CIL_SP_IF_eCS_Status_Verr_Reihe1_FS_2_DE_eCS_Status_Verr_Reihe1_FS_2(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Status_Verr_Reihe2_BFS_DE_eCS_Status_Verr_Reihe2_BFS(data) Rte_Write_CIL_SP_IF_eCS_Status_Verr_Reihe2_BFS_DE_eCS_Status_Verr_Reihe2_BFS(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Status_Verr_Reihe2_FS_DE_eCS_Status_Verr_Reihe2_FS(data) Rte_Write_CIL_SP_IF_eCS_Status_Verr_Reihe2_FS_DE_eCS_Status_Verr_Reihe2_FS(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_SP_IF_eCS_Stoerung_XIX_Grundumfang_XIX_eCS_DE_eCS_Stoerung(data) Rte_Write_CIL_SP_IF_eCS_Stoerung_XIX_Grundumfang_XIX_eCS_DE_eCS_Stoerung(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_P_CAN_CanDataOut_Frame_0_EcuCanDataOut(data) Rte_Write_CIL_P_CAN_CanDataOut_Frame_0_EcuCanDataOut(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_P_CAN_GliwaDataOut_Frame_GliwaCanDataOut(data) Rte_Write_CIL_P_CAN_GliwaDataOut_Frame_GliwaCanDataOut(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_P_CAN_MF_Logger_Frame_MfLogger(data) Rte_Write_CIL_P_CAN_MF_Logger_Frame_MfLogger(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrBuckleStatus_au8BuckleStatus(data) Rte_Read_CIL_prrBuckleStatus_au8BuckleStatus(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#161: Verify that the pointer data always points to a au8BuckleStatusType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#191: Verify that the called function does not write more than sizeof(au8BuckleStatusType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrSeatOccupancySensorStatus_au8SeatOccupancySensorStatus(data) Rte_Read_CIL_prrSeatOccupancySensorStatus_au8SeatOccupancySensorStatus(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#162: Verify that the pointer data always points to a au8SeatOccupancySensorType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#192: Verify that the called function does not write more than sizeof(au8SeatOccupancySensorType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrAccelMtrPerSecSqd_stAccelMtrPerSecSqd(data) Rte_Read_CIL_prrAccelMtrPerSecSqd_stAccelMtrPerSecSqd(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#163: Verify that the pointer data always points to a REC_3D_AccelMtrPerSecSqdType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#193: Verify that the called function does not write more than sizeof(REC_3D_AccelMtrPerSecSqdType) bytes to *data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclModeManagement_CheckModeStatus(u64ModesToCheck, bModeStatus) (FSM_runCheckModeStatus(u64ModesToCheck, bModeStatus)/*
Review instructions/justifications for parameter #2 with name 'bModeStatus' and passed argument 'bModeStatus':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#164: Verify that the pointer bModeStatus always points to a uint8 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#194: Verify that the called function does not write more than sizeof(uint8) bytes to *bModeStatus. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpAsrOsServicesCIL_CIL_runAppliToCAN() (Rte_TriggerHook_CIL_ptrpAsrOsServicesCIL_CIL_runAppliToCAN_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_CIL_ptrpAsrOsServicesCIL_CIL_runAppliToCAN_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if (defined(RTE_RUNNABLEAPI_CIL_runAppliToCAN)) || (defined(RTE_RUNNABLEAPI_CIL_runManageMF))
#define Rte_Read_prr3DAcceleration_st3DAccel(data) Rte_Read_CIL_prr3DAcceleration_st3DAccel(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#165: Verify that the pointer data always points to a REC_3D_AccelerationType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#195: Verify that the called function does not write more than sizeof(REC_3D_AccelerationType) bytes to *data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrEcsAlgoData_u16BallPosition(data) (*(data) = Rte_ReceiveBuffer__CIL_prrEcsAlgoData_u16BallPosition_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#166: Verify that the pointer data always points to a u16BallPositionType type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_prrEcsAlgoData_u8EcsFlag(data) (*(data) = Rte_ReceiveBuffer__CIL_prrEcsAlgoData_u8EcsFlag_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#167: Verify that the pointer data always points to a u8EcsTriggerType type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_CIL_runCANToAppli)
#define Rte_Write_psrCILData_au8MergedBuckleStatus(data) Rte_Write_CIL_psrCILData_au8MergedBuckleStatus(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_psrCrashStatus_u8IsCrashActive(data) Rte_Write_CIL_psrCrashStatus_u8IsCrashActive(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_RP_IF_AB_Gurtschloss_BF_XIX_Grundumfang_XIX_eCS_DE_AB_Gurtschloss_BF(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_Gurtschloss_BF_XIX_Grundumfang_XIX_eCS_DE_AB_Gurtschloss_BF_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#168: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_RP_IF_AB_Gurtschloss_FA_XIX_Grundumfang_XIX_eCS_DE_AB_Gurtschloss_FA(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_Gurtschloss_FA_XIX_Grundumfang_XIX_eCS_DE_AB_Gurtschloss_FA_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#169: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_RP_IF_AB_Gurtschloss_Reihe2_BF_XIX_Grundumfang_XIX_eCS_DE_AB_Gurtschloss_Reihe2_BF(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_Gurtschloss_Reihe2_BF_XIX_Grundumfang_XIX_eCS_DE_AB_Gurtschloss_Reihe2_BF_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#170: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_RP_IF_AB_Gurtschloss_Reihe2_FA_XIX_Grundumfang_XIX_eCS_DE_AB_Gurtschloss_Reihe2_FA(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_Gurtschloss_Reihe2_FA_XIX_Grundumfang_XIX_eCS_DE_AB_Gurtschloss_Reihe2_FA_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#171: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_RP_IF_AB_Gurtschloss_Reihe3_BF_XIX_Grundumfang_XIX_eCS_DE_AB_Gurtschloss_Reihe3_BF(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_Gurtschloss_Reihe3_BF_XIX_Grundumfang_XIX_eCS_DE_AB_Gurtschloss_Reihe3_BF_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#172: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_RP_IF_AB_Gurtschloss_Reihe3_FA_XIX_Grundumfang_XIX_eCS_DE_AB_Gurtschloss_Reihe3_FA(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_Gurtschloss_Reihe3_FA_XIX_Grundumfang_XIX_eCS_DE_AB_Gurtschloss_Reihe3_FA_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#173: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_P_CAN_GliwaDataIn_Frame_GliwaCanDataIn(data) Rte_Read_CIL_P_CAN_GliwaDataIn_Frame_GliwaCanDataIn(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#174: Verify that the pointer data always points to a REC_GliwaDataIn_Type type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#196: Verify that the called function does not write more than sizeof(REC_GliwaDataIn_Type) bytes to *data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Trigger_ptrpAsrOsServicesCIL_CIL_runCANToAppli() (Rte_TriggerHook_CIL_ptrpAsrOsServicesCIL_CIL_runCANToAppli_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_CIL_ptrpAsrOsServicesCIL_CIL_runCANToAppli_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_CIL_runCANToSafetyAppli)
#define Rte_Write_psrEcsDiagRequest_au8DiagReq(data) Rte_Write_CIL_psrEcsDiagRequest_au8DiagReq(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_psrEcsDiagRequest_au8DiagReqComplement(data) Rte_Write_CIL_psrEcsDiagRequest_au8DiagReqComplement(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_RP_IF_AB_Crash_Int_XIX_Grundumfang_XIX_eCS_DE_AB_Crash_Int(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_Crash_Int_XIX_Grundumfang_XIX_eCS_DE_AB_Crash_Int_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#175: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_RP_IF_AB_eCS_Aktuatortest_BF_XIX_Grundumfang_XIX_eCS_DE_AB_eCS_Aktuatortest_BF(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_eCS_Aktuatortest_BF_XIX_Grundumfang_XIX_eCS_DE_AB_eCS_Aktuatortest_BF_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#176: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_RP_IF_AB_eCS_Aktuatortest_FA_XIX_Grundumfang_XIX_eCS_DE_AB_eCS_Aktuatortest_FA(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_eCS_Aktuatortest_FA_XIX_Grundumfang_XIX_eCS_DE_AB_eCS_Aktuatortest_FA_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#177: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_RP_IF_AB_eCS_Aktuatortest_Reihe2_BF_XIX_Grundumfang_XIX_eCS_DE_AB_eCS_Aktuatortest_Reihe2_BF(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_eCS_Aktuatortest_Reihe2_BF_XIX_Grundumfang_XIX_eCS_DE_AB_eCS_Aktuatortest_Reihe2_BF_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#178: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_RP_IF_AB_eCS_Aktuatortest_Reihe2_FA_XIX_Grundumfang_XIX_eCS_DE_AB_eCS_Aktuatortest_Reihe2_FA(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_eCS_Aktuatortest_Reihe2_FA_XIX_Grundumfang_XIX_eCS_DE_AB_eCS_Aktuatortest_Reihe2_FA_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#179: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_RP_IF_AB_eCS_Aktuatortest_Reihe3_BF_XIX_Grundumfang_XIX_eCS_DE_AB_eCS_Aktuatortest_Reihe3_BF(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_eCS_Aktuatortest_Reihe3_BF_XIX_Grundumfang_XIX_eCS_DE_AB_eCS_Aktuatortest_Reihe3_BF_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#180: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_RP_IF_AB_eCS_Aktuatortest_Reihe3_FA_XIX_Grundumfang_XIX_eCS_DE_AB_eCS_Aktuatortest_Reihe3_FA(data) (*(data) = Rte_ReceiveBuffer__CIL_RP_IF_AB_eCS_Aktuatortest_Reihe3_FA_XIX_Grundumfang_XIX_eCS_DE_AB_eCS_Aktuatortest_Reihe3_FA_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#181: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpAsrOsServicesCIL_CIL_runCANToSafetyAppli() (Rte_TriggerHook_CIL_ptrpAsrOsServicesCIL_CIL_runCANToSafetyAppli_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_CIL_ptrpAsrOsServicesCIL_CIL_runCANToSafetyAppli_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_CIL_runInit)
#define Rte_Trigger_ptrpCilServicesBswMIf_CIL_runInit() (Rte_TriggerHook_CIL_ptrpCilServicesBswMIf_CIL_runInit_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnStartComEffective()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_CIL_ptrpCilServicesBswMIf_CIL_runInit_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_CIL_runManageMF)
#define Rte_Write_P_CAN_MF_Frame_stMFData(data) Rte_Write_CIL_P_CAN_MF_Frame_stMFData(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrSolenoidPWM_au16Pwm(data) Rte_Read_CIL_prrSolenoidPWM_au16Pwm(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#182: Verify that the pointer data always points to a au16PwmType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#197: Verify that the called function does not write more than sizeof(au16PwmType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_pclSolenoidStep_au8CurrentStep(data) Rte_Read_CIL_pclSolenoidStep_au8CurrentStep(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#183: Verify that the pointer data always points to a au8CurrentStepType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#198: Verify that the called function does not write more than sizeof(au8CurrentStepType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_pclSolenoidProfile_au8SelectedProfile(data) Rte_Read_CIL_pclSolenoidProfile_au8SelectedProfile(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#184: Verify that the pointer data always points to a au8SolenoidProfileType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#199: Verify that the called function does not write more than sizeof(au8SolenoidProfileType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrSolenoidShortToVccStatus_au8SolenoidAutotestStatus(data) Rte_Read_CIL_prrSolenoidShortToVccStatus_au8SolenoidAutotestStatus(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#185: Verify that the pointer data always points to a au8SolenoidShortToVccStatusType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#200: Verify that the called function does not write more than sizeof(au8SolenoidShortToVccStatusType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrSolenoidShortToGndStatus_au8SolenoidAutotestStatus(data) Rte_Read_CIL_prrSolenoidShortToGndStatus_au8SolenoidAutotestStatus(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#186: Verify that the pointer data always points to a au8SolenoidShortToGndStatusType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#201: Verify that the called function does not write more than sizeof(au8SolenoidShortToGndStatusType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrSolenoidOCStatus_au8SolenoidAutotestStatus(data) Rte_Read_CIL_prrSolenoidOCStatus_au8SolenoidAutotestStatus(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#187: Verify that the pointer data always points to a au8SolenoidOCStatusType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#202: Verify that the called function does not write more than sizeof(au8SolenoidOCStatusType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrSolenoidStuckStatus_au8SolenoidIsStuck(data) Rte_Read_CIL_prrSolenoidStuckStatus_au8SolenoidIsStuck(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#188: Verify that the pointer data always points to a au8SolenoidBackupsType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#203: Verify that the called function does not write more than sizeof(au8SolenoidBackupsType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrSolenoidOvervoltageStatus_au8SolenoidOvervoltageStatus(data) Rte_Read_CIL_prrSolenoidOvervoltageStatus_au8SolenoidOvervoltageStatus(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#189: Verify that the pointer data always points to a au8SolenoidOvervoltageStatusType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#204: Verify that the called function does not write more than sizeof(au8SolenoidOvervoltageStatusType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrSolenoidState_au8SolenoidState(data) Rte_Read_CIL_prrSolenoidState_au8SolenoidState(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#190: Verify that the pointer data always points to a au8FsmStateType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#205: Verify that the called function does not write more than sizeof(au8FsmStateType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrAccStatusFailiureSource_u32AccAlarmRegStatus(data) (*(data) = Rte_ReceiveBuffer__CIL_prrAccStatusFailiureSource_u32AccAlarmRegStatus_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#191: Verify that the pointer data always points to a uint32 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_prrAccStatusFailiureSource_u8AccReturnStatus(data) (*(data) = Rte_ReceiveBuffer__CIL_prrAccStatusFailiureSource_u8AccReturnStatus_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#192: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_prrAccStatusFailiureSource_u8AccCRCStatus(data) (*(data) = Rte_ReceiveBuffer__CIL_prrAccStatusFailiureSource_u8AccCRCStatus_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#193: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_prrSbcStatusFailiureSource_u32SbcReg1Status(data) (*(data) = Rte_ReceiveBuffer__CIL_prrSbcStatusFailiureSource_u32SbcReg1Status_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#194: Verify that the pointer data always points to a uint32 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_prrAccStatusFailiureSource_u8AccAlarmbPreinitSeqStatus(data) (*(data) = Rte_ReceiveBuffer__CIL_prrAccStatusFailiureSource_u8AccAlarmbPreinitSeqStatus_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#195: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_prrAccStatusFailiureSource_u8AccelAxisBroken(data) (*(data) = Rte_ReceiveBuffer__CIL_prrAccStatusFailiureSource_u8AccelAxisBroken_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#196: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclMcuCharacteristics_GetTemperature(s16McuTemperature) (IoHwAb_GetMcuTemperature(s16McuTemperature)/*
Review instructions/justifications for parameter #1 with name 's16McuTemperature' and passed argument 's16McuTemperature':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#197: Verify that the pointer s16McuTemperature always points to a sint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#206: Verify that the called function does not write more than sizeof(sint16) bytes to *s16McuTemperature. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclPtcSensor_GetTemperature(s16PtcSensorTemperature) (IoHwAb_GetPtcTemperature(s16PtcSensorTemperature)/*
Review instructions/justifications for parameter #1 with name 's16PtcSensorTemperature' and passed argument 's16PtcSensorTemperature':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#198: Verify that the pointer s16PtcSensorTemperature always points to a sint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#207: Verify that the called function does not write more than sizeof(sint16) bytes to *s16PtcSensorTemperature. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclAccSensor_GetTemperature(s16AccTemperature) (IoHwAb_GetAccelerometerTemperature(s16AccTemperature)/*
Review instructions/justifications for parameter #1 with name 's16AccTemperature' and passed argument 's16AccTemperature':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#199: Verify that the pointer s16AccTemperature always points to a sint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#208: Verify that the called function does not write more than sizeof(sint16) bytes to *s16AccTemperature. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclEcuCharacterstics_GetTemperature(s16EcuTemperature) (IoHwAb_GetEcuTemperature(s16EcuTemperature)/*
Review instructions/justifications for parameter #1 with name 's16EcuTemperature' and passed argument 's16EcuTemperature':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#200: Verify that the pointer s16EcuTemperature always points to a sint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#209: Verify that the called function does not write more than sizeof(sint16) bytes to *s16EcuTemperature. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclSolenoidCharacteristics_GetTemperature(u8TypeOfMeasure, s16SolenoidTemperature) (IoHwAb_GetSolenoidTemperature(u8TypeOfMeasure, s16SolenoidTemperature)/*
Review instructions/justifications for parameter #2 with name 's16SolenoidTemperature' and passed argument 's16SolenoidTemperature':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#201: Verify that the pointer s16SolenoidTemperature always points to a sint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#210: Verify that the called function does not write more than sizeof(sint16) bytes to *s16SolenoidTemperature. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclConvAdcService_getMeasure(u8TypeOfMeasure, u16Measure) (IoHwAb_runGetMeasure(u8TypeOfMeasure, u16Measure)/*
Review instructions/justifications for parameter #2 with name 'u16Measure' and passed argument 'u16Measure':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#202: Verify that the pointer u16Measure always points to a uint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#211: Verify that the called function does not write more than sizeof(uint16) bytes to *u16Measure. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpAsrOsServicesCIL_CIL_runManageMF() (Rte_TriggerHook_CIL_ptrpAsrOsServicesCIL_CIL_runManageMF_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_CIL_ptrpAsrOsServicesCIL_CIL_runManageMF_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#ifndef RTE_CORE /* if included by software component */
#define Rte_InitValue_psrCrashStatus_u8IsCrashActive 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_prrAccStatusFailiureSource_u32AccAlarmRegStatus 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_prrAccStatusFailiureSource_u8AccAlarmbPreinitSeqStatus 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_prrAccStatusFailiureSource_u8AccCRCStatus 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_prrAccStatusFailiureSource_u8AccReturnStatus 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_prrAccStatusFailiureSource_u8AccelAxisBroken 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_prrEcsAlgoData_u16BallPosition 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_prrEcsAlgoData_u8EcsFlag 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_prrSbcStatusFailiureSource_u32SbcReg1Status 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_CIL, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_CIL, RTE_CONST) Rte_Instance_CIL;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_CIL, RTE_CONST, RTE_CONST) Rte_Inst_CIL;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define CIL_START_SEC_CODE
#include <CIL_MemMap.h>
extern FUNC(void, RTE_CODE) CIL_runAppliToCAN (void);

extern FUNC(void, RTE_CODE) CIL_runCANToAppli (void);

#define CIL_STOP_SEC_CODE
#include <CIL_MemMap.h>
#define CIL_START_SEC_CODE_ASIL_A
#include <CIL_MemMap.h>
extern FUNC(void, RTE_CODE) CIL_runCANToSafetyAppli (void);

#define CIL_STOP_SEC_CODE_ASIL_A
#include <CIL_MemMap.h>
#define CIL_START_SEC_CODE
#include <CIL_MemMap.h>
extern FUNC(void, RTE_CODE) CIL_runInit (void);

extern FUNC(void, RTE_CODE) CIL_runManageMF (void);

extern FUNC(void, RTE_CODE) CIL_updateCurrentEcuState (uint8 u8CurrentEcuState);

#define CIL_STOP_SEC_CODE
#include <CIL_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_CIL_runAppliToCAN))
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Error_Reihe1_BFS_1_DE_eCS_Error_Reihe1_BFS_1 (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Error_Reihe1_BFS_2_DE_eCS_Error_Reihe1_BFS_2 (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Error_Reihe1_FS_1_DE_eCS_Error_Reihe1_FS_1 (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Error_Reihe1_FS_2_DE_eCS_Error_Reihe1_FS_2 (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Error_Reihe2_BFS_DE_eCS_Error_Reihe2_BFS (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Error_Reihe2_FS_DE_eCS_Error_Reihe2_FS (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Gurtschloss_Status_Reihe2_BF_XIX_Grundumfang_XIX_eCS_DE_eCS_Gurtschloss_Status_Reihe2_BF (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Gurtschloss_Status_Reihe2_FA_XIX_Grundumfang_XIX_eCS_DE_eCS_Gurtschloss_Status_Reihe2_FA (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_HW_defekt_XIX_Grundumfang_XIX_eCS_DE_eCS_HW_defekt (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_SBS_Belegung_Reihe2_BF_XIX_Grundumfang_XIX_eCS_DE_eCS_SBS_Belegung_Reihe2_BF (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_SBS_Belegung_Reihe2_FA_XIX_Grundumfang_XIX_eCS_DE_eCS_SBS_Belegung_Reihe2_FA (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_SBS_LastState_Reihe2_BFS_DE_eCS_SBS_LastState_Reihe2_BFS (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_SBS_LastState_Reihe2_FS_DE_eCS_SBS_LastState_Reihe2_FS (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Status_XIX_Grundumfang_XIX_eCS_DE_eCS_Status (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Status_Verr_Reihe1_BFS_1_DE_eCS_Status_Verr_Reihe1_BFS_1 (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Status_Verr_Reihe1_BFS_2_DE_eCS_Status_Verr_Reihe1_BFS_2 (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Status_Verr_Reihe1_FS_1_DE_eCS_Status_Verr_Reihe1_FS_1 (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Status_Verr_Reihe1_FS_2_DE_eCS_Status_Verr_Reihe1_FS_2 (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Status_Verr_Reihe2_BFS_DE_eCS_Status_Verr_Reihe2_BFS (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Status_Verr_Reihe2_FS_DE_eCS_Status_Verr_Reihe2_FS (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_SP_IF_eCS_Stoerung_XIX_Grundumfang_XIX_eCS_DE_eCS_Stoerung (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_P_CAN_CanDataOut_Frame_0_EcuCanDataOut (P2CONST(REC_CanDataOut64_Type, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_P_CAN_GliwaDataOut_Frame_GliwaCanDataOut (P2CONST(REC_CanDataOut64_Type, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_P_CAN_MF_Logger_Frame_MfLogger (uint8 data);
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrBuckleStatus_au8BuckleStatus (P2VAR(au8BuckleStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrBuckleStatus_au8BuckleStatus (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSeatOccupancySensorStatus_au8SeatOccupancySensorStatus (P2VAR(au8SeatOccupancySensorType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSeatOccupancySensorStatus_au8SeatOccupancySensorStatus (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrAccelMtrPerSecSqd_stAccelMtrPerSecSqd (P2VAR(REC_3D_AccelMtrPerSecSqdType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_CIL_runAppliToCAN)) || (defined(RTE_RUNNABLEAPI_CIL_runManageMF))
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prr3DAcceleration_st3DAccel (P2VAR(REC_3D_AccelerationType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_CIL_runCANToAppli))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_psrCILData_au8MergedBuckleStatus (P2CONST(au8MergedBuckleStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_psrCILData_au8MergedBuckleStatus (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_psrCrashStatus_u8IsCrashActive (uint8 data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_P_CAN_GliwaDataIn_Frame_GliwaCanDataIn (P2VAR(REC_GliwaDataIn_Type, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_CIL_runCANToSafetyAppli))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_psrEcsDiagRequest_au8DiagReq (P2CONST(au8eCSDiagReqType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_psrEcsDiagRequest_au8DiagReq (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_psrEcsDiagRequest_au8DiagReqComplement (P2CONST(au8eCSDiagReqType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_psrEcsDiagRequest_au8DiagReqComplement (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_CIL_runManageMF))
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_CIL_P_CAN_MF_Frame_stMFData (P2CONST(REC_CanDataOut64_Type, AUTOMATIC, RTE_APPL_DATA) data);
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidPWM_au16Pwm (P2VAR(au16PwmType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidPWM_au16Pwm (P2VAR(unsigned short, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_pclSolenoidStep_au8CurrentStep (P2VAR(au8CurrentStepType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_pclSolenoidStep_au8CurrentStep (P2VAR(u8CurrentStepType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_pclSolenoidProfile_au8SelectedProfile (P2VAR(au8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_pclSolenoidProfile_au8SelectedProfile (P2VAR(u8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidShortToVccStatus_au8SolenoidAutotestStatus (P2VAR(au8SolenoidShortToVccStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidShortToVccStatus_au8SolenoidAutotestStatus (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidShortToGndStatus_au8SolenoidAutotestStatus (P2VAR(au8SolenoidShortToGndStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidShortToGndStatus_au8SolenoidAutotestStatus (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidOCStatus_au8SolenoidAutotestStatus (P2VAR(au8SolenoidOCStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidOCStatus_au8SolenoidAutotestStatus (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidStuckStatus_au8SolenoidIsStuck (P2VAR(au8SolenoidBackupsType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidStuckStatus_au8SolenoidIsStuck (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidOvervoltageStatus_au8SolenoidOvervoltageStatus (P2VAR(au8SolenoidOvervoltageStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidOvervoltageStatus_au8SolenoidOvervoltageStatus (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidState_au8SolenoidState (P2VAR(au8FsmStateType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_CIL_prrSolenoidState_au8SolenoidState (P2VAR(u8FsmStateType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) FSM_runCheckModeStatus (uint64 u64ModesToCheck, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) bModeStatus);
extern FUNC(void, RTE_CODE) BswM_OnStartComEffective (void);
extern FUNC(void, RTE_CODE) IoHwAb_GetMcuTemperature (P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16McuTemperature);
extern FUNC(void, RTE_CODE) IoHwAb_GetPtcTemperature (P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16PtcSensorTemperature);
extern FUNC(void, RTE_CODE) IoHwAb_GetAccelerometerTemperature (P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16AccTemperature);
extern FUNC(void, RTE_CODE) IoHwAb_GetEcuTemperature (P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16EcuTemperature);
extern FUNC(void, RTE_CODE) IoHwAb_GetSolenoidTemperature (uint8 u8TypeOfMeasure, P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16SolenoidTemperature);
extern FUNC(void, RTE_CODE) IoHwAb_runGetMeasure (u8AdcChannelIDType u8TypeOfMeasure, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) u16Measure);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
