#ifndef RTE_DIA_H
#define RTE_DIA_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type DIA
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_DIA_Type.h>
#include <Rte_DIA_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_DIA_Init)) && (!defined(RTE_RUNNABLEAPI_DIA_runCallBackDCMRequestServices_CBReqServInd_1_StartProtocol)) && (!defined(RTE_RUNNABLEAPI_DIA_runCallBackDCMRequestServices_CBReqServInd_1_StopProtocol)) && (!defined(RTE_RUNNABLEAPI_DIA_runDid0407_VWLogicalSoftwareBlockCounterOfProgrammingAttemptsRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDid040F_VWLogicalSoftwareBlockLockValueRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDid0410_BootloaderTPBlocksizeRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDid0410_BootloaderTPBlocksizeWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDid0448_ProgrammingPreconditionsRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDid4024_SWSystemTimeRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocksRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF187_VWSparePartNumberRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF187_VWSparePartNumberWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF189_VWApplicationSoftwareVersionNumberRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF189_VWApplicationSoftwareVersionNumberWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF18C_ECUSerialNumberRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF18C_ECUSerialNumberWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF191_VWECUHardwareNumberWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF191_VWLogicalSoftwareBlockLockValueRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF197_VWSystemNameOrEngineTypeRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF197_VWSystemNameOrEngineTypeWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF19E_ASAMODXFileIdentifierRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF19E_ASAMODXFileIdentifierWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF1A2_ASAMODXFileVersionRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF1A2_ASAMODXFileVersionWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF1A3_VWECUHardwareVersionNumberRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF1A3_VWECUHardwareVersionNumberWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF1AB_VWLogicalSoftwareBlockVersionRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF1B4_TechnicalSpecificationsVersionRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF1D5_FDSProjectDataRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidF1DF_ECUProgrammingInformationRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFD00_HWVersionRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFD00_HWVersionWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFD01_SWVersionRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFD03_AEETraceabilityNumberRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFD03_AEETraceabilityNumberWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFD08_ResetCauseRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFD09_LastWarmResetParamRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFD62_EccOccurenceNbRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFD8B_ECUManufacturingDateRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFD8B_ECUManufacturingDateWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFD8C_AssemblySerialNumberRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFD8C_AssemblySerialNumberWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE0_EcsVariantRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE0_EcsVariantWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE1_EcsParametersRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE1_EcsParametersWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE2_EcsAccOffsetsRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE2_EcsAccOffsetsWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE3_EcsProfilesRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE3_EcsProfilesWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE4_EcsStepsRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE4_EcsStepsWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE5_EcsAccLowPassRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE5_EcsAccLowPassWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE7_EcsAlgoOutputDelayRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE7_EcsAlgoOutputDelayWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE9_EcsSensitivityLutRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDE9_EcsSensitivityLutWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDEA_EcsSensitivityOptRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDEA_EcsSensitivityOptWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDFF_MeasurementFrameRamConfRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFDFF_MeasurementFrameRamConfWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFE00_AllEventStatusesRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFEFF_MeasurementFramesConfRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runDidFEFF_MeasurementFramesConfWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_runDid_FD0F_BatteryMeasureRead)) && (!defined(RTE_RUNNABLEAPI_DIA_runRid0203_CheckProgrammingPreconditions)) && (!defined(RTE_RUNNABLEAPI_DIA_runRidF781_EcuUnlockRequestRes)) && (!defined(RTE_RUNNABLEAPI_DIA_runRidF781_EcuUnlockStart)) && (!defined(RTE_RUNNABLEAPI_DIA_runRidF781_EcuUnlockStop)) && (!defined(RTE_RUNNABLEAPI_DIA_runRidF793_ProcessModeRequestRes)) && (!defined(RTE_RUNNABLEAPI_DIA_runRidF793_ProcessModeStart)) && (!defined(RTE_RUNNABLEAPI_DIA_runRidF793_ProcessModeStop)) && (!defined(RTE_RUNNABLEAPI_DIA_runRidF794_AccCalibStart)) && (!defined(RTE_RUNNABLEAPI_DIA_runRidF795_LockSolenoidStart)) && (!defined(RTE_RUNNABLEAPI_DIA_runRidF795_LockSolenoidStop)) && (!defined(RTE_RUNNABLEAPI_DIA_runRidF796_EcuTempCalibration)) && (!defined(RTE_RUNNABLEAPI_DIA_runRidF797_AccAngleOffsetCalibrationStart)) && (!defined(RTE_RUNNABLEAPI_DIA_runSecurityAccessCompareKey)) && (!defined(RTE_RUNNABLEAPI_DIA_runSecurityAccessGetSeed)) && (!defined(RTE_RUNNABLEAPI_DIA_runServiceRequestConfirmation)) && (!defined(RTE_RUNNABLEAPI_DIA_runServiceRequestIndication)) && (!defined(RTE_RUNNABLEAPI_DIA_runSessionChangeIndication)) && (!defined(RTE_RUNNABLEAPI_DIA_run_Did0236_ProgrammingDataElockEcuRead)) && (!defined(RTE_RUNNABLEAPI_DIA_run_Did0236_ProgrammingDataElockEcuWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_run_Did023E_WSCForProgrammingElockEcuRead)) && (!defined(RTE_RUNNABLEAPI_DIA_run_Did023E_WSCForProgrammingElockEcuWrite)) && (!defined(RTE_RUNNABLEAPI_DIA_run_DidFD10_ECUTemperatureRead))
#define RTE_RUNNABLEAPI_DIA_Init
#define RTE_RUNNABLEAPI_DIA_runCallBackDCMRequestServices_CBReqServInd_1_StartProtocol
#define RTE_RUNNABLEAPI_DIA_runCallBackDCMRequestServices_CBReqServInd_1_StopProtocol
#define RTE_RUNNABLEAPI_DIA_runDid0407_VWLogicalSoftwareBlockCounterOfProgrammingAttemptsRead
#define RTE_RUNNABLEAPI_DIA_runDid040F_VWLogicalSoftwareBlockLockValueRead
#define RTE_RUNNABLEAPI_DIA_runDid0410_BootloaderTPBlocksizeRead
#define RTE_RUNNABLEAPI_DIA_runDid0410_BootloaderTPBlocksizeWrite
#define RTE_RUNNABLEAPI_DIA_runDid0448_ProgrammingPreconditionsRead
#define RTE_RUNNABLEAPI_DIA_runDid4024_SWSystemTimeRead
#define RTE_RUNNABLEAPI_DIA_runDidF15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocksRead
#define RTE_RUNNABLEAPI_DIA_runDidF187_VWSparePartNumberRead
#define RTE_RUNNABLEAPI_DIA_runDidF187_VWSparePartNumberWrite
#define RTE_RUNNABLEAPI_DIA_runDidF189_VWApplicationSoftwareVersionNumberRead
#define RTE_RUNNABLEAPI_DIA_runDidF189_VWApplicationSoftwareVersionNumberWrite
#define RTE_RUNNABLEAPI_DIA_runDidF18C_ECUSerialNumberRead
#define RTE_RUNNABLEAPI_DIA_runDidF18C_ECUSerialNumberWrite
#define RTE_RUNNABLEAPI_DIA_runDidF191_VWECUHardwareNumberWrite
#define RTE_RUNNABLEAPI_DIA_runDidF191_VWLogicalSoftwareBlockLockValueRead
#define RTE_RUNNABLEAPI_DIA_runDidF197_VWSystemNameOrEngineTypeRead
#define RTE_RUNNABLEAPI_DIA_runDidF197_VWSystemNameOrEngineTypeWrite
#define RTE_RUNNABLEAPI_DIA_runDidF19E_ASAMODXFileIdentifierRead
#define RTE_RUNNABLEAPI_DIA_runDidF19E_ASAMODXFileIdentifierWrite
#define RTE_RUNNABLEAPI_DIA_runDidF1A2_ASAMODXFileVersionRead
#define RTE_RUNNABLEAPI_DIA_runDidF1A2_ASAMODXFileVersionWrite
#define RTE_RUNNABLEAPI_DIA_runDidF1A3_VWECUHardwareVersionNumberRead
#define RTE_RUNNABLEAPI_DIA_runDidF1A3_VWECUHardwareVersionNumberWrite
#define RTE_RUNNABLEAPI_DIA_runDidF1AB_VWLogicalSoftwareBlockVersionRead
#define RTE_RUNNABLEAPI_DIA_runDidF1B4_TechnicalSpecificationsVersionRead
#define RTE_RUNNABLEAPI_DIA_runDidF1D5_FDSProjectDataRead
#define RTE_RUNNABLEAPI_DIA_runDidF1DF_ECUProgrammingInformationRead
#define RTE_RUNNABLEAPI_DIA_runDidFD00_HWVersionRead
#define RTE_RUNNABLEAPI_DIA_runDidFD00_HWVersionWrite
#define RTE_RUNNABLEAPI_DIA_runDidFD01_SWVersionRead
#define RTE_RUNNABLEAPI_DIA_runDidFD03_AEETraceabilityNumberRead
#define RTE_RUNNABLEAPI_DIA_runDidFD03_AEETraceabilityNumberWrite
#define RTE_RUNNABLEAPI_DIA_runDidFD08_ResetCauseRead
#define RTE_RUNNABLEAPI_DIA_runDidFD09_LastWarmResetParamRead
#define RTE_RUNNABLEAPI_DIA_runDidFD62_EccOccurenceNbRead
#define RTE_RUNNABLEAPI_DIA_runDidFD8B_ECUManufacturingDateRead
#define RTE_RUNNABLEAPI_DIA_runDidFD8B_ECUManufacturingDateWrite
#define RTE_RUNNABLEAPI_DIA_runDidFD8C_AssemblySerialNumberRead
#define RTE_RUNNABLEAPI_DIA_runDidFD8C_AssemblySerialNumberWrite
#define RTE_RUNNABLEAPI_DIA_runDidFDE0_EcsVariantRead
#define RTE_RUNNABLEAPI_DIA_runDidFDE0_EcsVariantWrite
#define RTE_RUNNABLEAPI_DIA_runDidFDE1_EcsParametersRead
#define RTE_RUNNABLEAPI_DIA_runDidFDE1_EcsParametersWrite
#define RTE_RUNNABLEAPI_DIA_runDidFDE2_EcsAccOffsetsRead
#define RTE_RUNNABLEAPI_DIA_runDidFDE2_EcsAccOffsetsWrite
#define RTE_RUNNABLEAPI_DIA_runDidFDE3_EcsProfilesRead
#define RTE_RUNNABLEAPI_DIA_runDidFDE3_EcsProfilesWrite
#define RTE_RUNNABLEAPI_DIA_runDidFDE4_EcsStepsRead
#define RTE_RUNNABLEAPI_DIA_runDidFDE4_EcsStepsWrite
#define RTE_RUNNABLEAPI_DIA_runDidFDE5_EcsAccLowPassRead
#define RTE_RUNNABLEAPI_DIA_runDidFDE5_EcsAccLowPassWrite
#define RTE_RUNNABLEAPI_DIA_runDidFDE7_EcsAlgoOutputDelayRead
#define RTE_RUNNABLEAPI_DIA_runDidFDE7_EcsAlgoOutputDelayWrite
#define RTE_RUNNABLEAPI_DIA_runDidFDE9_EcsSensitivityLutRead
#define RTE_RUNNABLEAPI_DIA_runDidFDE9_EcsSensitivityLutWrite
#define RTE_RUNNABLEAPI_DIA_runDidFDEA_EcsSensitivityOptRead
#define RTE_RUNNABLEAPI_DIA_runDidFDEA_EcsSensitivityOptWrite
#define RTE_RUNNABLEAPI_DIA_runDidFDFF_MeasurementFrameRamConfRead
#define RTE_RUNNABLEAPI_DIA_runDidFDFF_MeasurementFrameRamConfWrite
#define RTE_RUNNABLEAPI_DIA_runDidFE00_AllEventStatusesRead
#define RTE_RUNNABLEAPI_DIA_runDidFEFF_MeasurementFramesConfRead
#define RTE_RUNNABLEAPI_DIA_runDidFEFF_MeasurementFramesConfWrite
#define RTE_RUNNABLEAPI_DIA_runDid_FD0F_BatteryMeasureRead
#define RTE_RUNNABLEAPI_DIA_runRid0203_CheckProgrammingPreconditions
#define RTE_RUNNABLEAPI_DIA_runRidF781_EcuUnlockRequestRes
#define RTE_RUNNABLEAPI_DIA_runRidF781_EcuUnlockStart
#define RTE_RUNNABLEAPI_DIA_runRidF781_EcuUnlockStop
#define RTE_RUNNABLEAPI_DIA_runRidF793_ProcessModeRequestRes
#define RTE_RUNNABLEAPI_DIA_runRidF793_ProcessModeStart
#define RTE_RUNNABLEAPI_DIA_runRidF793_ProcessModeStop
#define RTE_RUNNABLEAPI_DIA_runRidF794_AccCalibStart
#define RTE_RUNNABLEAPI_DIA_runRidF795_LockSolenoidStart
#define RTE_RUNNABLEAPI_DIA_runRidF795_LockSolenoidStop
#define RTE_RUNNABLEAPI_DIA_runRidF796_EcuTempCalibration
#define RTE_RUNNABLEAPI_DIA_runRidF797_AccAngleOffsetCalibrationStart
#define RTE_RUNNABLEAPI_DIA_runSecurityAccessCompareKey
#define RTE_RUNNABLEAPI_DIA_runSecurityAccessGetSeed
#define RTE_RUNNABLEAPI_DIA_runServiceRequestConfirmation
#define RTE_RUNNABLEAPI_DIA_runServiceRequestIndication
#define RTE_RUNNABLEAPI_DIA_runSessionChangeIndication
#define RTE_RUNNABLEAPI_DIA_run_Did0236_ProgrammingDataElockEcuRead
#define RTE_RUNNABLEAPI_DIA_run_Did0236_ProgrammingDataElockEcuWrite
#define RTE_RUNNABLEAPI_DIA_run_Did023E_WSCForProgrammingElockEcuRead
#define RTE_RUNNABLEAPI_DIA_run_Did023E_WSCForProgrammingElockEcuWrite
#define RTE_RUNNABLEAPI_DIA_run_DidFD10_ECUTemperatureRead
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_DIA_Init)
#define Rte_Call_pclNvmIfServices_GetNvmBlockStatus(u16BlockId, pu8BlockStatus) (NvmIf_GetNvmBlockStatus(u16BlockId, pu8BlockStatus)/*
Review instructions/justifications for parameter #2 with name 'pu8BlockStatus' and passed argument 'pu8BlockStatus':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#203: Verify that the pointer pu8BlockStatus always points to a NvM_ASR42_RequestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#257: Verify that the called function does not write more than sizeof(NvM_ASR42_RequestResultType) bytes to *pu8BlockStatus. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclNvmIfServices_WriteNvmBlock(u16BlockId, pvNvM_SrcPtr) (NvmIf_WriteNvmBlock(u16BlockId, pvNvM_SrcPtr)/*
Review instructions/justifications for parameter #2 with name 'pvNvM_SrcPtr' and passed argument 'pvNvM_SrcPtr':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#204: Verify that the pointer pvNvM_SrcPtr always points to a NvM_SrcPtrType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#258: Verify that the called function does not write more than sizeof(NvM_SrcPtrType) bytes to *pvNvM_SrcPtr. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpDiaServicesBswMIf_DIA_Init() (Rte_TriggerHook_DIA_ptrpDiaServicesBswMIf_DIA_Init_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnStartComEffective()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_DIA_ptrpDiaServicesBswMIf_DIA_Init_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if (defined(RTE_RUNNABLEAPI_DIA_runDid4024_SWSystemTimeRead)) || (defined(RTE_RUNNABLEAPI_DIA_runSecurityAccessGetSeed))
#define Rte_Call_pclSystemTime_ReadAbsoluteSystemTime(pstAbsoluteSystemTime) (STM_runReadAbsoluteSystemTime(pstAbsoluteSystemTime)/*
Review instructions/justifications for parameter #1 with name 'pstAbsoluteSystemTime' and passed argument 'pstAbsoluteSystemTime':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#205: Verify that the pointer pstAbsoluteSystemTime always points to a stAbsoluteSystemTimeType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#259: Verify that the called function does not write more than sizeof(stAbsoluteSystemTimeType) bytes to *pstAbsoluteSystemTime. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_DIA_runDidFD08_ResetCauseRead)
#define Rte_Call_pclResetCause_GetResetCause(pu32ResetCause) (RCM_GetResetCause(pu32ResetCause)/*
Review instructions/justifications for parameter #1 with name 'pu32ResetCause' and passed argument 'pu32ResetCause':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#206: Verify that the pointer pu32ResetCause always points to a u32ResetCauseType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#260: Verify that the called function does not write more than sizeof(u32ResetCauseType) bytes to *pu32ResetCause. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_DIA_runDidFDE3_EcsProfilesWrite)
#define Rte_Call_pclFsmServices_calculateProfileTimeout(pu8Response) (FSM_runCalculateProfileTimeout(pu8Response)/*
Review instructions/justifications for parameter #1 with name 'pu8Response' and passed argument 'pu8Response':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#207: Verify that the pointer pu8Response always points to a uint8 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#261: Verify that the called function does not write more than sizeof(uint8) bytes to *pu8Response. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_DIA_runDidFE00_AllEventStatusesRead)
#define Rte_Call_pclDemServices_GetEventStatus Dem_GetEventStatus/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif
#if (defined(RTE_RUNNABLEAPI_DIA_runDid_FD0F_BatteryMeasureRead)) || (defined(RTE_RUNNABLEAPI_DIA_run_DidFD10_ECUTemperatureRead))
#define Rte_Call_pclConvAdcService_getMeasure(u8TypeOfMeasure, u16Measure) (IoHwAb_runGetMeasure(u8TypeOfMeasure, u16Measure)/*
Review instructions/justifications for parameter #2 with name 'u16Measure' and passed argument 'u16Measure':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#208: Verify that the pointer u16Measure always points to a uint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#262: Verify that the called function does not write more than sizeof(uint16) bytes to *u16Measure. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_DIA_runRidF793_ProcessModeRequestRes)
#define Rte_Call_pclNvmIfServices_GetNvmBlockLength(u16BlockId, pu16BlockLength) (NvmIf_GetNvmBlockLength(u16BlockId, pu16BlockLength)/*
Review instructions/justifications for parameter #2 with name 'pu16BlockLength' and passed argument 'pu16BlockLength':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#209: Verify that the pointer pu16BlockLength always points to a u16NvmBlockLengthType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#263: Verify that the called function does not write more than sizeof(u16NvmBlockLengthType) bytes to *pu16BlockLength. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_DIA_runRidF794_AccCalibStart)
#define Rte_Read_prr3DAcceleration_st3DAccel(data) Rte_Read_DIA_prr3DAcceleration_st3DAccel(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#210: Verify that the pointer data always points to a REC_3D_AccelerationType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#264: Verify that the called function does not write more than sizeof(REC_3D_AccelerationType) bytes to *data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif
#if (defined(RTE_RUNNABLEAPI_DIA_runRidF795_LockSolenoidStart)) || (defined(RTE_RUNNABLEAPI_DIA_runRidF795_LockSolenoidStop))
#define Rte_Write_pseEcsDiagRequest_au8DiagReq(data) Rte_Write_DIA_pseEcsDiagRequest_au8DiagReq(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif
#if defined(RTE_RUNNABLEAPI_DIA_runRidF795_LockSolenoidStart)
#define Rte_Write_pseEcsDiagRequest_au8DiagReqComplement(data) Rte_Write_DIA_pseEcsDiagRequest_au8DiagReqComplement(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif
#if defined(RTE_RUNNABLEAPI_DIA_runRidF796_EcuTempCalibration)
#define Rte_Call_pclAccSensor_GetTemperature(s16AccTemperature) (IoHwAb_GetAccelerometerTemperature(s16AccTemperature)/*
Review instructions/justifications for parameter #1 with name 's16AccTemperature' and passed argument 's16AccTemperature':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#211: Verify that the pointer s16AccTemperature always points to a sint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#265: Verify that the called function does not write more than sizeof(sint16) bytes to *s16AccTemperature. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclMcuCharacteristics_GetTemperature(s16McuTemperature) (IoHwAb_GetMcuTemperature(s16McuTemperature)/*
Review instructions/justifications for parameter #1 with name 's16McuTemperature' and passed argument 's16McuTemperature':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#212: Verify that the pointer s16McuTemperature always points to a sint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#266: Verify that the called function does not write more than sizeof(sint16) bytes to *s16McuTemperature. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclPtcSensor_GetTemperature(s16PtcSensorTemperature) (IoHwAb_GetPtcTemperature(s16PtcSensorTemperature)/*
Review instructions/justifications for parameter #1 with name 's16PtcSensorTemperature' and passed argument 's16PtcSensorTemperature':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#213: Verify that the pointer s16PtcSensorTemperature always points to a sint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#267: Verify that the called function does not write more than sizeof(sint16) bytes to *s16PtcSensorTemperature. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclNvmIfServices_SetRamBlockStatus(u16BlockId, u8BlockChanged) (NvmIf_SetRamBlockStatus(u16BlockId, u8BlockChanged)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_DIA_run_DidFD10_ECUTemperatureRead)
#define Rte_Call_pclEcuCharacterstics_GetTemperature(s16EcuTemperature) (IoHwAb_GetEcuTemperature(s16EcuTemperature)/*
Review instructions/justifications for parameter #1 with name 's16EcuTemperature' and passed argument 's16EcuTemperature':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#214: Verify that the pointer s16EcuTemperature always points to a sint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#268: Verify that the called function does not write more than sizeof(sint16) bytes to *s16EcuTemperature. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#define RTE_E_CallbackDCMRequestServices_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_CallbackDCMRequestServices_E_PROTOCOL_NOT_ALLOWED 5U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_0236_ProgrammingDataElockEcuData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_0236_ProgrammingDataElockEcuData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_023E_WSCForProgrammingElockEcuData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_023E_WSCForProgrammingElockEcuData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_0407_VWLogicalSoftwareBlockCounterOfProgrammingAttemptsData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_0407_VWLogicalSoftwareBlockCounterOfProgrammingAttemptsData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_040F_VWLogicalSoftwareBlockLockValueData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_040F_VWLogicalSoftwareBlockLockValueData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_0410_BootloaderTPBlocksizeData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_0410_BootloaderTPBlocksizeData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_0448_ProgrammingPreconditionsData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_0448_ProgrammingPreconditionsData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_4024_SWSystemTimeData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocksData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocksData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F187_VWSparePartNumberData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F187_VWSparePartNumberData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F189_VWApplicationSoftwareVersionNumberData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F189_VWApplicationSoftwareVersionNumberData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F18C_ECUSerialNumberData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F18C_ECUSerialNumberData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F191_VWECUHardwareNumberData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F191_VWECUHardwareNumberData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F197_VWSystemNameOrEngineTypeData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F197_VWSystemNameOrEngineTypeData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F19E_ASAMODXFileIdentifierData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F19E_ASAMODXFileIdentifierData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F1A2_ASAMODXFileVersionData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F1A2_ASAMODXFileVersionData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F1A3_VWECUHardwareVersionNumberData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F1A3_VWECUHardwareVersionNumberData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F1AB_VWLogicalSoftwareBlockVersionData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F1AB_VWLogicalSoftwareBlockVersionData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F1B4_TechnicalSpecificationsVersionData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F1B4_TechnicalSpecificationsVersionData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F1D5_FDSProjectData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F1D5_FDSProjectData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F1DF_ECUProgrammingInformationData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_F1DF_ECUProgrammingInformationData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD00_HWVersionData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD00_HWVersionData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD01_SWVersionData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD03_AEETraceabilityNumberData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD03_AEETraceabilityNumberData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD08_ResetCauseData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD09_LastWarmResetParamData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD0F_BatteryMeasureData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD0F_BatteryMeasureData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD10_ECUTemperatureData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD10_ECUTemperatureData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD62_EccOccurenceNbData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD8B_ECUManufacturingDateData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD8B_ECUManufacturingDateData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD8C_AssemblySerialNumber_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FD8C_AssemblySerialNumber_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE0_EcsVariantData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE0_EcsVariantData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE1_EcsParametersData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE1_EcsParametersData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE2_AccOffsetData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE2_AccOffsetData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE3_EcsProfilesData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE3_EcsProfilesData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE4_EcsStepsData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE4_EcsStepsData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE5_EcsAccLowPassData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE5_EcsAccLowPassData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE7_AlgoOutputDelayData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE7_AlgoOutputDelayData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE9_SensitivityLutData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDE9_SensitivityLutData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDEA_SensitivityOptData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDEA_SensitivityOptData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDFF_MeasurementFrameConfDataRam_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FDFF_MeasurementFrameConfDataRam_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FE00_AllEventStatusesRead_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FEFF_MeasurementFramesConfData_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_DataServices_DID_FEFF_MeasurementFramesConfData_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineAccAngleOffsetCalibration_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineAccAngleOffsetCalibration_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineAccAngleOffsetCalibration_DCM_E_FORCE_RCRRP 12U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineAccCalib_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineAccCalib_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineAccCalib_DCM_E_FORCE_RCRRP 12U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineRoutineCheckProgrammingPreconditions_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineRoutineCheckProgrammingPreconditions_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineRoutineCheckProgrammingPreconditions_DCM_E_FORCE_RCRRP 12U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineEcuTempCalibration_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineEcuTempCalibration_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineEcuTempCalibration_DCM_E_FORCE_RCRRP 12U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineLockSolenoid_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineLockSolenoid_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineLockSolenoid_DCM_E_FORCE_RCRRP 12U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineCtrl_Lock_UnlockECU_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineCtrl_Lock_UnlockECU_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineCtrl_Lock_UnlockECU_DCM_E_FORCE_RCRRP 12U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineProcessMode_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineProcessMode_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_RoutineServices_DcmDspRoutineProcessMode_DCM_E_FORCE_RCRRP 12U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_SecurityAccess_DcmDspSecurityAlv_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_SecurityAccess_DcmDspSecurityAlv_DCM_E_PENDING 10U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_SecurityAccess_DcmDspSecurityAlv_DCM_E_COMPARE_KEY_FAILED 11U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_ServiceRequestNotification_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_ServiceRequestNotification_E_REQUEST_NOT_ACCEPTED 8U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_GeneralDiagnosticInfo_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_GeneralDiagnosticInfo_DEM_E_NO_DTC_AVAILABLE 2U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_GeneralDiagnosticInfo_DEM_E_NODATAAVAILABLE 48U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_GeneralDiagnosticInfo_DEM_E_WRONG_RECORDNUMBER 49U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_GeneralDiagnosticInfo_DEM_E_WRONG_BUFFERSIZE 21U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_GeneralDiagnosticInfo_DEM_E_WRONG_DIDNUMBER 50U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_DIA, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_DIA, RTE_CONST) Rte_Instance_DIA;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_DIA, RTE_CONST, RTE_CONST) Rte_Inst_DIA;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define DIA_START_SEC_CODE
#include <DIA_MemMap.h>
extern FUNC(void, RTE_CODE) DIA_Init (void);

extern FUNC(Std_ReturnType, RTE_CODE) DIA_runCallBackDCMRequestServices_CBReqServInd_1_StartProtocol (Dcm_ProtocolType ProtocolID);

extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRte_Call_Dcm_CallBackDCMRequestServices_CBReqServInd_1_StopProtocol (Dcm_ProtocolType ProtocolID);

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid0407_VWLogicalSoftwareBlockCounterOfProgrammingAttemptsRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_0407_VWLogicalSoftwareBlockCounterOfProgrammingAttemptsData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid0407_VWLogicalSoftwareBlockCounterOfProgrammingAttemptsRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid040F_VWLogicalSoftwareBlockLockValueRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_040F_VWLogicalSoftwareBlockLockValueData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid040F_VWLogicalSoftwareBlockLockValueRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid0410_BootloaderTPBlocksizeRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_0410_BootloaderTPBlocksizeData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid0410_BootloaderTPBlocksizeRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid0410_BootloaderTPBlocksizeWrite (P2CONST(Dcm_DataDID_0410_BootloaderTPBlocksizeData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid0410_BootloaderTPBlocksizeWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid0448_ProgrammingPreconditionsRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_0448_ProgrammingPreconditionsData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid0448_ProgrammingPreconditionsRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid4024_SWSystemTimeRead (P2VAR(Dcm_DataDID_4024_SWSystemTimeData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid4024_SWSystemTimeRead (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocksRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocksData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocksRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF187_VWSparePartNumberRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F187_VWSparePartNumberData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF187_VWSparePartNumberRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF187_VWSparePartNumberWrite (P2CONST(Dcm_DataDID_F187_VWSparePartNumberData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF187_VWSparePartNumberWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF189_VWApplicationSoftwareVersionNumberRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F189_VWApplicationSoftwareVersionNumberData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF189_VWApplicationSoftwareVersionNumberRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF189_VWApplicationSoftwareVersionNumberWrite (P2CONST(Dcm_DataDID_F189_VWApplicationSoftwareVersionNumberData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF189_VWApplicationSoftwareVersionNumberWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF18C_ECUSerialNumberRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F18C_ECUSerialNumberData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF18C_ECUSerialNumberRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF18C_ECUSerialNumberWrite (P2CONST(Dcm_DataDID_F18C_ECUSerialNumberData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF18C_ECUSerialNumberWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF191_VWECUHardwareNumberWrite (P2CONST(Dcm_DataDID_F191_VWECUHardwareNumberData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF191_VWECUHardwareNumberWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF191_VWECUHardwareNumberRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F191_VWECUHardwareNumberData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF191_VWECUHardwareNumberRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF197_VWSystemNameOrEngineTypeRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F197_VWSystemNameOrEngineTypeData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF197_VWSystemNameOrEngineTypeRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF197_VWSystemNameOrEngineTypeWrite (P2CONST(Dcm_DataDID_F197_VWSystemNameOrEngineTypeData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF197_VWSystemNameOrEngineTypeWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF19E_ASAMODXFileIdentifierRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F19E_ASAMODXFileIdentifierData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF19E_ASAMODXFileIdentifierRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF19E_ASAMODXFileIdentifierWrite (P2CONST(Dcm_DataDID_F19E_ASAMODXFileIdentifierData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF19E_ASAMODXFileIdentifierWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1A2_ASAMODXFileVersionRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F1A2_ASAMODXFileVersionData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1A2_ASAMODXFileVersionRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1A2_ASAMODXFileVersionWrite (P2CONST(Dcm_DataDID_F1A2_ASAMODXFileVersionData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1A2_ASAMODXFileVersionWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1A3_VWECUHardwareVersionNumberRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F1A3_VWECUHardwareVersionNumberData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1A3_VWECUHardwareVersionNumberRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1A3_VWECUHardwareVersionNumberWrite (P2CONST(Dcm_DataDID_F1A3_VWECUHardwareVersionNumberData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1A3_VWECUHardwareVersionNumberWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1AB_VWLogicalSoftwareBlockVersionRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F1AB_VWLogicalSoftwareBlockVersionData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1AB_VWLogicalSoftwareBlockVersionRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1B4_TechnicalSpecificationsVersionRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F1B4_TechnicalSpecificationsVersionData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1B4_TechnicalSpecificationsVersionRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1D5_FDSProjectDataRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F1D5_FDSProjectData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1D5_FDSProjectDataRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1DF_ECUProgrammingInformationRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_F1DF_ECUProgrammingInformationData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidF1DF_ECUProgrammingInformationRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD00_HWVersionRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FD00_HWVersionData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD00_HWVersionRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD00_HWVersionWrite (P2CONST(Dcm_DataDID_FD00_HWVersionData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD00_HWVersionWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD01_SWVersionRead (P2VAR(Dcm_DataDID_FD01_SWVersionData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD01_SWVersionRead (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD03_AEETraceabilityNumberRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FD03_AEETraceabilityNumberData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD03_AEETraceabilityNumberRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD03_AEETraceabilityNumberWrite (P2CONST(Dcm_DataDID_FD03_AEETraceabilityNumberData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD03_AEETraceabilityNumberWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD08_ResetCauseRead (P2VAR(Dcm_DataDID_FD08_ResetCauseData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD08_ResetCauseRead (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD09_LastWarmResetParamRead (P2VAR(Dcm_DataDID_FD09_LastWarmResetParamData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD09_LastWarmResetParamRead (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD62_EccOccurenceNbRead (P2VAR(Dcm_DataDID_FD62_EccOccurenceNbData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD62_EccOccurenceNbRead (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD8B_ECUManufacturingDateRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FD8B_ECUManufacturingDateData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD8B_ECUManufacturingDateRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD8B_ECUManufacturingDateWrite (P2CONST(Dcm_DataDID_FD8B_ECUManufacturingDateData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD8B_ECUManufacturingDateWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD8C_AssemblySerialNumberRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FD8C_AssemblySerialNumber_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD8C_AssemblySerialNumberRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD8C_AssemblySerialNumberWrite (P2CONST(Dcm_DataDID_FD8C_AssemblySerialNumber_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFD8C_AssemblySerialNumberWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE0_EcsVariantRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FDE0_EcsVariantData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE0_EcsVariantRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE0_EcsVariantWrite (P2CONST(Dcm_DataDID_FDE0_EcsVariantData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE0_EcsVariantWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE1_EcsParametersRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FDE1_EcsParametersData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE1_EcsParametersRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE1_EcsParametersWrite (P2CONST(Dcm_DataDID_FDE1_EcsParametersData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE1_EcsParametersWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE2_EcsAccOffsetsRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FDE2_AccOffsetData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE2_EcsAccOffsetsRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE2_EcsAccOffsetsWrite (P2CONST(Dcm_DataDID_FDE2_AccOffsetData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE2_EcsAccOffsetsWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE3_EcsProfilesRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FDE3_EcsProfilesData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE3_EcsProfilesRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE3_EcsProfilesWrite (P2CONST(Dcm_DataDID_FDE3_EcsProfilesData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE3_EcsProfilesWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE4_EcsStepsRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FDE4_EcsStepsData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE4_EcsStepsRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE4_EcsStepsWrite (P2CONST(Dcm_DataDID_FDE4_EcsStepsData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE4_EcsStepsWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE5_EcsAccLowPassRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FDE5_EcsAccLowPassData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE5_EcsAccLowPassRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE5_EcsAccLowPassWrite (P2CONST(Dcm_DataDID_FDE5_EcsAccLowPassData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE5_EcsAccLowPassWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDIDFDE7_EcsAlgoOutputDelayRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FDE7_AlgoOutputDelayData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDIDFDE7_EcsAlgoOutputDelayRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDIDFDE7_EcsAlgoOutputDelayWrite (P2CONST(Dcm_DataDID_FDE7_AlgoOutputDelayData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDIDFDE7_EcsAlgoOutputDelayWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE9_EcsSensitivityLutRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FDE9_SensitivityLutData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE9_EcsSensitivityLutRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE9_EcsSensitivityLutWrite (P2CONST(Dcm_DataDID_FDE9_SensitivityLutData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDE9_EcsSensitivityLutWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDEA_EcsSensitivityOptRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FDEA_SensitivityOptData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDEA_EcsSensitivityOptRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDEA_EcsSensitivityOptWrite (P2CONST(Dcm_DataDID_FDEA_SensitivityOptData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDEA_EcsSensitivityOptWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDFF_MeasurementFrameRamConfRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FDFF_MeasurementFrameConfDataRam_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDFF_MeasurementFrameRamConfRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDFF_MeasurementFrameRamConfWrite (P2CONST(Dcm_DataDID_FDFF_MeasurementFrameConfDataRam_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFDFF_MeasurementFrameRamConfWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFE00_AllEventStatusesRead (P2VAR(Dcm_DataDID_FE00_AllEventStatusesRead_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFE00_AllEventStatusesRead (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFEFF_MeasurementFramesConfRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FEFF_MeasurementFramesConfData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFEFF_MeasurementFramesConfRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFEFF_MeasurementFramesConfWrite (P2CONST(Dcm_DataDID_FEFF_MeasurementFramesConfData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDidFEFF_MeasurementFramesConfWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid_FD0F_BatteryMeasureRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FD0F_BatteryMeasureData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runDid_FD0F_BatteryMeasureRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRid0203_CheckProgrammingPreconditions (Dcm_OpStatusType OpStatus, P2VAR(Dcm_StartFlexibleOutArrayData_DcmDspRoutineRoutineCheckProgrammingPreconditions_DcmDspStartRoutineOutSignal_0Type, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) currentDataLength, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRid0203_CheckProgrammingPreconditions (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) currentDataLength, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRidF781_EcuUnlockRequestRes (Dcm_OpStatusType OpStatus, P2VAR(Dcm_RequestDataOut_DcmDspRoutineCtrl_Lock_UnlockECU_DcmDspRoutineRequestResOutSignalType, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(Dcm_RequestDataOut_DcmDspRoutineCtrl_Lock_UnlockECU_DcmDspRoutineRequestResOutSignalInformationLockType, AUTOMATIC, RTE_APPL_DATA) dataOut1, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);

extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRidF781_EcuUnlockStart (Dcm_OpStatusType OpStatus, P2VAR(Dcm_StartDataOut_DcmDspRoutineCtrl_Lock_UnlockECU_DcmDspStartRoutineOutSignal_0Type, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);

extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRidF781_EcuUnlockStop (Dcm_OpStatusType OpStatus, P2VAR(Dcm_StopDataOut_DcmDspRoutineCtrl_Lock_UnlockECU_DcmDspRoutineStopOutSignal_0Type, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);

extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRidF793_ProcessModeRequestRes (Dcm_OpStatusType OpStatus, P2VAR(Dcm_RequestDataOut_DcmDspRoutineProcessMode_DcmDspRoutineRequestResOutSignal_RoutineInfoType, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(Dcm_RequestDataOut_DcmDspRoutineProcessMode_DcmDspRoutineRequestResOutSignal_PROCESSType, AUTOMATIC, RTE_APPL_DATA) dataOut1, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);

extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRidF793_ProcessModeStart (Dcm_OpStatusType OpStatus, P2VAR(Dcm_StartDataOut_DcmDspRoutineProcessMode_DcmDspStartRoutineOutSignal_RoutineInfoType, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);

extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRidF793_ProcessModeStop (Dcm_OpStatusType OpStatus, P2VAR(Dcm_StopDataOut_DcmDspRoutineProcessMode_DcmDspRoutineStopOutSignal_RoutineInfoType, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);

extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRidF794_AccCalibStart (Dcm_OpStatusType OpStatus, P2VAR(Dcm_StartDataOut_DcmDspRoutineAccCalib_DcmDspStartRoutineOutSignal_RoutineInfoType, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);

#define DIA_STOP_SEC_CODE
#include <DIA_MemMap.h>
#define DIA_START_SEC_CODE_ASIL_A
#include <DIA_MemMap.h>
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRidF795_LockSolenoidStart (Dcm_OpStatusType OpStatus, P2VAR(Dcm_StartDataOut_DcmDspRoutineLockSolenoid_DcmDspStartRoutineOutSignal_0Type, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);

extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRidF795_LockSolenoidStop (Dcm_OpStatusType OpStatus, P2VAR(Dcm_StopDataOut_DcmDspRoutineLockSolenoid_DcmDspStopRoutineOutSignal_RoutineInfoType, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);

#define DIA_STOP_SEC_CODE_ASIL_A
#include <DIA_MemMap.h>
#define DIA_START_SEC_CODE
#include <DIA_MemMap.h>
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRidF796_EcuTempCalibration (Dcm_StartDataIn_DcmDspRoutineEcuTempCalibration_DcmDspStartRoutineInSignal_0Type dataIn0, Dcm_OpStatusType OpStatus, P2VAR(Dcm_StartDataOut_DcmDspRoutineEcuTempCalibration_DcmDspStartRoutineOutSignal_0Type, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);

extern FUNC(Std_ReturnType, RTE_CODE) DIA_runRidF797_AccAngleOffsetCalibrationStart (Dcm_StartDataIn_DcmDspRoutineAccAngleOffsetCalibration_DcmDspStartRoutineInSignal_0Type dataIn0, Dcm_StartDataIn_DcmDspRoutineAccAngleOffsetCalibration_DcmDspStartRoutineInSignal_1Type dataIn1, Dcm_StartDataIn_DcmDspRoutineAccAngleOffsetCalibration_DcmDspStartRoutineInSignal_2Type dataIn2, Dcm_OpStatusType OpStatus, P2VAR(Dcm_StartDataOut_DcmDspRoutineAccAngleOffsetCalibration_DcmDspStartRoutineOutSignal_0Type, AUTOMATIC, RTE_APPL_DATA) dataOut0, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runSecurityAccessCompareKey (P2CONST(Dcm_SecKeyDcmDspSecurityAlv_ArrayType, AUTOMATIC, RTE_APPL_DATA) Key, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runSecurityAccessCompareKey (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Key, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runSecurityAccessGetSeed (Dcm_OpStatusType OpStatus, P2VAR(Dcm_SecSeedDcmDspSecurityAlv_ArrayType, AUTOMATIC, RTE_APPL_DATA) Seed, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runSecurityAccessGetSeed (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Seed, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

extern FUNC(Std_ReturnType, RTE_CODE) DIA_runServiceRequestConfirmation (uint8 SID, uint8 ReqType, uint16 SourceAddress, Dcm_ConfirmationStatusType ConfirmationStatus);

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runServiceRequestIndication (uint8 SID, P2CONST(Dcm_RequestData_ArrayType, AUTOMATIC, RTE_APPL_DATA) RequestData, uint16 DataSize, uint8 ReqType, uint16 SourceAddress, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_runServiceRequestIndication (uint8 SID, P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) RequestData, uint16 DataSize, uint8 ReqType, uint16 SourceAddress, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

extern FUNC(void, RTE_CODE) DIA_runSessionChangeIndication (void);

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_run_Did0236_ProgrammingDataElockEcuRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_0236_ProgrammingDataElockEcuData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_run_Did0236_ProgrammingDataElockEcuRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_run_Did0236_ProgrammingDataElockEcuWrite (P2CONST(Dcm_DataDID_0236_ProgrammingDataElockEcuData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_run_Did0236_ProgrammingDataElockEcuWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_run_Did023E_WSCForProgrammingElockEcuRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_023E_WSCForProgrammingElockEcuData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_run_Did023E_WSCForProgrammingElockEcuRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_run_Did023E_WSCForProgrammingElockEcuWrite (P2CONST(Dcm_DataDID_023E_WSCForProgrammingElockEcuData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_run_Did023E_WSCForProgrammingElockEcuWrite (P2CONST(uint8, AUTOMATIC, RTE_APPL_DATA) Data, Dcm_OpStatusType OpStatus, P2VAR(Dcm_NegativeResponseCodeType, AUTOMATIC, RTE_APPL_DATA) ErrorCode);
#endif

#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) DIA_run_DidFD10_ECUTemperatureRead (Dcm_OpStatusType OpStatus, P2VAR(Dcm_DataDID_FD10_ECUTemperatureData_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) DIA_run_DidFD10_ECUTemperatureRead (Dcm_OpStatusType OpStatus, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data);
#endif

#define DIA_STOP_SEC_CODE
#include <DIA_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_DIA_runRidF794_AccCalibStart))
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_DIA_prr3DAcceleration_st3DAccel (P2VAR(REC_3D_AccelerationType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_DIA_runRidF795_LockSolenoidStart)) || (defined(RTE_RUNNABLEAPI_DIA_runRidF795_LockSolenoidStop))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_DIA_pseEcsDiagRequest_au8DiagReq (P2CONST(au8eCSDiagReqType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_DIA_pseEcsDiagRequest_au8DiagReq (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_DIA_runRidF795_LockSolenoidStart))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_DIA_pseEcsDiagRequest_au8DiagReqComplement (P2CONST(au8eCSDiagReqType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_DIA_pseEcsDiagRequest_au8DiagReqComplement (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) NvmIf_GetNvmBlockStatus (NvM_ASR42_BlockIdType u16BlockId, P2VAR(NvM_ASR42_RequestResultType, AUTOMATIC, RTE_APPL_DATA) pu8BlockStatus);
extern FUNC(void, RTE_CODE) NvmIf_WriteNvmBlock (NvM_ASR42_BlockIdType u16BlockId, P2VAR(NvM_SrcPtrType, AUTOMATIC, RTE_APPL_DATA) pvNvM_SrcPtr);
extern FUNC(void, RTE_CODE) BswM_OnStartComEffective (void);
extern FUNC(void, RTE_CODE) STM_runReadAbsoluteSystemTime (P2VAR(stAbsoluteSystemTimeType, AUTOMATIC, RTE_APPL_DATA) pstAbsoluteSystemTime);
extern FUNC(void, RTE_CODE) RCM_GetResetCause (P2VAR(u32ResetCauseType, AUTOMATIC, RTE_APPL_DATA) pu32ResetCause);
extern FUNC(void, RTE_CODE) FSM_runCalculateProfileTimeout (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) pu8Response);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetEventStatus (Dem_EventIdType EventId, P2VAR(Dem_EventStatusExtendedType, AUTOMATIC, RTE_APPL_DATA) EventStatusExtended);
extern FUNC(void, RTE_CODE) IoHwAb_runGetMeasure (u8AdcChannelIDType u8TypeOfMeasure, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) u16Measure);
extern FUNC(void, RTE_CODE) NvmIf_GetNvmBlockLength (NvM_ASR42_BlockIdType u16BlockId, P2VAR(u16NvmBlockLengthType, AUTOMATIC, RTE_APPL_DATA) pu16BlockLength);
extern FUNC(void, RTE_CODE) IoHwAb_GetAccelerometerTemperature (P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16AccTemperature);
extern FUNC(void, RTE_CODE) IoHwAb_GetMcuTemperature (P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16McuTemperature);
extern FUNC(void, RTE_CODE) IoHwAb_GetPtcTemperature (P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16PtcSensorTemperature);
extern FUNC(void, RTE_CODE) NvmIf_SetRamBlockStatus (NvM_ASR42_BlockIdType u16BlockId, uint8 u8BlockChanged);
extern FUNC(void, RTE_CODE) IoHwAb_GetEcuTemperature (P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16EcuTemperature);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
