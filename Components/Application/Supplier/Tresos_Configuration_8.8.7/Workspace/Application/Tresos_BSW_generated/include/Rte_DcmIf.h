#ifndef RTE_DCMIF_H
#define RTE_DCMIF_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type DcmIf
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_DcmIf_Type.h>
#include <Rte_DcmIf_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_Dcm_GetProgConditions)) && (!defined(RTE_RUNNABLEAPI_Dcm_ReadMemory)) && (!defined(RTE_RUNNABLEAPI_Dcm_SetProgConditions)) && (!defined(RTE_RUNNABLEAPI_Dcm_WriteMemory)) && (!defined(RTE_RUNNABLEAPI_Rte_DcmConfirmation))
#define RTE_RUNNABLEAPI_Dcm_GetProgConditions
#define RTE_RUNNABLEAPI_Dcm_ReadMemory
#define RTE_RUNNABLEAPI_Dcm_SetProgConditions
#define RTE_RUNNABLEAPI_Dcm_WriteMemory
#define RTE_RUNNABLEAPI_Rte_DcmConfirmation
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_Dcm_GetProgConditions)
#define Rte_Trigger_ptrpAsrDcmServicesDcmIf_Dcm_GetProgConditions() (Rte_TriggerHook_DcmIf_ptrpAsrDcmServicesDcmIf_Dcm_GetProgConditions_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_DcmIf_ptrpAsrDcmServicesDcmIf_Dcm_GetProgConditions_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_Dcm_ReadMemory)
#define Rte_Call_pclNvmIfServices_GetNvmBlockStatus(u16BlockId, pu8BlockStatus) (NvmIf_GetNvmBlockStatus(u16BlockId, pu8BlockStatus)/*
Review instructions/justifications for parameter #2 with name 'pu8BlockStatus' and passed argument 'pu8BlockStatus':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#215: Verify that the pointer pu8BlockStatus always points to a NvM_ASR42_RequestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#284: Verify that the called function does not write more than sizeof(NvM_ASR42_RequestResultType) bytes to *pu8BlockStatus. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclNvmIfServices_ReadBlockByAddress(u32DestAddress, pvData) (NvmIf_ReadBlockByAddress(u32DestAddress, pvData)/*
Review instructions/justifications for parameter #2 with name 'pvData' and passed argument 'pvData':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#216: Verify that the pointer pvData always points to a NvM_ASR42_DstPtrType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#285: Verify that the called function does not write more than sizeof(NvM_ASR42_DstPtrType) bytes to *pvData. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpAsrDcmServicesDcmIf_Dcm_ReadMemory() (Rte_TriggerHook_DcmIf_ptrpAsrDcmServicesDcmIf_Dcm_ReadMemory_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_DcmIf_ptrpAsrDcmServicesDcmIf_Dcm_ReadMemory_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_Dcm_SetProgConditions)
#define Rte_Trigger_ptrpAsrDcmServicesDcmIf_Dcm_SetProgConditions() (Rte_TriggerHook_DcmIf_ptrpAsrDcmServicesDcmIf_Dcm_SetProgConditions_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_DcmIf_ptrpAsrDcmServicesDcmIf_Dcm_SetProgConditions_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_Dcm_WriteMemory)
#define Rte_Call_pclNvmIfServices_NvmIf_GetRamAddressByBlockId(u16BlockId, pu32BlockRamAddress) (NvmIf_GetRamAddressByBlockId(u16BlockId, pu32BlockRamAddress)/*
Review instructions/justifications for parameter #2 with name 'pu32BlockRamAddress' and passed argument 'pu32BlockRamAddress':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#217: Verify that the pointer pu32BlockRamAddress always points to a uint32 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#286: Verify that the called function does not write more than sizeof(uint32) bytes to *pu32BlockRamAddress. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclNvmIfServices_WriteBlockByAddress(u32DestAddress, pvData) (NvmIf_WriteBlockByAddress(u32DestAddress, pvData)/*
Review instructions/justifications for parameter #2 with name 'pvData' and passed argument 'pvData':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#218: Verify that the pointer pvData always points to a NvM_ASR42_DstPtrType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#287: Verify that the called function does not write more than sizeof(NvM_ASR42_DstPtrType) bytes to *pvData. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpAsrDcmServicesDcmIf_Dcm_WriteMemory() (Rte_TriggerHook_DcmIf_ptrpAsrDcmServicesDcmIf_Dcm_WriteMemory_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_DcmIf_ptrpAsrDcmServicesDcmIf_Dcm_WriteMemory_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_Rte_DcmConfirmation)
#define Rte_Trigger_ptrpAsrDcmServicesDcmIf_Rte_DcmConfirmation() (Rte_TriggerHook_DcmIf_ptrpAsrDcmServicesDcmIf_Rte_DcmConfirmation_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_DcmIf_ptrpAsrDcmServicesDcmIf_Rte_DcmConfirmation_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_DcmIf, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_DcmIf, RTE_CONST) Rte_Instance_DcmIf;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_DcmIf, RTE_CONST, RTE_CONST) Rte_Inst_DcmIf;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define DcmIf_START_SEC_CODE
#include <DcmIf_MemMap.h>
extern FUNC(void, RTE_CODE) Dcm_GetProgConditionsStub (void);

extern FUNC(void, RTE_CODE) Dcm_ReadMemoryStub (void);

extern FUNC(void, RTE_CODE) Dcm_SetProgConditionsStub (void);

extern FUNC(void, RTE_CODE) Dcm_WriteMemoryStub (void);

extern FUNC(void, RTE_CODE) Rte_DcmConfirmation_symb (void);

#define DcmIf_STOP_SEC_CODE
#include <DcmIf_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) NvmIf_GetNvmBlockStatus (NvM_ASR42_BlockIdType u16BlockId, P2VAR(NvM_ASR42_RequestResultType, AUTOMATIC, RTE_APPL_DATA) pu8BlockStatus);
extern FUNC(void, RTE_CODE) NvmIf_ReadBlockByAddress (uint32 u32DestAddress, P2VAR(NvM_ASR42_DstPtrType, AUTOMATIC, RTE_APPL_DATA) pvData);
extern FUNC(void, RTE_CODE) NvmIf_GetRamAddressByBlockId (NvM_ASR42_BlockIdType u16BlockId, P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) pu32BlockRamAddress);
extern FUNC(void, RTE_CODE) NvmIf_WriteBlockByAddress (uint32 u32DestAddress, P2VAR(NvM_ASR42_DstPtrType, AUTOMATIC, RTE_APPL_DATA) pvData);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
