#ifndef RTE_FSM_H
#define RTE_FSM_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type FSM
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_FSM_Type.h>
#include <Rte_FSM_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_FSM_Init)) && (!defined(RTE_RUNNABLEAPI_FSM_ModesInit)) && (!defined(RTE_RUNNABLEAPI_FSM_getUnlockDetectionTimeoutPeriod)) && (!defined(RTE_RUNNABLEAPI_FSM_runCalculateProfileTimeout)) && (!defined(RTE_RUNNABLEAPI_FSM_runCheckModeStatus)) && (!defined(RTE_RUNNABLEAPI_FSM_runMainFunction)) && (!defined(RTE_RUNNABLEAPI_FSM_runUpdateModeStatus))
#define RTE_RUNNABLEAPI_FSM_Init
#define RTE_RUNNABLEAPI_FSM_ModesInit
#define RTE_RUNNABLEAPI_FSM_getUnlockDetectionTimeoutPeriod
#define RTE_RUNNABLEAPI_FSM_runCalculateProfileTimeout
#define RTE_RUNNABLEAPI_FSM_runCheckModeStatus
#define RTE_RUNNABLEAPI_FSM_runMainFunction
#define RTE_RUNNABLEAPI_FSM_runUpdateModeStatus
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_FSM_Init)
#define Rte_Trigger_ptrpFsmServicesBswMIf_FSM_Init() (Rte_TriggerHook_FSM_ptrpFsmServicesBswMIf_FSM_Init_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnStartupTwoB()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_FSM_ptrpFsmServicesBswMIf_FSM_Init_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_FSM_ModesInit)
#define Rte_IrvWrite_FSM_ModesInit_FSM_u32_ModesStatus(data) (Rte_Irv_FSM_FSM_u32_ModesStatus = (data)/* RTE.Review.VariableAssignment.Justification: Destination of assignment only writes to a Rte local or global variable. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_IrvWrite_FSM_ModesInit_FSM_u32_ModesStatusComplement(data) (Rte_Irv_FSM_FSM_u32_ModesStatusComplement = (data)/* RTE.Review.VariableAssignment.Justification: Destination of assignment only writes to a Rte local or global variable. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpFsmServicesBswMIf_FSM_ModesInit() (Rte_TriggerHook_FSM_ptrpFsmServicesBswMIf_FSM_ModesInit_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnStartComEffective()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_FSM_ptrpFsmServicesBswMIf_FSM_ModesInit_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_FSM_runCheckModeStatus)
#define Rte_IrvRead_FSM_runCheckModeStatus_FSM_u32_ModesStatus() Rte_Irv_FSM_FSM_u32_ModesStatus/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#0: Verify that the user of this macro does not write more than sizeof(uint32) bytes to the returned variable. */
#define Rte_IrvRead_FSM_runCheckModeStatus_FSM_u32_ModesStatusComplement() Rte_Irv_FSM_FSM_u32_ModesStatusComplement/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#1: Verify that the user of this macro does not write more than sizeof(uint32) bytes to the returned variable. */
#define Rte_IrvWrite_FSM_runCheckModeStatus_FSM_u32_ModesStatus(data) (Rte_Irv_FSM_FSM_u32_ModesStatus = (data)/* RTE.Review.VariableAssignment.Justification: Destination of assignment only writes to a Rte local or global variable. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_IrvWrite_FSM_runCheckModeStatus_FSM_u32_ModesStatusComplement(data) (Rte_Irv_FSM_FSM_u32_ModesStatusComplement = (data)/* RTE.Review.VariableAssignment.Justification: Destination of assignment only writes to a Rte local or global variable. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if (defined(RTE_RUNNABLEAPI_FSM_runCheckModeStatus)) || (defined(RTE_RUNNABLEAPI_FSM_runUpdateModeStatus))
#define Rte_Call_pclDemServices_GetEventStatus Dem_GetEventStatus/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif
#if defined(RTE_RUNNABLEAPI_FSM_runMainFunction)
#define Rte_Write_psrSolenoidProfile_au8SelectedProfile(data) Rte_Write_FSM_psrSolenoidProfile_au8SelectedProfile(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_psrSolenoidStuckStatus_au8SolenoidIsStuck(data) Rte_Write_FSM_psrSolenoidStuckStatus_au8SolenoidIsStuck(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_psrSolenoidState_au8SolenoidState(data) Rte_Write_FSM_psrSolenoidState_au8SolenoidState(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrEcsDiagRequest_au8DiagReq(data) Rte_Read_FSM_prrEcsDiagRequest_au8DiagReq(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#220: Verify that the pointer data always points to a au8eCSDiagReqType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#294: Verify that the called function does not write more than sizeof(au8eCSDiagReqType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrEcsDiagRequest_au8DiagReq() Rte_ReceiveBuffer__FSM_prrEcsDiagRequest_au8DiagReq_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#2: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Read_prrEcsDiagRequest_au8DiagReqComplement(data) Rte_Read_FSM_prrEcsDiagRequest_au8DiagReqComplement(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#221: Verify that the pointer data always points to a au8eCSDiagReqType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#295: Verify that the called function does not write more than sizeof(au8eCSDiagReqType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrEcsDiagRequest_au8DiagReqComplement() Rte_ReceiveBuffer__FSM_prrEcsDiagRequest_au8DiagReqComplement_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#3: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Read_prrSolenoidOpenCircuitStatus_au8SolenoidAutotestStatus(data) Rte_Read_FSM_prrSolenoidOpenCircuitStatus_au8SolenoidAutotestStatus(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#222: Verify that the pointer data always points to a au8SolenoidOCStatusType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#296: Verify that the called function does not write more than sizeof(au8SolenoidOCStatusType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrSolenoidOpenCircuitStatus_au8SolenoidAutotestStatus() Rte_ReceiveBuffer__FSM_prrSolenoidOpenCircuitStatus_au8SolenoidAutotestStatus_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#4: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Read_prrSolenoidShortToGndStatus_au8SolenoidAutotestStatus(data) Rte_Read_FSM_prrSolenoidShortToGndStatus_au8SolenoidAutotestStatus(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#223: Verify that the pointer data always points to a au8SolenoidShortToGndStatusType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#297: Verify that the called function does not write more than sizeof(au8SolenoidShortToGndStatusType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrSolenoidShortToGndStatus_au8SolenoidAutotestStatus() Rte_ReceiveBuffer__FSM_prrSolenoidShortToGndStatus_au8SolenoidAutotestStatus_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#5: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Read_prrEcsAlgoFlag_u8EcsFlag(data) Rte_Read_FSM_prrEcsAlgoFlag_u8EcsFlag(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#224: Verify that the pointer data always points to a u8EcsTriggerType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#298: Verify that the called function does not write more than sizeof(u8EcsTriggerType) bytes to *data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrEcsAlgoFlag_u8EcsFlag() Rte_ReceiveBuffer__FSM_prrEcsAlgoFlag_u8EcsFlag_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#6: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Call_pclDemIfEventSerices_GetCounterPassedThreshold(ku16EventId, pu16DebounceTime) (Dem_GetEventDebounceTime(ku16EventId, pu16DebounceTime)/*
Review instructions/justifications for parameter #2 with name 'pu16DebounceTime' and passed argument 'pu16DebounceTime':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#225: Verify that the pointer pu16DebounceTime always points to a uint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#299: Verify that the called function does not write more than sizeof(uint16) bytes to *pu16DebounceTime. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclAutotestServices_GetTestResult(u8AutoTestId, u8TestResult) (ATM_runGetTestResult(u8AutoTestId, u8TestResult)/*
Review instructions/justifications for parameter #2 with name 'u8TestResult' and passed argument 'u8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#226: Verify that the pointer u8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#300: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *u8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclNvmIfServices_SetRamBlockStatus(u16BlockId, u8BlockChanged) (NvmIf_SetRamBlockStatus(u16BlockId, u8BlockChanged)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpAsrOsServicesFSM_FSM_runMainFunction() (Rte_TriggerHook_FSM_ptrpAsrOsServicesFSM_FSM_runMainFunction_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_FSM_ptrpAsrOsServicesFSM_FSM_runMainFunction_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_FSM_runUpdateModeStatus)
#define Rte_Read_prrCILData_au8MergedBuckleStatus(data) Rte_Read_FSM_prrCILData_au8MergedBuckleStatus(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#227: Verify that the pointer data always points to a au8MergedBuckleStatusType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#301: Verify that the called function does not write more than sizeof(au8MergedBuckleStatusType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrSolenoidOverVoltageStatus_au8SolenoidOvervoltageStatus(data) Rte_Read_FSM_prrSolenoidOverVoltageStatus_au8SolenoidOvervoltageStatus(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#228: Verify that the pointer data always points to a au8SolenoidOvervoltageStatusType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#302: Verify that the called function does not write more than sizeof(au8SolenoidOvervoltageStatusType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrSolenoidOverVoltageStatus_au8SolenoidOvervoltageStatus() Rte_ReceiveBuffer__FSM_prrSolenoidOverVoltageStatus_au8SolenoidOvervoltageStatus_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#7: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Read_prrSolenoidConfirmation_au8SolenoidStatus(data) Rte_Read_FSM_prrSolenoidConfirmation_au8SolenoidStatus(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#229: Verify that the pointer data always points to a au8SolenoidUnlockConfirmationType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#303: Verify that the called function does not write more than sizeof(au8SolenoidUnlockConfirmationType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrACCServices_u8AccInitStateMachine(data) (*(data) = Rte_ReceiveBuffer__FSM_prrACCServices_u8AccInitStateMachine_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#230: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_prrBswMIfServices_u8BlockRestoreStatus(data) (*(data) = Rte_ReceiveBuffer__FSM_prrBswMIfServices_u8BlockRestoreStatus_value/* RTE.Review.WriteAccess.PointerTypeAndNotNull#231: Verify that the pointer data always points to a uint8 type and is never NULL. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Read_prrCrashStatus_u8IsCrashActive(data) Rte_Read_FSM_prrCrashStatus_u8IsCrashActive(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#232: Verify that the pointer data always points to a uint8 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#304: Verify that the called function does not write more than sizeof(uint8) bytes to *data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrCrashStatus_u8IsCrashActive() Rte_ReceiveBuffer__FSM_prrCrashStatus_u8IsCrashActive_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#8: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Call_pclAutotestServices_GetCriticalAutoTestsReachedFlag(u8CriticalAutoTestsReachedFlag) (ATM_runGetCriticalAutoTestsReachedFlag(u8CriticalAutoTestsReachedFlag)/*
Review instructions/justifications for parameter #1 with name 'u8CriticalAutoTestsReachedFlag' and passed argument 'u8CriticalAutoTestsReachedFlag':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#233: Verify that the pointer u8CriticalAutoTestsReachedFlag always points to a uint8 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#305: Verify that the called function does not write more than sizeof(uint8) bytes to *u8CriticalAutoTestsReachedFlag. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclConvAdcService_getMeasure(u8TypeOfMeasure, u16Measure) (IoHwAb_runGetMeasure(u8TypeOfMeasure, u16Measure)/*
Review instructions/justifications for parameter #2 with name 'u16Measure' and passed argument 'u16Measure':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#234: Verify that the pointer u16Measure always points to a uint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#306: Verify that the called function does not write more than sizeof(uint16) bytes to *u16Measure. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpAsrOsServicesFSM_FSM_runUpdateModeStatus() (Rte_TriggerHook_FSM_ptrpAsrOsServicesFSM_FSM_runUpdateModeStatus_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_FSM_ptrpAsrOsServicesFSM_FSM_runUpdateModeStatus_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#define RTE_E_GeneralDiagnosticInfo_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_GeneralDiagnosticInfo_DEM_E_NO_DTC_AVAILABLE 2U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_GeneralDiagnosticInfo_DEM_E_NODATAAVAILABLE 48U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_GeneralDiagnosticInfo_DEM_E_WRONG_RECORDNUMBER 49U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_GeneralDiagnosticInfo_DEM_E_WRONG_BUFFERSIZE 21U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_GeneralDiagnosticInfo_DEM_E_WRONG_DIDNUMBER 50U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#ifndef RTE_CORE /* if included by software component */
#define Rte_InitValue_prrACCServices_u8AccInitStateMachine 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_prrBswMIfServices_u8BlockRestoreStatus 85U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_prrCrashStatus_u8IsCrashActive 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_prrEcsAlgoFlag_u16BallPosition 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_prrEcsAlgoFlag_u8EcsFlag 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_FSM, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_FSM, RTE_CONST) Rte_Instance_FSM;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_FSM, RTE_CONST, RTE_CONST) Rte_Inst_FSM;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define FSM_START_SEC_CODE_ASIL_A
#include <FSM_MemMap.h>
extern FUNC(void, RTE_CODE) FSM_Init (void);

extern FUNC(void, RTE_CODE) FSM_ModesInit (void);

extern FUNC(void, RTE_CODE) FSM_getUnlockDetectionTimeoutPeriod (P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) pu16UnlockDetectionTimeoutPeriod);

extern FUNC(void, RTE_CODE) FSM_runCalculateProfileTimeout (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) pu8Response);

extern FUNC(void, RTE_CODE) FSM_runCheckModeStatus (uint64 u64ModesToCheck, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) bModeStatus);

extern FUNC(void, RTE_CODE) FSM_runMainFunction (void);

extern FUNC(void, RTE_CODE) FSM_runUpdateModeStatus (void);

#define FSM_STOP_SEC_CODE_ASIL_A
#include <FSM_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_FSM_runMainFunction))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_FSM_psrSolenoidProfile_au8SelectedProfile (P2CONST(au8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_FSM_psrSolenoidProfile_au8SelectedProfile (P2CONST(u8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_FSM_psrSolenoidStuckStatus_au8SolenoidIsStuck (P2CONST(au8SolenoidBackupsType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_FSM_psrSolenoidStuckStatus_au8SolenoidIsStuck (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_FSM_psrSolenoidState_au8SolenoidState (P2CONST(au8FsmStateType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_FSM_psrSolenoidState_au8SolenoidState (P2CONST(u8FsmStateType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrEcsDiagRequest_au8DiagReq (P2VAR(au8eCSDiagReqType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrEcsDiagRequest_au8DiagReq (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrEcsDiagRequest_au8DiagReqComplement (P2VAR(au8eCSDiagReqType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrEcsDiagRequest_au8DiagReqComplement (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrSolenoidOpenCircuitStatus_au8SolenoidAutotestStatus (P2VAR(au8SolenoidOCStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrSolenoidOpenCircuitStatus_au8SolenoidAutotestStatus (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrSolenoidShortToGndStatus_au8SolenoidAutotestStatus (P2VAR(au8SolenoidShortToGndStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrSolenoidShortToGndStatus_au8SolenoidAutotestStatus (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrEcsAlgoFlag_u8EcsFlag (P2VAR(u8EcsTriggerType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_FSM_runUpdateModeStatus))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrCILData_au8MergedBuckleStatus (P2VAR(au8MergedBuckleStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrCILData_au8MergedBuckleStatus (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrSolenoidOverVoltageStatus_au8SolenoidOvervoltageStatus (P2VAR(au8SolenoidOvervoltageStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrSolenoidOverVoltageStatus_au8SolenoidOvervoltageStatus (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrSolenoidConfirmation_au8SolenoidStatus (P2VAR(au8SolenoidUnlockConfirmationType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrSolenoidConfirmation_au8SolenoidStatus (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_FSM_prrCrashStatus_u8IsCrashActive (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) data);
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) BswM_OnStartupTwoB (void);
extern FUNC(void, RTE_CODE) BswM_OnStartComEffective (void);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetEventStatus (Dem_EventIdType EventId, P2VAR(Dem_EventStatusExtendedType, AUTOMATIC, RTE_APPL_DATA) EventStatusExtended);
extern FUNC(void, RTE_CODE) Dem_GetEventDebounceTime (Dem_EventIdType ku16EventId, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) pu16DebounceTime);
extern FUNC(void, RTE_CODE) ATM_runGetTestResult (u8AutoTestIdType u8AutoTestId, P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) u8TestResult);
extern FUNC(void, RTE_CODE) NvmIf_SetRamBlockStatus (NvM_ASR42_BlockIdType u16BlockId, uint8 u8BlockChanged);
extern FUNC(void, RTE_CODE) ATM_runGetCriticalAutoTestsReachedFlag (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) u8CriticalAutoTestsReachedFlag);
extern FUNC(void, RTE_CODE) IoHwAb_runGetMeasure (u8AdcChannelIDType u8TypeOfMeasure, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) u16Measure);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
