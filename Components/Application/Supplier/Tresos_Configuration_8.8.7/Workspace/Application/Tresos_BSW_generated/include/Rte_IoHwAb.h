#ifndef RTE_IOHWAB_H
#define RTE_IOHWAB_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type IoHwAb
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_IoHwAb_Type.h>
#include <Rte_IoHwAb_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_IoHwAb_CheckEcuOverTemperatureAutotest)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_CheckPowerSupplyOvervoltageAutotest)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_CheckPowerSupplyUndervoltageAutotest)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_DetectVoltageFluctuation)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_GetAccelerometerTemperature)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_GetEcuTemperature)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_GetMcuTemperature)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_GetPtcTemperature)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_GetSolenoidTemperature)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_HandleSeatCurrentCircuit)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_HandleSeatVariants)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements100ms)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements10ms)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements2ms)) && (!defined(RTE_RUNNABLEAPI_IoHwAb_runGetMeasure))
#define RTE_RUNNABLEAPI_IoHwAb_CheckEcuOverTemperatureAutotest
#define RTE_RUNNABLEAPI_IoHwAb_CheckPowerSupplyOvervoltageAutotest
#define RTE_RUNNABLEAPI_IoHwAb_CheckPowerSupplyUndervoltageAutotest
#define RTE_RUNNABLEAPI_IoHwAb_DetectVoltageFluctuation
#define RTE_RUNNABLEAPI_IoHwAb_GetAccelerometerTemperature
#define RTE_RUNNABLEAPI_IoHwAb_GetEcuTemperature
#define RTE_RUNNABLEAPI_IoHwAb_GetMcuTemperature
#define RTE_RUNNABLEAPI_IoHwAb_GetPtcTemperature
#define RTE_RUNNABLEAPI_IoHwAb_GetSolenoidTemperature
#define RTE_RUNNABLEAPI_IoHwAb_HandleSeatCurrentCircuit
#define RTE_RUNNABLEAPI_IoHwAb_HandleSeatVariants
#define RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements100ms
#define RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements10ms
#define RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements2ms
#define RTE_RUNNABLEAPI_IoHwAb_runGetMeasure
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_IoHwAb_CheckPowerSupplyOvervoltageAutotest)
#define Rte_Call_pclAutotestServices_GetTestResult(u8AutoTestId, u8TestResult) (ATM_runGetTestResult(u8AutoTestId, u8TestResult)/*
Review instructions/justifications for parameter #2 with name 'u8TestResult' and passed argument 'u8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#235: Verify that the pointer u8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#324: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *u8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_IoHwAb_DetectVoltageFluctuation)
#define Rte_Write_psrSolenoidConfirmation_au8SolenoidStatus(data) Rte_Write_IoHwAb_psrSolenoidConfirmation_au8SolenoidStatus(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrAdcBufferServices_aau16HistoricalAdcSamples(data) Rte_Read_IoHwAb_prrAdcBufferServices_aau16HistoricalAdcSamples(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#236: Verify that the pointer data always points to a aau16HistoricalAdcSamplesType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#325: Verify that the called function does not write more than sizeof(aau16HistoricalAdcSamplesType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrAdcBufferServices_aau16HistoricalAdcSamples() Rte_ReceiveBuffer__IoHwAb_prrAdcBufferServices_aau16HistoricalAdcSamples_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#9: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Read_pclSolenoidStep_au8CurrentStep(data) Rte_Read_IoHwAb_pclSolenoidStep_au8CurrentStep(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#237: Verify that the pointer data always points to a au8CurrentStepType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#326: Verify that the called function does not write more than sizeof(au8CurrentStepType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_pclSolenoidStep_au8CurrentStep() Rte_ReceiveBuffer__IoHwAb_pclSolenoidStep_au8CurrentStep_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#10: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Read_pclSolenoidProfile_au8SelectedProfile(data) Rte_Read_IoHwAb_pclSolenoidProfile_au8SelectedProfile(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#238: Verify that the pointer data always points to a au8SolenoidProfileType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#327: Verify that the called function does not write more than sizeof(au8SolenoidProfileType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_pclSolenoidProfile_au8SelectedProfile() Rte_ReceiveBuffer__IoHwAb_pclSolenoidProfile_au8SelectedProfile_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#11: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Read_prrAdcBufferServices_u8HistoricalAdcSampleIndex(data) Rte_Read_IoHwAb_prrAdcBufferServices_u8HistoricalAdcSampleIndex(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#239: Verify that the pointer data always points to a uint8 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#328: Verify that the called function does not write more than sizeof(uint8) bytes to *data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrAdcBufferServices_u8HistoricalAdcSampleIndex() Rte_ReceiveBuffer__IoHwAb_prrAdcBufferServices_u8HistoricalAdcSampleIndex_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#12: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Call_pclModeManagement_CheckModeStatus(u64ModesToCheck, bModeStatus) (FSM_runCheckModeStatus(u64ModesToCheck, bModeStatus)/*
Review instructions/justifications for parameter #2 with name 'bModeStatus' and passed argument 'bModeStatus':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#240: Verify that the pointer bModeStatus always points to a uint8 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#329: Verify that the called function does not write more than sizeof(uint8) bytes to *bModeStatus. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclUnlockTimeout_getUnlockTimeoutPeriod(pu16UnlockDetectionTimeoutPeriod) (FSM_getUnlockDetectionTimeoutPeriod(pu16UnlockDetectionTimeoutPeriod)/*
Review instructions/justifications for parameter #1 with name 'pu16UnlockDetectionTimeoutPeriod' and passed argument 'pu16UnlockDetectionTimeoutPeriod':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#241: Verify that the pointer pu16UnlockDetectionTimeoutPeriod always points to a uint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#330: Verify that the called function does not write more than sizeof(uint16) bytes to *pu16UnlockDetectionTimeoutPeriod. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpAsrOsServicesIoHwAb_IoHwAb_DetectVoltageFluctuation() (Rte_TriggerHook_IoHwAb_ptrpAsrOsServicesIoHwAb_IoHwAb_DetectVoltageFluctuation_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_IoHwAb_ptrpAsrOsServicesIoHwAb_IoHwAb_DetectVoltageFluctuation_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_IoHwAb_GetAccelerometerTemperature)
#define Rte_Call_pclAccSpiData_GetTemperatureData(u16SpiTemperatureData) (ACC_GetAccelerometerTemperature(u16SpiTemperatureData)/*
Review instructions/justifications for parameter #1 with name 'u16SpiTemperatureData' and passed argument 'u16SpiTemperatureData':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#242: Verify that the pointer u16SpiTemperatureData always points to a uint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#331: Verify that the called function does not write more than sizeof(uint16) bytes to *u16SpiTemperatureData. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_IoHwAb_HandleSeatVariants)
#define Rte_Call_pclPassengerOccupancyState_BswM_UpdatePassangerOccupancyStatus() (BswM_UpdatePassangerOccupancyStatus()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclNvmIfServices_SetRamBlockStatus(u16BlockId, u8BlockChanged) (NvmIf_SetRamBlockStatus(u16BlockId, u8BlockChanged)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclDioIfServices_WriteChannel(u8ChannelID, u8Level) (DioIf_runWriteChannel(u8ChannelID, u8Level)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if (defined(RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements100ms)) || (defined(RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements10ms)) || (defined(RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements2ms))
#define Rte_Call_pclEfxServices_LPF_Filter(LastSample, CurrentSample, FilteredValue) (EFX_LPF_Filter_u16_u16(LastSample, CurrentSample, FilteredValue)/*
Review instructions/justifications for parameter #3 with name 'FilteredValue' and passed argument 'FilteredValue':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#243: Verify that the pointer FilteredValue always points to a uint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#332: Verify that the called function does not write more than sizeof(uint16) bytes to *FilteredValue. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements100ms)
#define Rte_Trigger_ptrpAsrOsServicesIoHwAb_IoHwAb_runFilterMeasurements100ms() (Rte_TriggerHook_IoHwAb_ptrpAsrOsServicesIoHwAb_IoHwAb_runFilterMeasurements100ms_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_IoHwAb_ptrpAsrOsServicesIoHwAb_IoHwAb_runFilterMeasurements100ms_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements10ms)
#define Rte_Write_psrBuckleStatus_au8BuckleStatus(data) Rte_Write_IoHwAb_psrBuckleStatus_au8BuckleStatus(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_psrSeatOccupancySensorStatus_au8SeatOccupancySensorStatus(data) Rte_Write_IoHwAb_psrSeatOccupancySensorStatus_au8SeatOccupancySensorStatus(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Trigger_ptrpAsrOsServicesIoHwAb_IoHwAb_runFilterMeasurements10ms() (Rte_TriggerHook_IoHwAb_ptrpAsrOsServicesIoHwAb_IoHwAb_runFilterMeasurements10ms_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_IoHwAb_ptrpAsrOsServicesIoHwAb_IoHwAb_runFilterMeasurements10ms_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements2ms)
#define Rte_Trigger_ptrpAsrOsServicesIoHwAb_IoHwAb_runFilterMeasurements2ms() (Rte_TriggerHook_IoHwAb_ptrpAsrOsServicesIoHwAb_IoHwAb_runFilterMeasurements2ms_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_IoHwAb_ptrpAsrOsServicesIoHwAb_IoHwAb_runFilterMeasurements2ms_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_IoHwAb_runGetMeasure)
#define Rte_Read_prrSolenoidPwm_au16Pwm(data) Rte_Read_IoHwAb_prrSolenoidPwm_au16Pwm(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#244: Verify that the pointer data always points to a au16PwmType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#333: Verify that the called function does not write more than sizeof(au16PwmType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrSolenoidPwm_au16Pwm() Rte_ReceiveBuffer__IoHwAb_prrSolenoidPwm_au16Pwm_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#13: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Read_prrSolenoidElectricalCharacteristics_au32SolenoidmATarget(data) Rte_Read_IoHwAb_prrSolenoidElectricalCharacteristics_au32SolenoidmATarget(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#245: Verify that the pointer data always points to a au32SolenoidmATargetType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#334: Verify that the called function does not write more than sizeof(au32SolenoidmATargetType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrSolenoidElectricalCharacteristics_au32SolenoidmATarget() Rte_ReceiveBuffer__IoHwAb_prrSolenoidElectricalCharacteristics_au32SolenoidmATarget_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#14: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Call_pclRawAdcService_getChannelValue(u8ChannelId, u16Value) (AdcIf_runGetChannelValue(u8ChannelId, u16Value)/*
Review instructions/justifications for parameter #2 with name 'u16Value' and passed argument 'u16Value':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#246: Verify that the pointer u16Value always points to a u16AdcValueLsbType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#335: Verify that the called function does not write more than sizeof(u16AdcValueLsbType) bytes to *u16Value. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#ifndef RTE_CORE /* if included by software component */
#define Rte_InitValue_prrAdcBufferServices_u8HistoricalAdcSampleIndex 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_IoHwAb, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_IoHwAb, RTE_CONST) Rte_Instance_IoHwAb;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_IoHwAb, RTE_CONST, RTE_CONST) Rte_Inst_IoHwAb;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define IoHwAb_START_SEC_CODE
#include <IoHwAb_MemMap.h>
extern FUNC(void, RTE_CODE) IoHwAb_CheckEcuOverTemperatureAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

#define IoHwAb_STOP_SEC_CODE
#include <IoHwAb_MemMap.h>
#define IoHwAb_START_SEC_CODE_ASIL_A
#include <IoHwAb_MemMap.h>
extern FUNC(void, RTE_CODE) IoHwAb_CheckPowerSupplyOvervoltageAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) IoHwAb_CheckPowerSupplyUndervoltageAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

#define IoHwAb_STOP_SEC_CODE_ASIL_A
#include <IoHwAb_MemMap.h>
#define IoHwAb_START_SEC_CODE
#include <IoHwAb_MemMap.h>
extern FUNC(void, RTE_CODE) IoHwAb_DetectVoltageFluctuation (void);

extern FUNC(void, RTE_CODE) IoHwAb_GetAccelerometerTemperature (P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16AccTemperature);

extern FUNC(void, RTE_CODE) IoHwAb_GetEcuTemperature (P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16EcuTemperature);

extern FUNC(void, RTE_CODE) IoHwAb_GetMcuTemperature (P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16McuTemperature);

extern FUNC(void, RTE_CODE) IoHwAb_GetPtcTemperature (P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16PtcSensorTemperature);

extern FUNC(void, RTE_CODE) IoHwAb_GetSolenoidTemperature (uint8 u8TypeOfMeasure, P2VAR(sint16, AUTOMATIC, RTE_APPL_DATA) s16SolenoidTemperature);

extern FUNC(void, RTE_CODE) IoHwAb_HandleSeatCurrentCircuit (P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) pu16WakeCh1, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) pu16WakeCh2, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) pu8Valid, uint8 u8ResetState);

extern FUNC(void, RTE_CODE) IoHwAb_HandleSeatVariants (uint16 u16WakeCh1, uint16 u16WakeCh2, P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) bReturn);

#define IoHwAb_STOP_SEC_CODE
#include <IoHwAb_MemMap.h>
#define IoHwAb_START_SEC_CODE_ASIL_A
#include <IoHwAb_MemMap.h>
extern FUNC(void, RTE_CODE) IoHwAb_runFilterMeasurements100ms (void);

extern FUNC(void, RTE_CODE) IoHwAb_runFilterMeasurements10ms (void);

extern FUNC(void, RTE_CODE) IoHwAb_runFilterMeasurements2ms (void);

extern FUNC(void, RTE_CODE) IoHwAb_runGetMeasure (u8AdcChannelIDType u8TypeOfMeasure, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) u16Measure);

#define IoHwAb_STOP_SEC_CODE_ASIL_A
#include <IoHwAb_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_IoHwAb_DetectVoltageFluctuation))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_IoHwAb_psrSolenoidConfirmation_au8SolenoidStatus (P2CONST(au8SolenoidUnlockConfirmationType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_IoHwAb_psrSolenoidConfirmation_au8SolenoidStatus (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_IoHwAb_prrAdcBufferServices_aau16HistoricalAdcSamples (P2VAR(aau16HistoricalAdcSamplesType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_IoHwAb_prrAdcBufferServices_aau16HistoricalAdcSamples (P2VAR(unsigned short, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_IoHwAb_pclSolenoidStep_au8CurrentStep (P2VAR(au8CurrentStepType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_IoHwAb_pclSolenoidStep_au8CurrentStep (P2VAR(u8CurrentStepType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_IoHwAb_pclSolenoidProfile_au8SelectedProfile (P2VAR(au8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_IoHwAb_pclSolenoidProfile_au8SelectedProfile (P2VAR(u8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_IoHwAb_prrAdcBufferServices_u8HistoricalAdcSampleIndex (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_IoHwAb_runFilterMeasurements10ms))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_IoHwAb_psrBuckleStatus_au8BuckleStatus (P2CONST(au8BuckleStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_IoHwAb_psrBuckleStatus_au8BuckleStatus (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_IoHwAb_psrSeatOccupancySensorStatus_au8SeatOccupancySensorStatus (P2CONST(au8SeatOccupancySensorType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_IoHwAb_psrSeatOccupancySensorStatus_au8SeatOccupancySensorStatus (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_IoHwAb_runGetMeasure))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_IoHwAb_prrSolenoidPwm_au16Pwm (P2VAR(au16PwmType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_IoHwAb_prrSolenoidPwm_au16Pwm (P2VAR(unsigned short, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_IoHwAb_prrSolenoidElectricalCharacteristics_au32SolenoidmATarget (P2VAR(au32SolenoidmATargetType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_IoHwAb_prrSolenoidElectricalCharacteristics_au32SolenoidmATarget (P2VAR(unsigned long, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) ATM_runGetTestResult (u8AutoTestIdType u8AutoTestId, P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) u8TestResult);
extern FUNC(void, RTE_CODE) FSM_runCheckModeStatus (uint64 u64ModesToCheck, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) bModeStatus);
extern FUNC(void, RTE_CODE) FSM_getUnlockDetectionTimeoutPeriod (P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) pu16UnlockDetectionTimeoutPeriod);
extern FUNC(void, RTE_CODE) ACC_GetAccelerometerTemperature (P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) u16SpiTemperatureData);
extern FUNC(void, RTE_CODE) BswM_UpdatePassangerOccupancyStatus (void);
extern FUNC(void, RTE_CODE) NvmIf_SetRamBlockStatus (NvM_ASR42_BlockIdType u16BlockId, uint8 u8BlockChanged);
extern FUNC(void, RTE_CODE) DioIf_runWriteChannel (u8DioIfChannelType u8ChannelID, u8DioIfLvlType u8Level);
extern FUNC(void, RTE_CODE) EFX_LPF_Filter_u16_u16 (uint16 LastSample, uint16 CurrentSample, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) FilteredValue);
extern FUNC(void, RTE_CODE) AdcIf_runGetChannelValue (u8AdcChannelIDType u8ChannelId, P2VAR(u16AdcValueLsbType, AUTOMATIC, RTE_APPL_DATA) u16Value);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
