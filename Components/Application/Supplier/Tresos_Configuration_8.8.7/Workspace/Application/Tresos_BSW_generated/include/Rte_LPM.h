#ifndef RTE_LPM_H
#define RTE_LPM_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type LPM
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_LPM_Type.h>
#include <Rte_LPM_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_LPM_sleepInit)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepMainLoop)) && (!defined(RTE_RUNNABLEAPI_LPM_sleepRestore)) && (!defined(RTE_RUNNABLEAPI_LPTMR_ISR)) && (!defined(RTE_RUNNABLEAPI_PORTD_ISR))
#define RTE_RUNNABLEAPI_LPM_sleepInit
#define RTE_RUNNABLEAPI_LPM_sleepMainLoop
#define RTE_RUNNABLEAPI_LPM_sleepRestore
#define RTE_RUNNABLEAPI_LPTMR_ISR
#define RTE_RUNNABLEAPI_PORTD_ISR
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_LPM_sleepInit)
#define Rte_Call_pclSbcServices_SBC_SetToLowPower() (SBC_SetToLowPower()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclSbcServices_SBC_sleepTriggerWatchdog() (SBC_sleepTriggerWatchdog()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpLpmServicesBswMIf_LPM_sleepInit() (Rte_TriggerHook_LPM_ptrpLpmServicesBswMIf_LPM_sleepInit_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnLowPwrFromPostRun()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_LPM_ptrpLpmServicesBswMIf_LPM_sleepInit_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_LPM_sleepMainLoop)
#define Rte_Call_pclLowPowerWakeUp_HandleSeatVariants(u16WakeCh1, u16WakeCh2, bReturn) (IoHwAb_HandleSeatVariants(u16WakeCh1, u16WakeCh2, bReturn)/*
Review instructions/justifications for parameter #3 with name 'bReturn' and passed argument 'bReturn':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#247: Verify that the pointer bReturn always points to a boolean type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#350: Verify that the called function does not write more than sizeof(boolean) bytes to *bReturn. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclHandleSeatCurrentCircuit_IoHwAb_HandleSeatCurrentCircuit(pu16WakeCh1, pu16WakeCh2, pu8Valid, u8ResetState) (IoHwAb_HandleSeatCurrentCircuit(pu16WakeCh1, pu16WakeCh2, pu8Valid, u8ResetState)/*
Review instructions/justifications for parameter #1 with name 'pu16WakeCh1' and passed argument 'pu16WakeCh1':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#248: Verify that the pointer pu16WakeCh1 always points to a uint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#351: Verify that the called function does not write more than sizeof(uint16) bytes to *pu16WakeCh1.
Review instructions/justifications for parameter #2 with name 'pu16WakeCh2' and passed argument 'pu16WakeCh2':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#249: Verify that the pointer pu16WakeCh2 always points to a uint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#352: Verify that the called function does not write more than sizeof(uint16) bytes to *pu16WakeCh2.
Review instructions/justifications for parameter #3 with name 'pu8Valid' and passed argument 'pu8Valid':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#250: Verify that the pointer pu8Valid always points to a uint8 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#353: Verify that the called function does not write more than sizeof(uint8) bytes to *pu8Valid. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclAdcIfServices_StartConversion() (AdcIf_StartConversion()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclAdcIfServices_StopConversion() (AdcIf_StopConversion()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclAdcIfServices_WaitForConversion() (AdcIf_WaitForConversion()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpLpmServicesBswMIf_LPM_sleepMainLoop() (Rte_TriggerHook_LPM_ptrpLpmServicesBswMIf_LPM_sleepMainLoop_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnLowPwrFromPostRun()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_LPM_ptrpLpmServicesBswMIf_LPM_sleepMainLoop_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_LPM_sleepRestore)
#define Rte_Call_pclAccRestartInit_RestartInitialization() (ACC_RestartInitialization()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclSbcServices_SBC_SetToNormal() (SBC_SetToNormal()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpLpmServicesBswMIf_LPM_sleepRestore() (Rte_TriggerHook_LPM_ptrpLpmServicesBswMIf_LPM_sleepRestore_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnLowPwrFromPostRun()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_LPM_ptrpLpmServicesBswMIf_LPM_sleepRestore_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_LPTMR_ISR)
#define Rte_Trigger_ptrpLpmServicesAsrOs_LPTMR_ISR() (Rte_TriggerHook_LPM_ptrpLpmServicesAsrOs_LPTMR_ISR_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_LPM_ptrpLpmServicesAsrOs_LPTMR_ISR_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_PORTD_ISR)
#define Rte_Trigger_ptrpLpmServicesAsrOs_PORTD_ISR() (Rte_TriggerHook_LPM_ptrpLpmServicesAsrOs_PORTD_ISR_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_LPM_ptrpLpmServicesAsrOs_PORTD_ISR_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_LPM, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_LPM, RTE_CONST) Rte_Instance_LPM;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_LPM, RTE_CONST, RTE_CONST) Rte_Inst_LPM;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define LPM_START_SEC_CODE
#include <LPM_MemMap.h>
extern FUNC(void, RTE_CODE) LPM_sleepInit (void);

extern FUNC(void, RTE_CODE) LPM_sleepMainLoop (void);

extern FUNC(void, RTE_CODE) LPM_sleepRestore (void);

extern FUNC(void, RTE_CODE) LPM_LPTMR_ISR (void);

extern FUNC(void, RTE_CODE) LPM_PORTD_ISR (void);

#define LPM_STOP_SEC_CODE
#include <LPM_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) SBC_SetToLowPower (void);
extern FUNC(void, RTE_CODE) SBC_sleepTriggerWatchdog (void);
extern FUNC(void, RTE_CODE) BswM_OnLowPwrFromPostRun (void);
extern FUNC(void, RTE_CODE) IoHwAb_HandleSeatVariants (uint16 u16WakeCh1, uint16 u16WakeCh2, P2VAR(boolean, AUTOMATIC, RTE_APPL_DATA) bReturn);
extern FUNC(void, RTE_CODE) IoHwAb_HandleSeatCurrentCircuit (P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) pu16WakeCh1, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) pu16WakeCh2, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) pu8Valid, uint8 u8ResetState);
extern FUNC(void, RTE_CODE) AdcIf_StartConversion (void);
extern FUNC(void, RTE_CODE) AdcIf_StopConversion (void);
extern FUNC(void, RTE_CODE) AdcIf_WaitForConversion (void);
extern FUNC(void, RTE_CODE) ACC_RestartInitialization (void);
extern FUNC(void, RTE_CODE) SBC_SetToNormal (void);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
