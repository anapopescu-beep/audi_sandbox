#ifndef RTE_MIC_H
#define RTE_MIC_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type MIC
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_MIC_Type.h>
#include <Rte_MIC_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_MIC_Autotest_RunEepromMemoryCorruption)) && (!defined(RTE_RUNNABLEAPI_MIC_Autotest_RunPFlashMemoryCorruption)) && (!defined(RTE_RUNNABLEAPI_MIC_Autotest_RunRamMemoryCorruption)) && (!defined(RTE_RUNNABLEAPI_MIC_BusFaultException)) && (!defined(RTE_RUNNABLEAPI_MIC_HardFaultException)) && (!defined(RTE_RUNNABLEAPI_MIC_Init))
#define RTE_RUNNABLEAPI_MIC_Autotest_RunEepromMemoryCorruption
#define RTE_RUNNABLEAPI_MIC_Autotest_RunPFlashMemoryCorruption
#define RTE_RUNNABLEAPI_MIC_Autotest_RunRamMemoryCorruption
#define RTE_RUNNABLEAPI_MIC_BusFaultException
#define RTE_RUNNABLEAPI_MIC_HardFaultException
#define RTE_RUNNABLEAPI_MIC_Init
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if (defined(RTE_RUNNABLEAPI_MIC_Autotest_RunEepromMemoryCorruption)) || (defined(RTE_RUNNABLEAPI_MIC_Autotest_RunPFlashMemoryCorruption)) || (defined(RTE_RUNNABLEAPI_MIC_Autotest_RunRamMemoryCorruption))
#define Rte_Call_pclResetCause_GetResetCause(pu32ResetCause) (RCM_GetResetCause(pu32ResetCause)/*
Review instructions/justifications for parameter #1 with name 'pu32ResetCause' and passed argument 'pu32ResetCause':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#251: Verify that the pointer pu32ResetCause always points to a u32ResetCauseType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#358: Verify that the called function does not write more than sizeof(u32ResetCauseType) bytes to *pu32ResetCause. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_MIC_Autotest_RunEepromMemoryCorruption)
#define Rte_Call_pclNvmIfServices_SetRamBlockStatus(u16BlockId, u8BlockChanged) (NvmIf_SetRamBlockStatus(u16BlockId, u8BlockChanged)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if (defined(RTE_RUNNABLEAPI_MIC_BusFaultException)) || (defined(RTE_RUNNABLEAPI_MIC_HardFaultException)) || (defined(RTE_RUNNABLEAPI_MIC_Init))
#define Rte_Call_pclResetCauseNotification_NotifyResetCause(u32ResetCauseNotification) (RCM_NotifyResetCause(u32ResetCauseNotification)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_MIC_BusFaultException)
#define Rte_Trigger_p_ptrrMicServicesOsIf_MIC_BusFaultException() (Rte_TriggerHook_MIC_p_ptrrMicServicesOsIf_MIC_BusFaultException_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, ProtectionHook_OsApplication_0()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_MIC_p_ptrrMicServicesOsIf_MIC_BusFaultException_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_MIC_HardFaultException)
#define Rte_Call_pclSbcServices_SBC_Reset() (SBC_Reset()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_p_ptrrMicServicesOsIf_MIC_HardFaultException() (Rte_TriggerHook_MIC_p_ptrrMicServicesOsIf_MIC_HardFaultException_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, ProtectionHook_OsApplication_0()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_MIC_p_ptrrMicServicesOsIf_MIC_HardFaultException_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_MIC_Init)
#define Rte_Trigger_p_ptrrMicServicesBswMIf_MIC_Init() (Rte_TriggerHook_MIC_p_ptrrMicServicesBswMIf_MIC_Init_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnStartupTwoA()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_MIC_p_ptrrMicServicesBswMIf_MIC_Init_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_MIC, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_MIC, RTE_CONST) Rte_Instance_MIC;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_MIC, RTE_CONST, RTE_CONST) Rte_Inst_MIC;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define MIC_START_SEC_CODE_ASIL_A
#include <MIC_MemMap.h>
extern FUNC(void, RTE_CODE) MIC_Autotest_RunEepromMemoryCorruption (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) MIC_Autotest_RunPFlashMemoryCorruption (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) MIC_Autotest_RunRamMemoryCorruption (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) MIC_BusFaultException (void);

extern FUNC(void, RTE_CODE) MIC_HardFaultException (void);

extern FUNC(void, RTE_CODE) MIC_Init (void);

#define MIC_STOP_SEC_CODE_ASIL_A
#include <MIC_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) RCM_GetResetCause (P2VAR(u32ResetCauseType, AUTOMATIC, RTE_APPL_DATA) pu32ResetCause);
extern FUNC(void, RTE_CODE) NvmIf_SetRamBlockStatus (NvM_ASR42_BlockIdType u16BlockId, uint8 u8BlockChanged);
extern FUNC(void, RTE_CODE) RCM_NotifyResetCause (u32ResetReasonNotificationType u32ResetCauseNotification);
extern FUNC(void, RTE_CODE) ProtectionHook_OsApplication_0 (void);
extern FUNC(void, RTE_CODE) SBC_Reset (void);
extern FUNC(void, RTE_CODE) BswM_OnStartupTwoA (void);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
