#ifndef RTE_RCM_H
#define RTE_RCM_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type RCM
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_RCM_Type.h>
#include <Rte_RCM_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_RCM_Autotest_ResetCause)) && (!defined(RTE_RUNNABLEAPI_RCM_DetermineResetCause)) && (!defined(RTE_RUNNABLEAPI_RCM_GetResetCause)) && (!defined(RTE_RUNNABLEAPI_RCM_NotifyResetCause)) && (!defined(RTE_RUNNABLEAPI_RCM_ReportOSError))
#define RTE_RUNNABLEAPI_RCM_Autotest_ResetCause
#define RTE_RUNNABLEAPI_RCM_DetermineResetCause
#define RTE_RUNNABLEAPI_RCM_GetResetCause
#define RTE_RUNNABLEAPI_RCM_NotifyResetCause
#define RTE_RUNNABLEAPI_RCM_ReportOSError
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_RCM_DetermineResetCause)
#define Rte_Call_pclSbcWdgServices_GetSbcStatus(u32StatusInformation) (SBC_GetSBCStatusInformation(u32StatusInformation)/*
Review instructions/justifications for parameter #1 with name 'u32StatusInformation' and passed argument 'u32StatusInformation':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#291: Verify that the pointer u32StatusInformation always points to a uint32 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#440: Verify that the called function does not write more than sizeof(uint32) bytes to *u32StatusInformation. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclNvmIfServices_SetRamBlockStatus(u16BlockId, u8BlockChanged) (NvmIf_SetRamBlockStatus(u16BlockId, u8BlockChanged)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpRcmServicesBswMIf_RCM_runDetermineResetCause() (Rte_TriggerHook_RCM_ptrpRcmServicesBswMIf_RCM_runDetermineResetCause_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnStartComEffective()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_RCM_ptrpRcmServicesBswMIf_RCM_runDetermineResetCause_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_RCM_GetResetCause)
#define Rte_IrvRead_RCM_GetResetCause_u8ResetCause() Rte_Irv_RCM_u8ResetCause/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#15: Verify that the user of this macro does not write more than sizeof(u32ResetCauseType) bytes to the returned variable. */
#define Rte_Trigger_ptrpRcmServicesBswMIf_RCM_runGetResetCause() Rte_Trigger_RCM_ptrpRcmServicesBswMIf_RCM_runGetResetCause()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_RCM, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_RCM, RTE_CONST) Rte_Instance_RCM;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_RCM, RTE_CONST, RTE_CONST) Rte_Inst_RCM;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define RCM_START_SEC_CODE_ASIL_A
#include <RCM_MemMap.h>
extern FUNC(void, RTE_CODE) RCM_Autotest_ResetCause (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) RCM_DetermineResetCause (void);

extern FUNC(void, RTE_CODE) RCM_GetResetCause (P2VAR(u32ResetCauseType, AUTOMATIC, RTE_APPL_DATA) pu32ResetCause);

extern FUNC(void, RTE_CODE) RCM_NotifyResetCause (u32ResetReasonNotificationType u32ResetCauseNotification);

extern FUNC(void, RTE_CODE) RCM_ReportOSError (u8OSTaskIDType u8TaskID, u8OSErrorType u8IDOSError);

#define RCM_STOP_SEC_CODE_ASIL_A
#include <RCM_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_RCM_GetResetCause))
extern FUNC(void, RTE_CODE) Rte_Trigger_RCM_ptrpRcmServicesBswMIf_RCM_runGetResetCause (void);
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) SBC_GetSBCStatusInformation (P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) u32StatusInformation);
extern FUNC(void, RTE_CODE) NvmIf_SetRamBlockStatus (NvM_ASR42_BlockIdType u16BlockId, uint8 u8BlockChanged);
extern FUNC(void, RTE_CODE) BswM_OnStartComEffective (void);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
