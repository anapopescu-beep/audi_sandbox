#ifndef RTE_SAD_H
#define RTE_SAD_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type SAD
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_SAD_Type.h>
#include <Rte_SAD_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)) && (!defined(RTE_RUNNABLEAPI_SAD_Init)) && (!defined(RTE_RUNNABLEAPI_SAD_checkActuatorState)) && (!defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
#define RTE_RUNNABLEAPI_SAD_CheckPowerStage
#define RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest
#define RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage
#define RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest
#define RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest
#define RTE_RUNNABLEAPI_SAD_Init
#define RTE_RUNNABLEAPI_SAD_checkActuatorState
#define RTE_RUNNABLEAPI_SAD_runMainFunction
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_SAD_CheckPowerStage)
#define Rte_Call_pclDioIfServices_ReadChannel(u8ChannelID, u8Level) (DioIf_runReadChannel(u8ChannelID, u8Level)/*
Review instructions/justifications for parameter #2 with name 'u8Level' and passed argument 'u8Level':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#292: Verify that the pointer u8Level always points to a u8DioIfLvlType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#442: Verify that the called function does not write more than sizeof(u8DioIfLvlType) bytes to *u8Level. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest)
#define Rte_Write_psrSolenoidOpenCircutStatus_au8SolenoidAutotestStatus(data) Rte_Write_SAD_psrSolenoidOpenCircutStatus_au8SolenoidAutotestStatus(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtActuatorOpenCircuit_GetEventStatus(EventStatusExtended) Dem_GetEventStatus(16U, EventStatusExtended)/*
Review instructions/justifications for parameter #2 with name 'EventStatusExtended' and passed argument 'EventStatusExtended':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#293: Verify that the pointer EventStatusExtended always points to a Dem_ASR42_EventStatusExtendedType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#443: Verify that the called function does not write more than sizeof(Dem_ASR42_EventStatusExtendedType) bytes to *EventStatusExtended. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif
#if defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage)
#define Rte_Write_psrSolenoidOvervoltageStatus_au8SolenoidOvervoltageStatus(data) Rte_Write_SAD_psrSolenoidOvervoltageStatus_au8SolenoidOvervoltageStatus(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtSolenoidOvervoltage_GetEventStatus(EventStatusExtended) Dem_GetEventStatus(21U, EventStatusExtended)/*
Review instructions/justifications for parameter #2 with name 'EventStatusExtended' and passed argument 'EventStatusExtended':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#294: Verify that the pointer EventStatusExtended always points to a Dem_ASR42_EventStatusExtendedType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#444: Verify that the called function does not write more than sizeof(Dem_ASR42_EventStatusExtendedType) bytes to *EventStatusExtended. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif
#if defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest)
#define Rte_Write_psrSolenoidShortToGndStatus_au8SolenoidAutotestStatus(data) Rte_Write_SAD_psrSolenoidShortToGndStatus_au8SolenoidAutotestStatus(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtActuatorShortToGround_GetEventStatus(EventStatusExtended) Dem_GetEventStatus(17U, EventStatusExtended)/*
Review instructions/justifications for parameter #2 with name 'EventStatusExtended' and passed argument 'EventStatusExtended':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#295: Verify that the pointer EventStatusExtended always points to a Dem_ASR42_EventStatusExtendedType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#445: Verify that the called function does not write more than sizeof(Dem_ASR42_EventStatusExtendedType) bytes to *EventStatusExtended. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif
#if defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest)
#define Rte_Write_psrSolenoidShortToVccStatus_au8SolenoidAutotestStatus(data) Rte_Write_SAD_psrSolenoidShortToVccStatus_au8SolenoidAutotestStatus(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclEvtActuatorShortToVbat_GetEventStatus(EventStatusExtended) Dem_GetEventStatus(18U, EventStatusExtended)/*
Review instructions/justifications for parameter #2 with name 'EventStatusExtended' and passed argument 'EventStatusExtended':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#296: Verify that the pointer EventStatusExtended always points to a Dem_ASR42_EventStatusExtendedType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#446: Verify that the called function does not write more than sizeof(Dem_ASR42_EventStatusExtendedType) bytes to *EventStatusExtended. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclAutotestServices_GetTestResult(u8AutoTestId, u8TestResult) (ATM_runGetTestResult(u8AutoTestId, u8TestResult)/*
Review instructions/justifications for parameter #2 with name 'u8TestResult' and passed argument 'u8TestResult':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#297: Verify that the pointer u8TestResult always points to a u8TestResultType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#447: Verify that the called function does not write more than sizeof(u8TestResultType) bytes to *u8TestResult. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_SAD_Init)
#define Rte_IrvWrite_SAD_Init_stProfileCfg(data) Rte_IrvWrite_SAD_SAD_Init_stProfileCfg(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Trigger_ptrpSadServicesBswMIf_SAD_Init() (Rte_TriggerHook_SAD_ptrpSadServicesBswMIf_SAD_Init_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, BswM_OnStartComEffective()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_SAD_ptrpSadServicesBswMIf_SAD_Init_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_SAD_runMainFunction)
#define Rte_IrvRead_SAD_runMainFunction_stProfileCfg(data) Rte_IrvRead_SAD_SAD_runMainFunction_stProfileCfg(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#298: Verify that the pointer data always points to a REC_stProfileCfgType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#448: Verify that the called function does not write more than sizeof(REC_stProfileCfgType) bytes to *data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_pseSolenoidPWM_au16Pwm(data) Rte_Write_SAD_pseSolenoidPWM_au16Pwm(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_psrSolenoidElectricalCharacteristics_au32SolenoidmATarget(data) Rte_Write_SAD_psrSolenoidElectricalCharacteristics_au32SolenoidmATarget(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_pseSolenoidStep_au8CurrentStep(data) Rte_Write_SAD_pseSolenoidStep_au8CurrentStep(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_pseDiagRequestServices_au8DiagReq(data) Rte_Write_SAD_pseDiagRequestServices_au8DiagReq(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Write_pseDiagRequestServices_au8DiagReqComplement(data) Rte_Write_SAD_pseDiagRequestServices_au8DiagReqComplement(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrSolenoidProfile_au8SelectedProfile(data) Rte_Read_SAD_prrSolenoidProfile_au8SelectedProfile(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#299: Verify that the pointer data always points to a au8SolenoidProfileType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#449: Verify that the called function does not write more than sizeof(au8SolenoidProfileType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrSolenoidProfile_au8SelectedProfile() Rte_ReceiveBuffer__SAD_prrSolenoidProfile_au8SelectedProfile_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#16: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Read_prrSolenoidStuckStatus_au8SolenoidIsStuck(data) Rte_Read_SAD_prrSolenoidStuckStatus_au8SolenoidIsStuck(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#300: Verify that the pointer data always points to a au8SolenoidBackupsType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#450: Verify that the called function does not write more than sizeof(au8SolenoidBackupsType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrSolenoidStuckStatus_au8SolenoidIsStuck() Rte_ReceiveBuffer__SAD_prrSolenoidStuckStatus_au8SolenoidIsStuck_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#17: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Read_prrSolenoidState_au8SolenoidState(data) Rte_Read_SAD_prrSolenoidState_au8SolenoidState(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#301: Verify that the pointer data always points to a au8FsmStateType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#451: Verify that the called function does not write more than sizeof(au8FsmStateType) bytes to data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Call_pclModeManagement_CheckModeStatus(u64ModesToCheck, bModeStatus) (FSM_runCheckModeStatus(u64ModesToCheck, bModeStatus)/*
Review instructions/justifications for parameter #2 with name 'bModeStatus' and passed argument 'bModeStatus':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#302: Verify that the pointer bModeStatus always points to a uint8 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#452: Verify that the called function does not write more than sizeof(uint8) bytes to *bModeStatus. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclPwmServices_SetDutyCycle(cu8ChannelID, cu16DutyCycle) (PwmIf_SetDutyCycle(cu8ChannelID, cu16DutyCycle)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclDioIfServices_WriteChannel(u8ChannelID, u8Level) (DioIf_runWriteChannel(u8ChannelID, u8Level)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclConvAdcService_getMeasure(u8TypeOfMeasure, u16Measure) (IoHwAb_runGetMeasure(u8TypeOfMeasure, u16Measure)/*
Review instructions/justifications for parameter #2 with name 'u16Measure' and passed argument 'u16Measure':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#303: Verify that the pointer u16Measure always points to a uint16 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#453: Verify that the called function does not write more than sizeof(uint16) bytes to *u16Measure. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpAsrOsServicesSAD_SAD_runMainFunction() (Rte_TriggerHook_SAD_ptrpAsrOsServicesSAD_SAD_runMainFunction_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_SAD_ptrpAsrOsServicesSAD_SAD_runMainFunction_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#define RTE_E_Dem_ASR42_DiagnosticInfo_E_NOT_OK 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_NO_DTC_AVAILABLE 2U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_NODATAAVAILABLE 48U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_WRONG_RECORDNUMBER 49U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_WRONG_BUFFERSIZE 21U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define RTE_E_Dem_ASR42_DiagnosticInfo_DEM_E_WRONG_DIDNUMBER 50U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_SAD, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_SAD, RTE_CONST) Rte_Instance_SAD;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_SAD, RTE_CONST, RTE_CONST) Rte_Inst_SAD;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define SAD_START_SEC_CODE_ASIL_A
#include <SAD_MemMap.h>
extern FUNC(void, RTE_CODE) SAD_CheckPowerStage (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SAD_CheckSolenoidOpenCircuitAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SAD_CheckSolenoidOvervoltage (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SAD_CheckSolenoidShortToGNDAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SAD_CheckSolenoidShortToVBATAutotest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SAD_Init (void);

extern FUNC(void, RTE_CODE) SAD_checkActuatorState (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SAD_runMainFunction (void);

#define SAD_STOP_SEC_CODE_ASIL_A
#include <SAD_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOpenCircuitAutotest))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidOpenCircutStatus_au8SolenoidAutotestStatus (P2CONST(au8SolenoidOCStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidOpenCircutStatus_au8SolenoidAutotestStatus (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidOvervoltage))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidOvervoltageStatus_au8SolenoidOvervoltageStatus (P2CONST(au8SolenoidOvervoltageStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidOvervoltageStatus_au8SolenoidOvervoltageStatus (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToGNDAutotest))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidShortToGndStatus_au8SolenoidAutotestStatus (P2CONST(au8SolenoidShortToGndStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidShortToGndStatus_au8SolenoidAutotestStatus (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_SAD_CheckSolenoidShortToVBATAutotest))
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidShortToVccStatus_au8SolenoidAutotestStatus (P2CONST(au8SolenoidShortToVccStatusType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidShortToVccStatus_au8SolenoidAutotestStatus (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_SAD_Init))
extern FUNC(void, RTE_CODE) Rte_IrvWrite_SAD_SAD_Init_stProfileCfg (P2CONST(REC_stProfileCfgType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#if (defined(RTE_CORE)) || (defined(RTE_RUNNABLEAPI_SAD_runMainFunction))
extern FUNC(void, RTE_CODE) Rte_IrvRead_SAD_SAD_runMainFunction_stProfileCfg (P2VAR(REC_stProfileCfgType, AUTOMATIC, RTE_APPL_DATA) data);
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseSolenoidPWM_au16Pwm (P2CONST(au16PwmType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseSolenoidPWM_au16Pwm (P2CONST(unsigned short, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidElectricalCharacteristics_au32SolenoidmATarget (P2CONST(au32SolenoidmATargetType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_psrSolenoidElectricalCharacteristics_au32SolenoidmATarget (P2CONST(unsigned long, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseSolenoidStep_au8CurrentStep (P2CONST(au8CurrentStepType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseSolenoidStep_au8CurrentStep (P2CONST(u8CurrentStepType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseDiagRequestServices_au8DiagReq (P2CONST(au8eCSDiagReqType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseDiagRequestServices_au8DiagReq (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseDiagRequestServices_au8DiagReqComplement (P2CONST(au8eCSDiagReqType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_SAD_pseDiagRequestServices_au8DiagReqComplement (P2CONST(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SAD_prrSolenoidProfile_au8SelectedProfile (P2VAR(au8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SAD_prrSolenoidProfile_au8SelectedProfile (P2VAR(u8SolenoidProfileType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SAD_prrSolenoidStuckStatus_au8SolenoidIsStuck (P2VAR(au8SolenoidBackupsType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SAD_prrSolenoidStuckStatus_au8SolenoidIsStuck (P2VAR(unsigned char, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#ifdef RTE_PTR2ARRAYTYPE_PASSING
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SAD_prrSolenoidState_au8SolenoidState (P2VAR(au8FsmStateType, AUTOMATIC, RTE_APPL_DATA) data);
#else
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_SAD_prrSolenoidState_au8SolenoidState (P2VAR(u8FsmStateType, AUTOMATIC, RTE_APPL_DATA) data);
#endif
#endif

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) DioIf_runReadChannel (u8DioIfChannelType u8ChannelID, P2VAR(u8DioIfLvlType, AUTOMATIC, RTE_APPL_DATA) u8Level);
extern FUNC(Std_ReturnType, RTE_CODE) Dem_GetEventStatus (Dem_ASR42_EventIdType pdav0, P2VAR(Dem_ASR42_EventStatusExtendedType, AUTOMATIC, RTE_APPL_DATA) EventStatusExtended);
extern FUNC(void, RTE_CODE) ATM_runGetTestResult (u8AutoTestIdType u8AutoTestId, P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) u8TestResult);
extern FUNC(void, RTE_CODE) BswM_OnStartComEffective (void);
extern FUNC(void, RTE_CODE) FSM_runCheckModeStatus (uint64 u64ModesToCheck, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) bModeStatus);
extern FUNC(void, RTE_CODE) PwmIf_SetDutyCycle (u8PwmChannelType cu8ChannelID, u16PwmDutyCycleType cu16DutyCycle);
extern FUNC(void, RTE_CODE) DioIf_runWriteChannel (u8DioIfChannelType u8ChannelID, u8DioIfLvlType u8Level);
extern FUNC(void, RTE_CODE) IoHwAb_runGetMeasure (u8AdcChannelIDType u8TypeOfMeasure, P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) u16Measure);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
