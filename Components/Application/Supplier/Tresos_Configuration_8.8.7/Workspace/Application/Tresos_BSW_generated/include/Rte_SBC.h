#ifndef RTE_SBC_H
#define RTE_SBC_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type SBC
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_SBC_Type.h>
#include <Rte_SBC_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_SBC_Autotest_CheckStatusInformation)) && (!defined(RTE_RUNNABLEAPI_SBC_Autotest_WdgTest)) && (!defined(RTE_RUNNABLEAPI_SBC_GetSBCStatusInformation)) && (!defined(RTE_RUNNABLEAPI_SBC_Init)) && (!defined(RTE_RUNNABLEAPI_SBC_Reset)) && (!defined(RTE_RUNNABLEAPI_SBC_SetToLowPower)) && (!defined(RTE_RUNNABLEAPI_SBC_SetToNormal)) && (!defined(RTE_RUNNABLEAPI_SBC_Shutdown)) && (!defined(RTE_RUNNABLEAPI_SBC_runMainFunction)) && (!defined(RTE_RUNNABLEAPI_SBC_sleepTriggerWatchdog))
#define RTE_RUNNABLEAPI_SBC_Autotest_CheckStatusInformation
#define RTE_RUNNABLEAPI_SBC_Autotest_WdgTest
#define RTE_RUNNABLEAPI_SBC_GetSBCStatusInformation
#define RTE_RUNNABLEAPI_SBC_Init
#define RTE_RUNNABLEAPI_SBC_Reset
#define RTE_RUNNABLEAPI_SBC_SetToLowPower
#define RTE_RUNNABLEAPI_SBC_SetToNormal
#define RTE_RUNNABLEAPI_SBC_Shutdown
#define RTE_RUNNABLEAPI_SBC_runMainFunction
#define RTE_RUNNABLEAPI_SBC_sleepTriggerWatchdog
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_SBC_Autotest_CheckStatusInformation)
#define Rte_Write_psrSbcStatusFailiureSource_u32SbcReg1Status(data) (Rte_ReceiveBuffer__CIL_prrSbcStatusFailiureSource_u32SbcReg1Status_value = (data)/* RTE.Review.VariableAssignment.Justification: Destination of assignment only writes to a Rte local or global variable. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_SBC_Init)
#define Rte_Trigger_ptrpSbcServicesEcuM_EcuM_AL_DriverInitOne() (Rte_TriggerHook_SBC_ptrpSbcServicesEcuM_EcuM_AL_DriverInitOne_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_SBC_ptrpSbcServicesEcuM_EcuM_AL_DriverInitOne_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_SBC_runMainFunction)
#define Rte_Call_pclResetCause_GetResetCause(pu32ResetCause) (RCM_GetResetCause(pu32ResetCause)/*
Review instructions/justifications for parameter #1 with name 'pu32ResetCause' and passed argument 'pu32ResetCause':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#304: Verify that the pointer pu32ResetCause always points to a u32ResetCauseType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#466: Verify that the called function does not write more than sizeof(u32ResetCauseType) bytes to *pu32ResetCause. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Call_pclResetCauseNotification_NotifyResetCause(u32ResetCauseNotification) (RCM_NotifyResetCause(u32ResetCauseNotification)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpAsrOsServicesSBC_SBC_runMainFunction() (Rte_TriggerHook_SBC_ptrpAsrOsServicesSBC_SBC_runMainFunction_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_SBC_ptrpAsrOsServicesSBC_SBC_runMainFunction_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#ifndef RTE_CORE /* if included by software component */
#define Rte_InitValue_psrSbcStatusFailiureSource_u32SbcReg1Status 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_SBC, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_SBC, RTE_CONST) Rte_Instance_SBC;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_SBC, RTE_CONST, RTE_CONST) Rte_Inst_SBC;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define SBC_START_SEC_CODE_ASIL_A
#include <SBC_MemMap.h>
extern FUNC(void, RTE_CODE) SBC_Autotest_CheckStatusInformation (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SBC_Autotest_WdgTest (P2VAR(u8TestResultType, AUTOMATIC, RTE_APPL_DATA) pu8TestResult);

extern FUNC(void, RTE_CODE) SBC_GetSBCStatusInformation (P2VAR(uint32, AUTOMATIC, RTE_APPL_DATA) u32StatusInformation);

extern FUNC(void, RTE_CODE) SBC_Init (void);

extern FUNC(void, RTE_CODE) SBC_Reset (void);

#define SBC_STOP_SEC_CODE_ASIL_A
#include <SBC_MemMap.h>
#define SBC_START_SEC_CODE
#include <SBC_MemMap.h>
extern FUNC(void, RTE_CODE) SBC_SetToLowPower (void);

extern FUNC(void, RTE_CODE) SBC_SetToNormal (void);

extern FUNC(void, RTE_CODE) SBC_Shutdown (void);

#define SBC_STOP_SEC_CODE
#include <SBC_MemMap.h>
#define SBC_START_SEC_CODE_ASIL_A
#include <SBC_MemMap.h>
extern FUNC(void, RTE_CODE) SBC_runMainFunction (void);

#define SBC_STOP_SEC_CODE_ASIL_A
#include <SBC_MemMap.h>
#define SBC_START_SEC_CODE
#include <SBC_MemMap.h>
extern FUNC(void, RTE_CODE) SBC_sleepTriggerWatchdog (void);

#define SBC_STOP_SEC_CODE
#include <SBC_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) RCM_GetResetCause (P2VAR(u32ResetCauseType, AUTOMATIC, RTE_APPL_DATA) pu32ResetCause);
extern FUNC(void, RTE_CODE) RCM_NotifyResetCause (u32ResetReasonNotificationType u32ResetCauseNotification);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
