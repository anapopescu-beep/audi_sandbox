#ifndef RTE_SPIIF_H
#define RTE_SPIIF_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type SpiIf
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_SpiIf_Type.h>
#include <Rte_SpiIf_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if (!defined(RTE_RUNNABLEAPI_SpiIf_spiReadIBFromChannel)) && (!defined(RTE_RUNNABLEAPI_SpiIf_spiSyncTransmitSequence)) && (!defined(RTE_RUNNABLEAPI_SpiIf_writeSpiData))
#define RTE_RUNNABLEAPI_SpiIf_spiReadIBFromChannel
#define RTE_RUNNABLEAPI_SpiIf_spiSyncTransmitSequence
#define RTE_RUNNABLEAPI_SpiIf_writeSpiData
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if defined(RTE_RUNNABLEAPI_SpiIf_spiReadIBFromChannel)
#define Rte_Trigger_ptrpSpiIfServicesSBC_SpiIf_spiReadIBFromChannel() (Rte_TriggerHook_SpiIf_ptrpSpiIfServicesSBC_SpiIf_spiReadIBFromChannel_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, SBC_Init()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, SBC_runMainFunction()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_SpiIf_ptrpSpiIfServicesSBC_SpiIf_spiReadIBFromChannel_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpSpiIfServicesACC_SpiIf_spiReadIBFromChannel() (Rte_TriggerHook_SpiIf_ptrpSpiIfServicesACC_SpiIf_spiReadIBFromChannel_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, ACC_runMainFunction()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_SpiIf_ptrpSpiIfServicesACC_SpiIf_spiReadIBFromChannel_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_SpiIf_spiSyncTransmitSequence)
#define Rte_Trigger_ptrpSpiIfServicesSBC_SpiIf_spiSyncTransmitSequence() (Rte_TriggerHook_SpiIf_ptrpSpiIfServicesSBC_SpiIf_spiSyncTransmitSequence_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, SBC_Init()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, SBC_runMainFunction()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_SpiIf_ptrpSpiIfServicesSBC_SpiIf_spiSyncTransmitSequence_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpSpiIfServicesACC_SpiIf_spiSyncTransmitSequence() (Rte_TriggerHook_SpiIf_ptrpSpiIfServicesACC_SpiIf_spiSyncTransmitSequence_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, ACC_runMainFunction()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_SpiIf_ptrpSpiIfServicesACC_SpiIf_spiSyncTransmitSequence_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#if defined(RTE_RUNNABLEAPI_SpiIf_writeSpiData)
#define Rte_Trigger_ptrpSpiIfServicesSBC_SpiIf_writeSpiData() (Rte_TriggerHook_SpiIf_ptrpSpiIfServicesSBC_SpiIf_writeSpiData_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, SBC_Init()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, SBC_runMainFunction()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_SpiIf_ptrpSpiIfServicesSBC_SpiIf_writeSpiData_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpSpiIfServicesACC_SpiIf_writeSpiData() (Rte_TriggerHook_SpiIf_ptrpSpiIfServicesACC_SpiIf_writeSpiData_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, ACC_runMainFunction()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, ACC_ReadAccelerometerTemperature()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_SpiIf_ptrpSpiIfServicesACC_SpiIf_writeSpiData_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_SpiIf, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_SpiIf, RTE_CONST) Rte_Instance_SpiIf;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_SpiIf, RTE_CONST, RTE_CONST) Rte_Inst_SpiIf;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define SpiIf_START_SEC_CODE_ASIL_A
#include <SpiIf_MemMap.h>
extern FUNC(void, RTE_CODE) SpiIf_spiReadIBFromChannel (void);

extern FUNC(void, RTE_CODE) SpiIf_spiSyncTransmitSequence (void);

extern FUNC(void, RTE_CODE) SpiIf_writeSpiData (void);

#define SpiIf_STOP_SEC_CODE_ASIL_A
#include <SpiIf_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) SBC_Init (void);
extern FUNC(void, RTE_CODE) SBC_runMainFunction (void);
extern FUNC(void, RTE_CODE) ACC_runMainFunction (void);
extern FUNC(void, RTE_CODE) ACC_ReadAccelerometerTemperature (void);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
