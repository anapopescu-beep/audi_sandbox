#ifndef RTE_ECS_H
#define RTE_ECS_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.9.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2023 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type eCS
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.9.3
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Intern.h>
#include <Rte_Main.h>
#include <Rte_eCS_Type.h>
#include <Rte_eCS_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#if !defined(RTE_RUNNABLEAPI_eCS_runMainFunction)
#define RTE_RUNNABLEAPI_eCS_runMainFunction
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#define Rte_Write_psrEcsAlgoData_u16BallPosition(data) (Rte_ReceiveBuffer__CIL_prrEcsAlgoData_u16BallPosition_value = (data)/* RTE.Review.VariableAssignment.Justification: Destination of assignment only writes to a Rte local or global variable. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Write_psrEcsAlgoData_u8EcsFlag(data) Rte_Write_eCS_psrEcsAlgoData_u8EcsFlag(data)/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_Read_prrAccelMtrPerSecSqd_stAccelMtrPerSecSqd(data) Rte_Read_eCS_prrAccelMtrPerSecSqd_stAccelMtrPerSecSqd(data)/*
Review instructions/justifications for parameter #1 with name 'data' and passed argument 'data':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#305: Verify that the pointer data always points to a REC_3D_AccelMtrPerSecSqdType type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#468: Verify that the called function does not write more than sizeof(REC_3D_AccelMtrPerSecSqdType) bytes to *data. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_IsUpdated_prrAccelMtrPerSecSqd_stAccelMtrPerSecSqd() Rte_ReceiveBuffer__eCS_prrAccelMtrPerSecSqd_stAccelMtrPerSecSqd_isUpdated/* RTE.Review.PreprocessorMacro.PossibleWriteAcccess#18: Verify that the user of this macro does not write more than sizeof(boolean) bytes to the returned variable. */
#define Rte_Call_pclModeManagement_CheckModeStatus(u64ModesToCheck, bModeStatus) (FSM_runCheckModeStatus(u64ModesToCheck, bModeStatus)/*
Review instructions/justifications for parameter #2 with name 'bModeStatus' and passed argument 'bModeStatus':
- RTE.Review.WriteAccess.PointerTypeAndNotNull#306: Verify that the pointer bModeStatus always points to a uint8 type and is never NULL.
- RTE.Review.FunctionCall.OutInoutArg#469: Verify that the called function does not write more than sizeof(uint8) bytes to *bModeStatus. */, RTE_E_OK/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#define Rte_Trigger_ptrpAsrOsServicesECS_eCS_runMainFunction() (Rte_TriggerHook_eCS_ptrpAsrOsServicesECS_eCS_runMainFunction_Start()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. */, Rte_TriggerHook_eCS_ptrpAsrOsServicesECS_eCS_runMainFunction_Return()/* RTE.Review.FunctionCall.ReadOnly.Justification: Called function has no or only IN arguments. *//* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */)
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#ifndef RTE_CORE /* if included by software component */
#define Rte_InitValue_psrEcsAlgoData_u16BallPosition 0U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#define Rte_InitValue_psrEcsAlgoData_u8EcsFlag 1U/* RTE.Review.PreprocessorMacro.ReadOnly.Justification: The value/identifier returned by the preprocessor macro is read-only and cannot be modified by the user. */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_eCS, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_eCS, RTE_CONST) Rte_Instance_eCS;
#define RTE_STOP_SEC_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_CONST_32
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_eCS, RTE_CONST, RTE_CONST) Rte_Inst_eCS;
#define RTE_STOP_SEC_CONST_32
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define eCS_START_SEC_CODE_ASIL_A
#include <eCS_MemMap.h>
extern FUNC(void, RTE_CODE) eCS_runMainFunction (void);

#define eCS_STOP_SEC_CODE_ASIL_A
#include <eCS_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_eCS_psrEcsAlgoData_u8EcsFlag (u8EcsTriggerType data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_eCS_prrAccelMtrPerSecSqd_stAccelMtrPerSecSqd (P2VAR(REC_3D_AccelMtrPerSecSqdType, AUTOMATIC, RTE_APPL_DATA) data);

#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */
#define RTE_START_SEC_APPL_CODE
#include <Rte_MemMap.h>
#ifndef RTE_CORE /* if included by software component */
extern FUNC(void, RTE_CODE) FSM_runCheckModeStatus (uint64 u64ModesToCheck, P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) bModeStatus);
#endif

#define RTE_STOP_SEC_APPL_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
