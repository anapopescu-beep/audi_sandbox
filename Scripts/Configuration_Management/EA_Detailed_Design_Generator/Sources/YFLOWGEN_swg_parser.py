# --------------------------------------------- YFLOWGEN_swg_parser.py Lib ---------------------------------------------
# YFLOWGEN generated swg files Parser Library
# Written for Enterprise Architect Detailed Design Generator
#
# ----------------------------------------------------------------------------------------------------------------------

# -------------------------------------------------- IMPORTS -----------------------------------------------------------
import xmltodict
import os

# -------------------------------------------------- VARIABLES ---------------------------------------------------------
yflowgen_output_folder_path = os.path.join(os.getcwd(), 'result_yFlowGen/src_code')

def get_data_from_YFLOWGEN_Generated_SVG_files(Parsed_Doxygen_Dictionary: dict, swComponent: str):
    dict_of_svg_xml = {}
    for subdir, dirs, files in os.walk(yflowgen_output_folder_path):
        for file in files:
            if file.endswith('.svg'):
                swg_function_name = file.split('.')[0]
                if swg_function_name in Parsed_Doxygen_Dictionary['functions'].keys():
                    svg_file_path = os.path.join(subdir, file)
                    with open(svg_file_path, 'r', encoding='utf-8', errors='ignore') as swgFile:
                        my_xml = swgFile.read()
                    result_dict = xmltodict.parse(my_xml)
                    dict_of_svg_xml[swg_function_name] = result_dict
                else:
                    print('WARN -> The diagram "' + file + '" generated by Yflowgen does not correspond to any function in the module "' + swComponent + '" !')


    return dict_of_svg_xml


def get_BGR_from_RBG(RGB_string):
    try:
        rgbHex = RGB_string.replace('#', '')
        test = int(rgbHex, 16)
        r = rgbHex[0:2]
        g = rgbHex[2:4]
        b = rgbHex[4:6]
        bgrHex = b + g + r
        return int(bgrHex, 16)
    except:
        return 0x000000


def yflowgen_xml_to_dict(dict_of_svg_xml: dict):
    yflowgen_x_positions_multiplier = 0.8
    yflowgen_y_positions_multiplier = 1.2
    yflowgen_dimensions_multiplier = 0.65
    parsed_yflowgen_dict = {}
    for functionName in dict_of_svg_xml.keys():
        parsed_yflowgen_function_elm_list = []
        node_positions_dict = {}
        poligon_points = dict_of_svg_xml[functionName]['svg']['g']['polygon']['@points']
        [x_min, y_min] = poligon_points.split(' ')[0].split(',')
        x_min = float(x_min)
        y_min = float(y_min)
        y_max = float(poligon_points.split(' ')[1].split(',')[1])
        EA_x_min = 99999999
        EA_x_max = -99999999
        EA_y_min = 99999999
        EA_y_max = -99999999
        for svgElement in dict_of_svg_xml[functionName]['svg']['g']['g']:
            parsed_yflowgen_element_dict = {'id': svgElement['title'], 'name': ''}
            if svgElement['@class'] == 'node':
                mergePointsCounter = 0
                # checks if this node is the entry point of function
                if 'ellipse' in svgElement.keys():
                    if 'text' in svgElement.keys():
                        if isinstance(svgElement['text'], list):
                            position_read_flag = False
                            for text_section in svgElement['text']:
                                if text_section['#text'] == 'START':
                                    parsed_yflowgen_element_dict['type'] = 'initial'
                                    parsed_yflowgen_element_dict['name'] = 'START'

                                    parsed_yflowgen_element_dict['stroke'] = get_BGR_from_RBG(svgElement['ellipse']['@stroke'])
                                    parsed_yflowgen_element_dict['fill'] = get_BGR_from_RBG(svgElement['ellipse']['@fill'])

                                    parsed_yflowgen_element_dict['position'] = {}
                                    parsed_yflowgen_element_dict['position']['h'] = 20
                                    parsed_yflowgen_element_dict['position']['w'] = 20

                                    parsed_yflowgen_element_dict['position']['x'] = ((float(text_section['@x']) - x_min) * yflowgen_x_positions_multiplier)
                                    parsed_yflowgen_element_dict['position']['y'] = (-1 * (y_max - (float(text_section['@y']) - y_min)) * yflowgen_y_positions_multiplier) \
                                                                                    + 17 + (19 * (len(svgElement['text']) - 1)) - 30

                                    parsed_yflowgen_element_dict['position']['x_corner'] = parsed_yflowgen_element_dict['position']['x'] \
                                                                                    - (parsed_yflowgen_element_dict['position']['w'] / 2)

                                    parsed_yflowgen_element_dict['position']['y_corner'] = parsed_yflowgen_element_dict['position']['y'] \
                                                                                    - (parsed_yflowgen_element_dict['position']['h'] / 2)

                                    parsed_yflowgen_function_elm_list.append(parsed_yflowgen_element_dict)
                                    node_positions_dict[svgElement['title']] = parsed_yflowgen_element_dict['position']
                                    parsed_yflowgen_element_dict = {'id': 'none', 'name': ''}
                                else:
                                    parsed_yflowgen_element_dict['type'] = 'initialFunction'
                                    parsed_yflowgen_element_dict['name'] += text_section['#text'] + ' '
                                    parsed_yflowgen_element_dict['stroke'] = get_BGR_from_RBG(svgElement['ellipse']['@stroke'])
                                    parsed_yflowgen_element_dict['fill'] = get_BGR_from_RBG(svgElement['ellipse']['@fill'])

                                    parsed_yflowgen_element_dict['position'] = {}
                                    parsed_yflowgen_element_dict['position']['h'] = float(svgElement['ellipse']['@ry']) * 2 * yflowgen_dimensions_multiplier * 0.6
                                    parsed_yflowgen_element_dict['position']['w'] = float(svgElement['ellipse']['@rx']) * 2 * yflowgen_dimensions_multiplier * 0.7

                                    parsed_yflowgen_element_dict['position']['x'] = ((float(text_section['@x']) - x_min) * yflowgen_x_positions_multiplier)

                                    parsed_yflowgen_element_dict['position']['y'] = (-1 * (y_max - (float(text_section['@y']) - y_min)) * yflowgen_y_positions_multiplier) \
                                                                                    - 17 - (5 * (len(svgElement['text']) - 1)) - 30

                                    parsed_yflowgen_element_dict['position']['x_corner'] = parsed_yflowgen_element_dict['position']['x'] \
                                                                                    - (parsed_yflowgen_element_dict['position']['w'] / 2)

                                    parsed_yflowgen_element_dict['position']['y_corner'] = parsed_yflowgen_element_dict['position']['y'] \
                                                                                    - (parsed_yflowgen_element_dict['position']['h'] / 2)

                                    if parsed_yflowgen_element_dict['position']['x_corner'] < EA_x_min:
                                        EA_x_min = parsed_yflowgen_element_dict['position']['x_corner']
                                    if parsed_yflowgen_element_dict['position']['y_corner'] < EA_y_min:
                                        EA_y_min = parsed_yflowgen_element_dict['position']['y_corner']
                                    if (parsed_yflowgen_element_dict['position']['x_corner'] + parsed_yflowgen_element_dict['position']['w']) > EA_x_max:
                                        EA_x_max = parsed_yflowgen_element_dict['position']['x_corner'] + parsed_yflowgen_element_dict['position']['w']
                                    if (parsed_yflowgen_element_dict['position']['y_corner'] + parsed_yflowgen_element_dict['position']['h']) > EA_y_max:
                                        EA_y_max = parsed_yflowgen_element_dict['position']['y_corner'] + parsed_yflowgen_element_dict['position']['h']

                            parsed_yflowgen_function_elm_list.append(parsed_yflowgen_element_dict)
                                # else:
                                #     print('WARN -> In diagram of function "' + functionName + '" the start point was not parsed correctly!')
                        else:
                            parsed_yflowgen_element_dict['type'] = 'end'
                            parsed_yflowgen_element_dict['name'] = 'END'
                            parsed_yflowgen_element_dict['stroke'] = get_BGR_from_RBG(svgElement['ellipse']['@stroke'])
                            parsed_yflowgen_element_dict['fill'] = get_BGR_from_RBG(svgElement['ellipse']['@fill'])
                            parsed_yflowgen_element_dict['position'] = {}
                            parsed_yflowgen_element_dict['position']['h'] = 20
                            parsed_yflowgen_element_dict['position']['w'] = 20

                            parsed_yflowgen_element_dict['position']['x'] = ((float(svgElement['text']['@x']) - x_min) * yflowgen_x_positions_multiplier)
                            parsed_yflowgen_element_dict['position']['y'] = (-1 * (y_max - (float(svgElement['text']['@y']) - y_min)) * yflowgen_y_positions_multiplier)

                            parsed_yflowgen_element_dict['position']['x_corner'] = parsed_yflowgen_element_dict['position']['x'] \
                                                                                - (parsed_yflowgen_element_dict['position']['w'] / 2)
                            parsed_yflowgen_element_dict['position']['y_corner'] = parsed_yflowgen_element_dict['position']['y'] \
                                                                                - (parsed_yflowgen_element_dict['position']['h'] / 2)

                            parsed_yflowgen_function_elm_list.append(parsed_yflowgen_element_dict)
                            node_positions_dict[svgElement['title']] = parsed_yflowgen_element_dict['position']
                    else:
                        mergePointsCounter += 1
                        parsed_yflowgen_element_dict['type'] = 'mergePoint'
                        # parsed_yflowgen_element_dict['name'] = 'm' + str(mergePointsCounter)
                        parsed_yflowgen_element_dict['name'] = ''
                        parsed_yflowgen_element_dict['stroke'] = 0x010101
                        parsed_yflowgen_element_dict['fill'] = 0x010101
                        parsed_yflowgen_element_dict['position'] = {}
                        # parsed_yflowgen_element_dict['position']['h'] = float(svgElement['ellipse']['@ry']) * 2 * yflowgen_dimensions_multiplier
                        # parsed_yflowgen_element_dict['position']['w'] = float(svgElement['ellipse']['@rx']) * 2 * yflowgen_dimensions_multiplier
                        parsed_yflowgen_element_dict['position']['h'] = 5
                        parsed_yflowgen_element_dict['position']['w'] = 5

                        parsed_yflowgen_element_dict['position']['x'] = ((float(svgElement['ellipse']['@cx']) - x_min) * yflowgen_x_positions_multiplier)
                        parsed_yflowgen_element_dict['position']['y'] = (-1 * (y_max - (float(svgElement['ellipse']['@cy']) - y_min)) * yflowgen_y_positions_multiplier)

                        parsed_yflowgen_element_dict['position']['x_corner'] = parsed_yflowgen_element_dict['position']['x'] \
                                                                                - (parsed_yflowgen_element_dict['position']['w'] / 2)
                        parsed_yflowgen_element_dict['position']['y_corner'] = parsed_yflowgen_element_dict['position']['y'] \
                                                                                - (parsed_yflowgen_element_dict['position']['h'] / 2)

                        parsed_yflowgen_function_elm_list.append(parsed_yflowgen_element_dict)
                        node_positions_dict[svgElement['title']] = parsed_yflowgen_element_dict['position']
                elif 'polygon' in svgElement.keys():
                    parsed_yflowgen_element_dict['position'] = {}
                    xw_max = 0
                    xw_min = 0
                    yh_max = 0
                    yh_min = 0
                    polygon_points = svgElement['polygon']['@points'].split(' ')
                    for idx, poligonPonit in enumerate(polygon_points):
                        xw = float(poligonPonit.split(',')[0])
                        yh = float(poligonPonit.split(',')[1])
                        if idx == 0:
                            xw_min = xw
                            xw_max = xw
                            yh_min = yh
                            yh_max = yh
                        else:
                            if xw < xw_min:
                                xw_min = xw
                            if xw > xw_max:
                                xw_max = xw
                            if yh < yh_min:
                                yh_min = yh
                            if yh > yh_max:
                                yh_max = yh

                    parsed_yflowgen_element_dict['position']['h'] = (yh_max - yh_min) * yflowgen_dimensions_multiplier * 1.4
                    parsed_yflowgen_element_dict['position']['w'] = (xw_max - xw_min) * yflowgen_dimensions_multiplier

                    if 'polyline' in svgElement.keys():
                        parsed_yflowgen_element_dict['type'] = 'codeFunctionCall'
                    else:
                        polygon_points = svgElement['polygon']['@points'].split(' ')
                        if polygon_points[0].split(',')[1].split('.')[0] == polygon_points[1].split(',')[1].split('.')[0]:
                            if polygon_points[1].split(',')[0].split('.')[0] == polygon_points[2].split(',')[0].split('.')[0]:
                                parsed_yflowgen_element_dict['type'] = 'code'
                            elif polygon_points[1].split(',')[0] < polygon_points[2].split(',')[0]:
                                parsed_yflowgen_element_dict['type'] = 'endLoop'
                            elif polygon_points[1].split(',')[0] > polygon_points[2].split(',')[0]:
                                parsed_yflowgen_element_dict['type'] = 'startLoop'
                        elif (polygon_points[0].split(',')[0].split('.')[0] == polygon_points[2].split(',')[0].split('.')[0] \
                              and polygon_points[1].split(',')[1].split('.')[0] == polygon_points[3].split(',')[1].split('.')[0]):
                            parsed_yflowgen_element_dict['type'] = 'decision'
                            parsed_yflowgen_element_dict['position']['w'] = parsed_yflowgen_element_dict['position']['w'] * 0.85

                    parsed_yflowgen_element_dict['stroke'] = get_BGR_from_RBG(svgElement['polygon']['@stroke'])
                    parsed_yflowgen_element_dict['fill'] = get_BGR_from_RBG(svgElement['polygon']['@fill'])

                    # asta e doar carpeala++
                    if 'text' not in svgElement.keys():
                        parsed_yflowgen_element_dict['type'] = 'endLoop'

                    if parsed_yflowgen_element_dict['type'] != 'endLoop':
                        if isinstance(svgElement['text'], list):
                            parsed_yflowgen_element_dict['name'] = ''
                            yPositions_sum = 0
                            for elm in svgElement['text']:
                                if '#text' in elm:
                                    parsed_yflowgen_element_dict['name'] += elm['#text'] + '\n'
                                    yPositions_sum += float(elm['@y'])

                            parsed_yflowgen_element_dict['position']['y'] = (-1 * (y_max - (yPositions_sum / len(svgElement['text']) - y_min)) * yflowgen_y_positions_multiplier)
                            parsed_yflowgen_element_dict['position']['x'] = ((float(svgElement['text'][0]['@x']) - x_min) * yflowgen_x_positions_multiplier)

                            parsed_yflowgen_element_dict['position']['y_corner'] = parsed_yflowgen_element_dict['position']['y'] \
                                                                                - (parsed_yflowgen_element_dict['position']['h'] / 2)
                            parsed_yflowgen_element_dict['position']['x_corner'] = parsed_yflowgen_element_dict['position']['x'] \
                                                                                - (parsed_yflowgen_element_dict['position']['w'] / 2)

                            node_positions_dict[svgElement['title']] = parsed_yflowgen_element_dict['position']
                        else:
                            parsed_yflowgen_element_dict['name'] = svgElement['text']['#text']

                            parsed_yflowgen_element_dict['position']['y'] = -1 * (y_max - (float(svgElement['text']['@y']) - y_min)) * yflowgen_y_positions_multiplier
                            parsed_yflowgen_element_dict['position']['x'] = (float(svgElement['text']['@x']) - x_min) * yflowgen_x_positions_multiplier

                            parsed_yflowgen_element_dict['position']['y_corner'] = parsed_yflowgen_element_dict['position']['y'] \
                                                                                - (parsed_yflowgen_element_dict['position']['h'] / 2)
                            parsed_yflowgen_element_dict['position']['x_corner'] = parsed_yflowgen_element_dict['position']['x'] \
                                                                                - (parsed_yflowgen_element_dict['position']['w'] / 2)
                            node_positions_dict[svgElement['title']] = parsed_yflowgen_element_dict['position']
                    else:
                        if 'text' in svgElement.keys():
                            if isinstance(svgElement['text'], list):
                                parsed_yflowgen_element_dict['name'] = ''
                                yPositions_sum = 0
                                for elm in svgElement['text']:
                                    parsed_yflowgen_element_dict['name'] += elm['#text'] + ' '
                                    yPositions_sum += float(elm['@y'])
                            else:
                                parsed_yflowgen_element_dict['name'] = svgElement['text']['#text']
                        else:
                            parsed_yflowgen_element_dict['name'] = 'end'
                        xSum = 0
                        ySum = 0
                        for idx, point in enumerate(polygon_points):
                            if idx > 0:
                                xSum += float(point.split(',')[0])
                                ySum += float(point.split(',')[1])

                        parsed_yflowgen_element_dict['position']['x'] = ((xSum / 4) - x_min) * yflowgen_x_positions_multiplier
                        parsed_yflowgen_element_dict['position']['y'] = -1 * (y_max - ((ySum / 4) - y_min)) * yflowgen_y_positions_multiplier

                        parsed_yflowgen_element_dict['position']['x_corner'] = parsed_yflowgen_element_dict['position']['x'] \
                                                                                - (parsed_yflowgen_element_dict['position']['w'] / 2)
                        parsed_yflowgen_element_dict['position']['y_corner'] = parsed_yflowgen_element_dict['position']['y'] \
                                                                                - (parsed_yflowgen_element_dict['position']['h'] / 2)

                        node_positions_dict[svgElement['title']] = parsed_yflowgen_element_dict['position']
                    parsed_yflowgen_function_elm_list.append(parsed_yflowgen_element_dict)

                    if parsed_yflowgen_element_dict['position']['x_corner'] < EA_x_min:
                        EA_x_min = parsed_yflowgen_element_dict['position']['x_corner']
                    if parsed_yflowgen_element_dict['position']['y_corner'] < EA_y_min:
                        EA_y_min = parsed_yflowgen_element_dict['position']['y_corner']
                    if (parsed_yflowgen_element_dict['position']['x_corner'] + parsed_yflowgen_element_dict['position']['w']) > EA_x_max:
                        EA_x_max = parsed_yflowgen_element_dict['position']['x_corner'] + parsed_yflowgen_element_dict['position']['w']
                    if (parsed_yflowgen_element_dict['position']['y_corner'] + parsed_yflowgen_element_dict['position']['h']) > EA_y_max:
                        EA_y_max = parsed_yflowgen_element_dict['position']['y_corner'] + parsed_yflowgen_element_dict['position']['h']

            elif svgElement['@class'] == 'edge':
                parsed_yflowgen_element_dict['type'] = 'link'
                if 'text' in svgElement.keys():
                    parsed_yflowgen_element_dict['label'] = svgElement['text']['#text']
                else:
                    parsed_yflowgen_element_dict['label'] = ''
                list_of_path_points = svgElement['path']['@d'].replace('M', '').replace('C', ' ').split(' ')

                source_node = svgElement['title'].split('->')[0]
                target_node = svgElement['title'].split('->')[1]
                parsed_yflowgen_element_dict['source_node'] = source_node
                parsed_yflowgen_element_dict['target_node'] = target_node
                # start_point = str(node_positions_dict[source_node]['x']) + ',' + str(node_positions_dict[source_node]['y'])
                list_of_points = []
                for point in list_of_path_points:
                    x = (float(point.split(',')[0]) - x_min) * yflowgen_x_positions_multiplier
                    y = -1 * (y_max - (float(point.split(',')[1]) - y_min)) * yflowgen_y_positions_multiplier
                    newPoint = str(x) + ',' + str(y)
                    list_of_points.append(newPoint)
                # end_point = str(node_positions_dict[target_node]['x']) + ',' + str(node_positions_dict[target_node]['y'])
                # list_of_points.append(end_point)
                parsed_yflowgen_element_dict['path'] = list_of_points
                parsed_yflowgen_function_elm_list.append(parsed_yflowgen_element_dict)

        parsed_yflowgen_dict[functionName] = {'elements': parsed_yflowgen_function_elm_list, 'x_min': EA_x_min, 'y_min': EA_y_min, 'x_max': EA_x_max, 'y_max': EA_y_max}
    return parsed_yflowgen_dict
