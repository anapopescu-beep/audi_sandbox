1. Example Description
    This application demonstrates the usage of the Adc Driver by Interrupt Transfer.
    The application includes a S32DS project that configures the Mcu, Platform and Adc drivers.
    If all returned status and converted results are correct, the bStatus variable remains "TRUE" until end of the example.

    1.1 The application software functionality
        - Mcu_Init, Mcu_InitClock, Mcu_DistributePllClock, Mcu_SetMode
                Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
                The clock configuration that is used will enable and use the PLL as source clock.
        - Platform_Init
                Initialize the interrupt controller and to apply the interrupt configuration according to the Platform configuration.
        - Platform_InstallIrqHandler
        - Platform_SetIrq
                Install and enable the ISR for the ADC Hardware Instance 0.
        - Adc_Init
                Initialize the Adc Driver: Initialize the ADC Hardware Instance 0.
        - Adc_Calibrate
                Enable calibration functionality of ADC Hardware Instance 0.
        - Adc_SetupResultBuffer
                Initializes Adc driver with the group specific result buffer start address (ResultBuffer) where the
                conversion results will be stored.
        - Adc_EnableGroupNotification
                Enables the notification mechanism for the requested ADC Channel group.
        - Adc_StartGroupConversion
                Starts the conversion of all channels of the requested ADC Channel group.
        - Adc_ReadGroup
                Reads the group conversion result of the last completed conversion round of the
                requested group and stores the channel values starting at the AdcReadGroupBuffer address.
        - Adc_DeInit
                Returns all ADC HW Units to a state comparable to their power on reset state.

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - S32K118EVB2-Q048 PCB 47530 RevX1 SCH RevA1
        2.1.2 Connections
            - There are no specific connections needed for ADC pins
            - Jumper J10: pin 2 and pin 3 must be connected to have 5v voltage reference
        2.1.3 Debugger
            - PnE debugger on board is used.
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
            The project should now be copied into you current workspace.

3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse.
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.3 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:

        Configuration Name                         |     Description
        -------------------------------------------------------------------------------------------
        Adc_example_S32K118_Debug_FLASH_PNE        | Debug the FLASH configuration using PnE Debugger

        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.
