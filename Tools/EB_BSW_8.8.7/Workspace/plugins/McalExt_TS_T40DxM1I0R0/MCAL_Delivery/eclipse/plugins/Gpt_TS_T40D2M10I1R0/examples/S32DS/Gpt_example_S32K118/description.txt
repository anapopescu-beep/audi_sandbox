1. Example Description
    The application includes a Design Studio project, that uses predefined configurations for the MCAL (Dio, Gpt, Mcu, Platform, Port) and Drivers(osif).
    The application uses the IP layer functionality to trigger a timer interrupt. Notification function increase a count variable by 1 and toggle state pin LED on board.
    1.1 The application software functionality
            - Port_Init
                    Initialize the pins used by the application using the Port driver.
            - Mcu_Init, Mcu_InitClock, Mcu_SetMode
                    Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
            - Platform_Init
                    Initialize the interrupt controller and to apply the interrupt configuration according to the Platform configuration.
            - Platform_InstallIrqHandler
                    Install the ISR for the LPIT timer used by the Gpt driver
                    Install the ISR for the FTM timer used by the Gpt driver
            - Gpt_Init, Gpt_StartTimer, Gpt_EnableNotification
                    Initialize the Gpt driver, to start the selected timer and to enable its notification that will be used for periodically blinking an LED
            - Run the while(1) loop and based on the Gpt notification use the Dio_WriteChannel of the Dio driver to toggle the pin connected to the LED
            
2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - S32K118EVB2-Q048 PCB 47530 RevX1 SCH RevA1
        2.2.2 Connections
            A wire connection is required:
            Set-up the jumper J109 closed the slot 2-3 and also for the jumper J110 closed the slot 2-3. The example will toggle RGB LED PTD15 and PTD16
        2.2.3 Debugger
            PnE debugger is used
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select "Gpt_example_S32K118". Then click on "Finish".
            The project should now be copied into you current workspace.

3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse. 
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.2 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:
        
        Configuration Name                  Description
        -------------------------------     -----------------------
        $(example)_debug_flash_pemicro      Debug the FLASH configuration using PEmicro probe
        
        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.