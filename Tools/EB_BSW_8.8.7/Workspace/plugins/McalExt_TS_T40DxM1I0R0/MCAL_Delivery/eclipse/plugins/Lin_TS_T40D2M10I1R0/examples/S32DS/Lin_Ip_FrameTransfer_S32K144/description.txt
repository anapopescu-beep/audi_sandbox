1. Example Description
    This is a simple application which shows a communication between a Lin Master and a Lin Slave.
    1.1 The aplication software functionality
        In this example a complete LIN frame(header + response) is sent from Master and it is received by the Slave.
        This example can be run using an external lin transceiver. A possible solution is to have a second   S32K144EVB-Q176 board
        and to use its transceiver. The following instructions will describe this approach.

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            S32K144EVB-Q100 29248 SCH RevC 
        2.1.2 Connections
            This example can be run between a FLEXIO MASTER channel and a FLEXIO SLAVE channel.
            In order to have this communication the following connections must be done:
                
                PTD2 (J6.3) Board1 - PTD6 (J5.18) Board1 
                PTD3 (J6.4) Board1 - PTD7 (J5.16) Board1
                
                PTD8 (J6.5) Board1 - PTD6 (J5.18) Board2
                PTD9 (J6.7) Board1 - PTD7 (J5.16) Board2
                
                Connect Board 2 K144 J3.8 - PTE9 to J3.9 - P5V0 to enable tranceiver
                LIN1 (J11.1) Board1 - LIN1 (J11.1) Board2

                GND (J11.4) Board1 - GND (J11.4) Board2

            The main.c contains all possible combinations of Master-Slave communications between the modules.
            In order to have a FLEXIO MASTER - FLEXIO SLAVE communication, please comment the #define LPUART_LIN_MASTER and #define LPUART_LIN_SLAVE macros in the
            beginning part of the file.
                    #define FLEXIO_LIN_MASTER
                    #define FLEXIO_LIN_SLAVE
                    //#define LPUART_LIN_MASTER
                    //#define LPUART_LIN_SLAVE

            For a LPUART MASTER channel to LPUART SLAVE channel communication, the following connections are required.
                PTA8 (J6.17) Board1 - PTD6 (J5.18) Board1 
                PTA9 (J6.19) Board1 - PTD7 (J5.16) Board1

                PTC8 (J6.9) Board1 - PTD6 (J5.18) Board2
                PTC9 (J6.11) Board1 - PTD7 (J5.16) Board2
                
                Connect Board 2 K144 J3.8 - PTE9 to J3.9 - P5V0 to enable tranceiver
                LIN1 (J11.1) Board1 - LIN1 (J11.1) Board2
                GND (J11.4) Board1 - GND (J11.4) Board2

            In order to have a LPUART MASTER - LPUART SLAVE communication, please comment the #define FLEXIO_LIN_MASTER and #define FLEXIO_LIN_SLAVE macros in the
            beginning part of the file.
                    //#define FLEXIO_LIN_MASTER
                    //#define FLEXIO_LIN_SLAVE
                    #define LPUART_LIN_MASTER
                    #define LPUART_LIN_SLAVE
        2.1.3 Debugger
            The debugger must be connected to JTAG Cortex Debug connector.
    2.2 Software installation
        Make sure that all RTD plugins are already installed in the S32DS plugins directory
         
3. Generating, building and running the example application
    3.1 Importing the project into the workspace
        After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select "Lin_Ip_FrameTransfer_S32K144". Then click on "Finish".
        The project should now be copied into you current workspace.
        Wait for the S32 Configuration was initialized and ready.
    3.2 Generating the S32 configuration
        The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
        The initial configuration will have the same settings as the default example settings.
        Right click on the current project, then click "S32 Configuration Tool" choose "Open Peripherals".
        Pay attention to any error and warning message. If any configured value is invalid, they will be shown for user.
        Make the desired changes (if any) then click "Update Code".
    3.3 Compiling the application
        Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse. 
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.4 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:
        
        Configuration Name                  Description
        -------------------------------     -----------------------
        $Lin_Ip_FrameTransfer_S32K144_debug_flash_pemicro      Debug the FLASH configuration using PEmicro probe
        
        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.