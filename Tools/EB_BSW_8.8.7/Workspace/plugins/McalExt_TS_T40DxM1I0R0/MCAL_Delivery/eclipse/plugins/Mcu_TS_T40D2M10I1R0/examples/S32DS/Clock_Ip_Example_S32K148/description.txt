1. Example Description 
    This application demonstrates the usage of the Clock_Ip Driver.
    The application include a S32DS project that configure Clock_Ip driver.
    1.1 The application software functionality:
        - Clock_Ip_Init, Clock_Ip_GetClockFrequency, Clock_Ip_GetPllStatus, Clock_Ip_DistributePll.
            Initialize the clock sources, the clock tree and configure the clock gating of peripheral
            Config CLKOUT0_CLK frequency to 48MHz and quit application if frequency return of CLKOUT0_CLK is correct, the other keep application running in loop.
2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - S32K148EVB-Q176 29644 PCB RevX1 SCH RevB
        2.1.2 Connections
            - N/A
        2.1.3 Debugger
            The application can be debugged using the onboard OpenSDA debugger
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
            The project should now be copied into you current workspace.
         
3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in S32 Design Studio. 
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.3 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:
        
        Configuration Name                             Description
        --------------------------------------- --     -----------------------
        Clock_Ip_Example_S32K148_Debug_FLASH_PNE      Debug the FLASH configuration using PnE Debugger
        
        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.