1. Example Description
    This application demonstrates the usage of the MPU IP
    The application includes an S32DS project that configures the MPU driver
    1.1 The application software functionality
        Example uses Mpu_Ip_init to initialize regions for the MPU and uses DMA to perform data transfers from the source array to the destination array.               
        Depending on the permission of MPU, the data transfer is successful or not.
        The steps are as follows:
            - Declare variables
            - Call Clock_Ip_Init to initialize clock
            - Call Dma_Ip_Init to initialize DMA
            - Call Mpu_Ip_Init to initialize 3 regions, with 3 regions configured as follows:
                - Region 0: Disable DMA (not allow to read/write in user mode/supervisor mode)
                - Region 1: Only-read permission for DMA (allow to read in user mode/supervisor mode)
                - Region 2: Only-write permission for DMA (allow to write in user mode/supervisor mode)
            - Perform DMA transfer.
            - Verification Point: DMA transfer successfully
            - Call Mpu_Ip_EnableRegion to disable 2 regions, DMA has not read/write permission
            - Perform DMA transfer.
            - Verification Point: DMA transfer failed
            - Call Mpu_Ip_GetErrorDetails to get error information
            - Verification Point: check correct error information
            - Call Mpu_Ip_EnableRegion to enable region 1, DMA has only read permission
            - Perform DMA transfer.
            - Verification Point: DMA transfer failed
            - Call Mpu_Ip_GetErrorDetails to get error information
            - Verification Point: check correct error information
            - Call Mpu_Ip_EnableRegion to enable region 2, DMA has read/write permission
            - Perform DMA transfer.
            - Verification Point: DMA transfer successfully
            - Exit example
2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - S32K118EVB2-Q048 PCB 47530 RevX1 SCH RevA1
        2.1.2 Connections
            - There are no specific connections needed for MPU module.
        2.1.3 Debugger
            - PnE debugger on board is used.
    2.2 Software installation
        - Make sure that all RTD plugins are already installed in the S32DS plugins directory
3. How to run
    3.1 Importing the project into the workspace
        After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select "Mpu_Ip_Example_S32K118". Then click on "Finish".
        The project should now be copied into your current workspace.
        Wait for the S32 Configuration was initialized and ready.
    3.2 Generating the S32 configuration
        The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
        The initial configuration will have the same settings as the default example settings.
        Right click on the current project, then click "S32 Configuration Tool" choose "Open Peripherals".
        Pay attention to any error and warning message. If any configured value is invalid, they will be shown for user.
        Make the desired changes (if any) then click "Update Code".
    3.3 Building the project
                Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse.
                Use Project > Build to build the project.
                Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file should be created.
    3.4 Running the project
                Go to Run and select Debug Configurations. There will be a debug configuration for this project:

                Configuration Name                  Description
                -------------------------------     -----------------------
                $(example)_debug_flash_pemicro      Debug the FLASH configuration using PEmicro probe

                Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
                Use the controls to control the program flow.