1. Example Description
    This application demonstrates the usage of a subset of Real Time Drivers that are included in this code drop. It is not part of the production code deliverables.
    On the example, the Flexio hardware instance is used as a master and using synchronous method. And the slave, over Lpspi, uses a-synchronous method.

    1.1 The aplication software functionality
            - Spi_Init
                    Initialization of spi physical units which are configured on SpiPhyUnit tab of configuration tools.
            - Spi_SetupEB
                    Setting up external buffers to transmission and reception of the master.
            - Spi_WriteIB
                    Writing slave data transmission to internal buffer.
            - Spi_SetAsyncMode
                    Selecting polling or interrupt mode of asynchronous transfers after that.
            - Spi_AsyncTransmit
                    The slave prepares transfer by asynchronous transfer method.
            - Spi_SyncTransmit
                    The master starts transfer with slave by synchronous transfer.
            - Spi_GetSequenceResult
                    Get status of the slave sequence to make sure that the transfer completed.
            - Spi_ReadIB
                    Reading slave data reception from internal buffer.

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - S32K144WEVB-Q064

        2.1.2 Connections
            -------------------------------------------------------
                            |              S32K144WEVB-Q064
            PIN FUNCTION    |--------------------------------------
                            | MASTER(FLEXIO_SPI_0) | SLAVE(LPSPI_0)
            ----------------|--------------------------------------
                CLK         |     J5.4  (PTA0)     | J2.6 (PTB2)
                MISO        |     J2.1  (PTD1)     | J2.4 (PTB4)
                MOSI        |     J2.2  (PTD0)     | J2.5 (PTB3)
                CS0         |     J5.3  (PTA1)     | J2.3 (PTB5)
            -------------------------------------------------------    
            Connecting the same name pins of master and slave together

        2.1.3 Debugger
            PNE Debugger (optional, users can use Open SDA).

    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select "Spi_Transfer_S32K144W". Then click on "Finish".
            The project should now be copied into you current workspace.

3. Building the example application
    3.1 Generation the code by switch to Peripherals/Pin/Clock tools and click the button "Update Code"
    3.2 Compiling the application
        Select the configuration to be built: RAM (Debug_RAM), or FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse. 
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, Spi_Transfer_S32K144W.elf binary file should be created.
    3.3 Running the application on the board in one of two ways below:
        3.3.1 To execute the example application load the executable file to the evaluation board using the Lauterbach debugger and the s32k1xx.cmm script.
        Open the cmm script in a text editor and replace the following strings:
            - __TARGET_MEMORY - replace with RAM (for RAM configuration), or FLASH (for FLASH configuration)
            - __PATH_TO_ELF - replace with the path to the elf binary files built with S32 DS
        Run this script using T32 Lauterbach debugger after making the changes.
        3.3.2 Click button "Run" or "Debug" on S32 Design Studio.