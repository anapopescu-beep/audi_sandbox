1. Example Description
    This is a simple application which shows the usage of Uart driver.
    1.1 The application software functionality
            - Port_Init
                    Initialize the pins used by the application using the Port driver.
            - Mcu_Init, Mcu_InitClock, Mcu_SetMode
                    Initialize the clock sources for project.
            - Mcl_Init
                    Initialize the Mcl module for Flexio common part.
            - Platform_Init
              Platform_InstallIrqHandler
                    Install the ISR for the Uart
            - Uart_Init
                    Initialize the Uart driver
            - Uart_Deinit
                    Deinitialize the Uart driver
            - Uart_AsyncSend
                    Send Uart data
            - Uart_AsyncReceive
                    Receive Uart data
            - Uart_GetStatus
                    Get status of Uart
            - Uart_Deinit
                    Uninitialize the Uart driver
            - Mcl_Deinit
                    Uninitialize the Mcl driver
    1.2 The application description
            - The first welcome message is sent via UART: "Hello, This message is sent via Uart!"
            - The second welcome message is sent via UART: "Have a nice day!"
            - User need to check return status of Send_Data() function for verifying example.

2. Installation steps
    2.1 Hardware installation
        2.1.1 Hardware preparation
            - S32K118EVB2-Q048 PCB 47530 RevX1 SCH RevA1
            - 1 microUSB type B cable
            - 1 Personal Computer
            - 1 S32Debugger (PE micro debugger)
        2.2.2 Connections
            - It uses Lpuart instance 0, comunicates with Flexio instance 0 channel 0 for Rx and channel 1 for Tx (connect PTB1(J3.4) - PTD2(J2.2) and PTC2(J1.5) - PTE5(J3.12))
        2.2.3 Debugger
            - Connect PE micro debugger to the board
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
            The project should now be copied into you current workspace.

3. Generating, building and running the example application
    3.1 Importing the project into the workspace
        After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
        The project should now be copied into you current workspace.
        Wait for the S32 Configuration was initialized and ready.
    3.2 Generating the S32 configuration
        The example will run without an active configuration, however if any changes are required, a configuration needs to be generated.
        The initial configuration will have the same settings as the default example settings.
        Right click on the current project, then click "S32 Configuration Tool" choose "Open Peripherals".
        Pay attention to any error and warning message. If any configured value is invalid, they will be shown for user.
        Make the desired changes (if any) then click "Update Code".
    3.3 Building the project
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, Uart_Example_[Derivative].elf binary file
        should be created.
    3.4 Running the application on the board in one of two ways below:
        3.4.1 To execute the example application load the executable file to the evaluation board using the Lauterbach debugger and the s32k1xx.cmm script.
        Open the cmm script in a text editor and replace the following strings:
            - __TARGET_MEMORY - replace with FLASH (for FLASH configuration)
            - __PATH_TO_ELF - replace with the path to the elf binary files built with S32 DS
        Run this script using T32 Lauterbach debugger after making the changes.
        3.4.2 Click button "Run" or "Debug" on S32 Design Studio (Using PE micro debugger).