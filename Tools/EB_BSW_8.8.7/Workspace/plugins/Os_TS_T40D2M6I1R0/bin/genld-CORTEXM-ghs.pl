#!/usr/bin/perl -w
#
# genld-ARM-ghs.pl - generate ARM Greenhills linker script
#
# $Id: genld-CORTEXM-ghs.pl 1.1 2023/04/18 07:06:15CEST Dan Dustinta (dan.dustinta) in_work  $
#
# Usage:
# genld-ARM-ghs.pl outfile sysname RAM|ROM includefile
#                  [-app|-task|-isr name objfile [...]] ...
#
# System, application and file names cannot contain spaces.
#
# Copyright Elektrobit Automotive GmbH
# All rights exclusively reserved for Elektrobit Automotive GmbH,
# unless expressly agreed to otherwise.
#

print STDERR "Usage: $0 outfile system-name ramorflash board-script-file [app-spec ...]\n" and die
	if ( !defined $ARGV[1] );

$outname = $ARGV[0];	# name of generated linker script
$sysname = $ARGV[1];	# system name (ARM)
# $ARGV[2]: RAM or ROM, unused here.
$boardLinkerScript = $ARGV[3];	# memory template

my @stacks;			# Stack section names
my @stacksizes;		# Stack sizes
my @appnames;		# Application/task names.
my @objtypes;		# Object types (APP or TASK).
my @first;			# First file in each application.
my @last;			# Last file (+1) in each application.
my @files;			# File names.
my @objdescr;		# Object type names.
my @regionsizes;	# Memory region sizes for objects

# global section sizes
my $glbtextsize="0x0";
my $glbconstsize="0x0";
my $glbdatasize="0x0";

# Get the date
my ($mm, $hh, $DD, $MM, $YY) = (localtime(time))[1,2,3,4,5];

my $genyear = sprintf("%04d", ($YY+1900));
my $gendate = sprintf("%04d-%02d-%02d %02d:%02d", ($YY+1900), ($MM+1), $DD, $hh, $mm);


# Parse all the app-specs in the command line.
$i = 4;			# Runs through ARGV
$j = 0;			# Counts no. of applications
$k = 0;			# Counts total no. of files.
$s = 0;			# Counts total no. of stacks.
$newapp = 1;	# So we don't save on the first time.
$objtype = 0;	# APP, TASK or ISR; 0 is "invalid"
$APP = 1;
$TASK = 2;
$ISR = 3;
$objdescr[0] = "XXX";
$objdescr[$APP] = "Application";
$objdescr[$TASK] = "Task";
$objdescr[$ISR] = "ISR";

while ( defined $ARGV[$i] )
{
	if ( $ARGV[$i] eq "-glbtextsize" )
	{
		$i++;
		$glbtextsize=$ARGV[$i];
	}
	elsif ( $ARGV[$i] eq "-glbconstsize" )
	{
		$i++;
		$glbconstsize=$ARGV[$i];
	}
	elsif ( $ARGV[$i] eq "-glbdatasize" )
	{
		$i++;
		$glbdatasize=$ARGV[$i];
	}
	elsif ( $ARGV[$i] eq "-app" )
	{
		# Introducing a new app.
		# Set the last file of the previous object if not the first time
		if ( ! $newapp )
		{
			$last[$j] = $k;
			$j++;
		}
		$newapp = 1;
		$objtype = $APP;
	}
	elsif ( $ARGV[$i] eq "-stack" )
	{
		$i++;
		$stacks[$s]=$ARGV[$i];

		$i++;
		$stacksizes[$s]=$ARGV[$i];

		$s++;
	}
	elsif ( $ARGV[$i] eq "-task" )
	{
		# Introducing a new task.
		# Set the last file of the previous object if not the first time
		if ( ! $newapp )
		{
			$last[$j] = $k;
			$j++;
		}
		$newapp = 1;
		$objtype = $TASK;
	}
	elsif ( $ARGV[$i] eq "-isr" )
	{
		# Introducing a new ISR.
		# Set the last file of the previous object if not the first time
		if ( ! $newapp )
		{
			$last[$j] = $k;
			$j++;
		}
		$newapp = 1;
		$objtype = $ISR;
	}
	elsif ( $newapp )
	{
		$appname = $ARGV[$i];
		$newapp = 0;

		die "Don't know whether $appname is an APPLICATION, TASK or ISR!\n"
			if ( !( ($objtype == $APP) ||
					($objtype == $TASK) ||
					($objtype == $ISR) ) );

		# Save the app name in the array.
		$appnames[$j] = $appname;
		$objtypes[$j] = $objtype;

		# Save region sizes in the array.
		$i++;
		$regionsizes[$j] = $ARGV[$i];

		# Save the first file name for the app.
		$first[$j] = $k;
	}
	else
	{
		$file = $ARGV[$i];

		# Remove possible object-file suffixes.
		$file =~ s/\.o$//;
		$file =~ s/\.obj$//;

		# Save the file name in the array.
		$files[$k] = $file;
		$k++;
	}

	$i++;
}

if ( ! $newapp )
{
	$last[$j] = $k;
	$j++;
}

$n_apps = $j;

# Open board script file and read in
open(DATA, $boardLinkerScript)||die "can not open file '$boardLinkerScript': $!\n";
my @lines = <DATA>;
close(DATA);

# Now write the output file
open(OUTFILE, ">$outname") or die "Unable to open $outname for writing: $!\n";

print OUTFILE "/* Linker script for the $sysname system.\n";
print OUTFILE "**\n";
print OUTFILE "** GENERATED FILE: DO NOT EDIT\n";
print OUTFILE "** Generated by genld-ARM-ghs.pl on $gendate\n";
print OUTFILE "**\n";
print OUTFILE "** Work in progress:\n";
print OUTFILE "** This script doesn't yet support private data sections.\n";
print OUTFILE "** The MEMORY section should be in an include file.\n";
print OUTFILE "*/\n";

foreach $line (@lines)
{
	print OUTFILE "$line";
}

print OUTFILE "\n";
print OUTFILE "SECTIONS\n";
print OUTFILE "{\n";

print OUTFILE "	.ExceptionTable :\n";
print OUTFILE "	{\n";
print OUTFILE "		__EXCEPTION_TABLE_START = .;\n";
print OUTFILE "		*(ExceptionTable)\n";
print OUTFILE "		__EXCEPTION_TABLE_END = .;\n";
print OUTFILE "	} > EXCTABLE\n";
print OUTFILE "\n";

print OUTFILE "	.InterruptTable :\n";
print OUTFILE "	{\n";
print OUTFILE "		__INTERRUPT_TABLE_START = .;\n";
print OUTFILE "		*(InterruptTable)\n";
print OUTFILE "		__INTERRUPT_TABLE_END = .;\n";
print OUTFILE "	} > INTTABLE\n";
print OUTFILE "\n";

# text section
$align = "";
if ( $glbtextsize ne "0x0" )
{
	$align=" ALIGN($glbtextsize) ";
}
print OUTFILE "	.text $align :\n";
print OUTFILE "	{\n";
print OUTFILE "		*(.text)\n";
print OUTFILE "		*(.os_text)\n";
print OUTFILE "	} > FLASH\n";
print OUTFILE "\n";
print OUTFILE "	__GLBL_TEXT_END     = .;\n";
print OUTFILE "\n";

# constant data section
$align = "";
if ( $glbconstsize ne "0x0" )
{
	$align=" ALIGN($glbconstsize) ";
}
print OUTFILE "	.rodata $align :\n";
print OUTFILE "	{\n";
print OUTFILE "		*(.rodata)\n";
print OUTFILE "	} > FLASH\n";
print OUTFILE " __GLBL_RODATA_START = addr(.rodata);\n";
print OUTFILE "	__GLBL_RODATA_END = endaddr(.rodata);\n";
print OUTFILE "\n";
print OUTFILE "\n";
print OUTFILE "	__IDATSTART = .;\n";
$datastart = "__IDATSTART";

# STACKS

for ( $i = 0; $i < $s; $i++ )
{
	$align = "";
	# trusted APP => stack size is 0x0
	if ( $stacksizes[$i] eq "0x0" )
	{
		$align = " ALIGN(8) ";
	}
	else
	{
		$align = " ALIGN($stacksizes[$i]) ";
	}
	print OUTFILE "	.os_stack_$i $align :\n";
	print OUTFILE "	{\n";
	print OUTFILE "		\"*(.$stacks[$i])\"\n";
	print OUTFILE "	} > RAM\n";
}
print OUTFILE "\n";
print OUTFILE "\n";
print OUTFILE "\n";

# APPLICATIONS

for ( $i = 0; $i < $n_apps; $i++ )
{
	$appname = $appnames[$i];
	if ( $first[$i] >= $last[$i] )
	{
		print OUTFILE "	/* $objdescr[$objtypes[$i]]: $appname --- NO FILES */\n";
		print OUTFILE "	__DATA_$appname = 0;\n";
		print OUTFILE "	__DEND_$appname = 0;\n";
		print OUTFILE "	__IDAT_$appname = 0;\n";
		print OUTFILE "	__IEND_$appname = 0;\n";
	}
	else
	{
		$align = "";
		if ( $regionsizes[$i] ne "0x0" )
		{
			$align = " ALIGN($regionsizes[$i]) ";
		}
		print OUTFILE "	/* $objdescr[$objtypes[$i]]: $appname */\n";
		print OUTFILE "	.data_$appname $align: AT($datastart)\n";
		print OUTFILE "	{\n";
		print OUTFILE "		__DATA_$appname = .;\n";
		for ( $j = $first[$i]; $j < $last[$i]; $j++ )
		{
			$file = $files[$j];
			print OUTFILE "		\"$file.o(.data)\"\n";
		}
		print OUTFILE "	} > RAM\n";
		print OUTFILE "	.bss_$appname ALIGN(8):\n";
		print OUTFILE "	{\n";
		for ( $j = $first[$i]; $j < $last[$i]; $j++ )
		{
			$file = $files[$j];
			print OUTFILE "		\"$file.o(.bss)\"\n";
		}
		print OUTFILE "		__DEND_$appname = .;\n";
		print OUTFILE "	} > RAM\n";
		print OUTFILE "\n";
		print OUTFILE "	__IDAT_$appname = $datastart;\n";
		$datastart .= " + SIZEOF(.data_$appname)";
		print OUTFILE "	__IEND_$appname = $datastart;\n";
	}
}
print OUTFILE "\n";

$align = "";
if ( $glbdatasize ne "0x0" )
{
	$align = " ALIGN($glbdatasize) ";
}

print OUTFILE "	.data $align : AT($datastart)\n";
print OUTFILE "	{\n";
print OUTFILE "		__STARTDATA = .;\n";
print OUTFILE "		*(.data)\n";
print OUTFILE "	} > RAM\n";
print OUTFILE "	__ENDDATA = .;\n";

print OUTFILE "	.bss :\n";
print OUTFILE "	{\n";
print OUTFILE "		__STARTBSS = .;\n";
print OUTFILE "		*(.bss)\n";
print OUTFILE "	} > RAM\n";
print OUTFILE "	__ENDBSS = .;\n";
print OUTFILE "	__INITDATA = $datastart;\n";
print OUTFILE "\n";

print OUTFILE "	__GLBL_DATA_START   = __STARTDATA;\n";
print OUTFILE "	__GLBL_DATA_END     = __ENDBSS;\n";
print OUTFILE "\n";
print OUTFILE "\n";
print OUTFILE "	_BSS_START_  = __STARTBSS;\n";
print OUTFILE "	_BSS_END_    = __ENDBSS;\n";
print OUTFILE "	_DATA_START_ = __STARTDATA;\n";
print OUTFILE "	_DATA_END_   = __ENDDATA;\n";
print OUTFILE "	__GLBL_RODATA_SIZE  = __GLBL_RODATA_END - __GLBL_RODATA_START;\n";
print OUTFILE "\n";
print OUTFILE "\n";
print OUTFILE "\n";
print OUTFILE "	__GLBL_TEXT_START   = ADDR(FLASH);\n";
print OUTFILE "	__GLBL_RAM_START    = ADDR(RAM);\n";
print OUTFILE "	__GLBL_RAM_SIZE     = SIZEOF(RAM);\n";
print OUTFILE "	__GLBL_RAM_END      = __GLBL_RAM_START + __GLBL_RAM_SIZE;\n";
print OUTFILE "	__GLBL_TEXT_SIZE    = (__GLBL_TEXT_END - __GLBL_TEXT_START);\n";
print OUTFILE "	/* Initial stack pointer after reset */\n";
print OUTFILE "	__RESET_STACK       = __GLBL_RAM_END;\n";
print OUTFILE "}\n";
print OUTFILE "\n";

# Editor settings: DO NOT DELETE
# vi:set ts=4 sw=4 noet tw=100:
