/*
 * Linker script
 *
 * GENERATED FILE: DO NOT EDIT
 * Generated by C:\Projects\CheckOut\ACP-8.5.1\Tresos\plugins\Os_TS_T40D2M6I0R0/bin/genld-CORTEXM.pl on 2018-10-16 15:39
 */

/* board_flash-iar.ldscript
 *
 * Linker script memory definitions for IAR binutils.
 *
 * (c) Elektrobit Automotive GmbH
 *
 * $Id: board_flash-iar.ldscript 1.2.1.2 2022/09/01 06:52:41CEST Andrei Anca (andrei.anca) in_work  $
*/

/*	Memory types and sizes for S32K144:
 *	SRAM_L			= 0x8000;	32	KB	(Low-order, executable)
 *	SRAM_U			= 0x7000;	28	KB	(High-order, for data)
 *	FlexRAM			= 0x1000;	4	KB
 *	FLSH_PROG		= 0x80000;	512	KB
 *	FLSH_FlexNVM	= 0x10000;	64	KB
*/

/*	S32K144 memory is split into 2 regions:
 *	0x00000000 - 0x1FFFFFFF	:	Low-order addresses (access through the code bus)
 *	0x20000000 - 0xFFFFFFFF	:	High-order addresses (access through the system bus)
 *	All code should be placed to the low-order addresses
 *
 *	SRAM_L	lies in low-order address space (SRAM_L must end at 0x1FFFFFFF)
 *	SRAM_U	lies in high-order address space (SRAM_U must start at 0x20000000)
 *	SRAM_L and SRAM_U are contiguous!
*/

/* Declare the memory space Mem of 4 Gigabytes */
define memory Mem with size = 4G;

/* Define memory regions in memory space 'Mem' */
define region empty	= Mem:[from 0x00000000 size 0x0];		/* empty region					*/
define region reset	= Mem:[from 0x00000000 size 0x100];		/* reset-vector					*/
/* Gap @ 0x00000400:	                                   		 * reserved and not writable!	*/
define region exctable	= Mem:[from 0x00000800 size 0x400];	/* exception (+interrupt) table	*/
define region Flash_Rom	= Mem:[from 0x0000c00 size 0x700];	/* the rest of FLASH memory		*/
define region rom 	= Mem:[from 0x00001300 size 0x1ED00];	/* the rest of FLASH memory		*/
define region Flash_Ram	= Mem:[from 0x1FFF8000 size 0x700];	/* High-order RAM (system-bus)	*/
define region ram 	= Mem:[from 0x1FFF8700 size 0xE000];	/* High-order RAM (system-bus)	*/
define region noinit 	= Mem:[from 0x20006E00 size 0x100];	/* High-order RAM (system-bus)	*/


/* Definition of the 'reset_vector' block */
define block reset_vector with fixed order, alignment = 256
{
	section ".rodata" object "board_reset_vector.o",
	section ".rodata*" object "board_reset_vector.o",
	section .startup,
	section .startup.*,
};

keep 
{
	section ".rodata" object "board_reset_vector.o",
	section ".rodata*" object "board_reset_vector.o"
};

do not initialize
{
	section .bss*,
	section .stack*,
	section .prog_sig*,
	//section .ram_no_init*
};

place at start of reset { block reset_vector };

/* Symbols for Memory Protection: Global RAM region */
define exported symbol __GLBL_RAM_END	= end(ram);
define exported symbol __GLBL_RAM_START	= start(ram);

/* Symbols for Memory Protection: Global ROM region */
define exported symbol __GLBL_ROM_START	= start(reset);
define exported symbol __GLBL_ROM_END	= end(rom);


/* Symbols for Memory Protection: Global ROM region */
define exported symbol __Flash_API_RAM_SECTION_START_ADDR	= start(Flash_Ram);
define exported symbol __Flash_API_RAM_SECTION_END_ADDR  	= end(Flash_Ram);
define exported symbol __Flash_API_ROM_SECTION_START_ADDR	= start(Flash_Rom);
define exported symbol __Flash_API_ROM_SECTION_END_ADDR  	= end(Flash_Rom);

/* ******************_printOutputSection_begin_**************************** */



/* *******************_printOutputSection_end_***************************** */

/* ******************_printOutputSection_begin_**************************** */

/* Output section 'ExceptionTable' (Type 'RESET') */
define block ExceptionTable with fixed order, alignment = 256
{
	section .ExceptionTable,
	section .ExceptionTable.*,
	section .InterruptTable,
	section .InterruptTable.*
};
place in exctable { block ExceptionTable };

/* *******************_printOutputSection_end_***************************** */


/* ******************_printOutputSection_begin_**************************** */

/* Output section 'text' (Type 'TEXT') */
define block text with fixed order, alignment = 32
{
	section .os_text,
	section .os_text.*,
	section .text,
	section .text.*,
	section i.*,
	section i.*.*
};
place in rom { block text };

/* *******************_printOutputSection_end_***************************** */

/* ******************_printOutputSection_begin_**************************** */

/* Output section 'Flash_Rom' (Type 'TEXT') */
define block Flash_Rom with fixed order, alignment = 32
{
	section .fls_driver,
	section .fls_driver.*,
};
place in Flash_Rom { block Flash_Rom };

/* *******************_printOutputSection_end_***************************** */

/* ******************_printOutputSection_begin_**************************** */

/* Output section 'rodata' (Type 'RODATA') */
define block rodata with fixed order, alignment = 32
{
	section .const*,
	section .const*.*,
	section .constdata,
	section .constdata.*,
	section .rodata,
	section .rodata.*
};
place in rom { block rodata };

/* *******************_printOutputSection_end_***************************** */


/* symbol definitions are not supported for IAR linker-script generator yet */
/* define necessary symbols in board-specific ldscript header instead */

//* *******************_printOutputSection_end_***************************** */

/* ******************_printOutputSection_begin_**************************** */

/* Output section 'DATA' (Type 'DATA') */
define block DATA with fixed order, alignment = 32
{
	section .data,
	section .data.*
}
except
{
	section *_init
};

/* Manual initialization */
initialize manually with packing = none
{
	section .data,
	section .data.*
};

/* Output section 'DATA_init' (data initialization) */
define block DATA_init with fixed order, alignment = 32
{
	section .data_init,
	section .data.*_init
};

/* Initial data placement (to ROM) */
place in rom { block DATA_init };

/* *******************_printOutputSection_end_***************************** */


/* ******************_printOutputSection_begin_**************************** */

/* Output section 'BSS' (Type 'BSS') */
define block BSS with fixed order, alignment = 32
{
	section *.stack*,
	section *.stack.*,
	section .bss,
	section .bss.*,
	section .bss.*.*,
	section .os_idlestack,
	section .os_idlestack.*,
	section COMMON,
	section COMMON.*
};

/* *******************_printOutputSection_end_***************************** */

/* ******************_printOutputSection_begin_**************************** */

/* Output section 'BSS' (Type 'BSS') */
define block noinit with fixed order, alignment = 32
{
	section .prog_sig,
	section .prog_sig.*,
	//section .ram_no_init,
	//section .ram_no_init.*,
};

place in noinit { block noinit };

/* *******************_printOutputSection_end_***************************** */

/* Place DATA, BSS to ram */
define block group_DATABSS with fixed order
{
	block BSS,
	block DATA
};
place in ram { block group_DATABSS };
/* symbol definitions are not supported for IAR linker-script generator yet */
/* define necessary symbols in board-specific ldscript header instead */
