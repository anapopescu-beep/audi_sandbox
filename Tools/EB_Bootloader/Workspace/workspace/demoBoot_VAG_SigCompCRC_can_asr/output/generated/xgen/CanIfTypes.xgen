<?xml version="1.0" encoding="UTF-8"?>

<?module CanIf?>

<xgen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://www.elektrobit.com/2013/xgen" xmlns:xi="http://www.w3.org/2001/XInclude">


  <!-- This is the configuration of module CanIf -->
  <module name="CanIf">
    <!-- This is the precompile-time configuration of the module. -->
    <configuration class="PreCompile">
     <?artifact directory="include" file="CanIf_Types_Int.h" type="types-h"?>



      <parameter name="relocatable-enable">
        <boolean-value>true</boolean-value>
      </parameter>

      <!--
          Type declarations:
          Specifies the content of CanIf_Types_Int.h
      -->

      <type name="CanIf_TxBufferIndexType">
        <comment><![CDATA[ \brief Index type for Tx buffers

 This type defines the index width for Tx buffers.]]></comment>
        <reference type="uint16" />
      </type>

      <type name="CanIf_RxBufferIndexType">
        <comment><![CDATA[ \brief Index type for Rx buffers

 This type defines the index width for Rx buffers.]]></comment>
        <reference type="uint16" />
      </type>

      <type name="CanIf_LPduIndexType">
        <comment><![CDATA[ \brief Index type for L-PDU related data

 This type defines the index type for L-PDU related data.]]></comment>
        <reference type="uint16" />
      </type>

      <!-- This is the type definition of the root structure -->
      <type name="CanIf_ConfigType">
        <comment><![CDATA[ \brief Type for the CAN interface configuration

 This type defines the global configuration of the CAN interface.]]></comment>
        <struct>
          <member name="PlatformSignature" type="uint32" comment="Used to validate the platform"/>
          <member name="LcfgSignature" type="uint32" comment="Used to validate the post build configuration against the link time configuration"/>
          <member name="CfgSignature" type="uint32" comment="Used to validate the post build configuration against the precompile time configuration"/>
          <member name="PublicInfoSignature" type="uint32" comment="Used to validate the post build configuration against the precompile time published information configuration"/>
          <member name="txLPduConfigPtr" type="CanIf_TxLPduConfigType" comment="ptr. to array of Tx L-PDU configurations">
            <compiler-abstraction>
              <ref2cfg />
            </compiler-abstraction>
          </member>
          <member  name="rxLPduConfigPtr" type="CanIf_RxLPduConfigType" comment="ptr. to array of Rx L-PDU configurations">
            <compiler-abstraction>
              <ref2cfg />
            </compiler-abstraction>
          </member>
          <member name="sortedRxLPduConfigPtr" type="CanIf_SortedRxLPduConfigType" comment="ptr. to array of sorted Rx L-PDU configurations">
            <compiler-abstraction>
              <ref2cfg />
            </compiler-abstraction>
          </member>
          <member name="driverConfigPtr" type="CanIf_CanDriverConfigType" comment="pointer a driver configuration">
            <compiler-abstraction>
              <ref2cfg />
            </compiler-abstraction>
          </member>
          <member name="nrOfStaticTxLPdus" type="CanIf_LPduIndexType" comment="number of static Tx L-PDUs"/>
          <member name="nrOfTxLPdus" type="CanIf_LPduIndexType" comment="number of Tx L-PDUs"/>
          <member name="nrOfRxLPdus" type="CanIf_LPduIndexType" comment="number of Rx L-PDUs"/>
          <member name="maxCanControllerId" type="uint8" comment="maximum Can controller index"/>
        </struct>
      </type>

      <!-- This type is used for configuration of Tx L-PDUs. -->
      <type name="CanIf_TxLPduConfigType">
        <comment><![CDATA[ \brief Tx L-PDU configuration type

 This type is used for configuration of Tx L-PDUs.]]></comment>
        <struct>
          <member name="canId" type="Can_IdType" comment="CAN ID"/>
          <member name="hth" type="Can_HwHandleType" comment="HTH"/>
          <member name="sourcePduId_UL" type="PduIdType" comment="source PDU ID of upper layer"/>
          <member name="userType" type="uint8" comment="type of callback function"/>
        </struct>
      </type>

      <!-- This type defines the configuration of the index table for Rx L-PDUs. -->
      <type name="CanIf_SortedRxLPduConfigType">
        <comment><![CDATA[ \brief Rx L-PDU index type

 This type is the index table to select a Rx L-Pdu.]]></comment>
        <struct>
          <member name="upperRangeCanId" type="uint32"  comment="Upper range CAN ID/no range flag"/>
          <member name="canId" type="Can_IdType" comment="CAN ID"/>
          <member name="rxLPduIndex" type="CanIf_LPduIndexType"/>
        </struct>
      </type>

      <!-- This type defines the configuration of a Rx L-PDU. -->
      <type name="CanIf_RxLPduConfigType">
        <comment><![CDATA[ \brief Rx L-PDU configuration type

 This type defines the configuration of a Rx L-PDU.]]></comment>
        <struct>
          <member name="targetPduId" type="PduIdType" comment="target PDU ID"/>
          <member name="limitedPduLength" type="uint8" comment="target PDU length"/>
          <member name="userType" type="uint8" comment="type of callback function"/>
          <member name="dlc" type="uint8" comment="CAN DLC"/>
        </struct>
      </type>

      <!-- This is the data type used for HTH configuration. -->
      <type name="CanIf_HthConfigType">
        <comment><![CDATA[ \brief HTH configuration type

 This is the data type used for HTH configuration.]]></comment>
        <struct>
          <member name="firstIndex" type="CanIf_LPduIndexType" comment="index of first pending Tx request"/>
          <member type="uint8" name="intCtrlIdx" comment="CanIf internal controller index"/>
        </struct>
      </type>

      <!-- This is the data type used for HRH configuration. -->
      <type name="CanIf_HrhConfigType">
        <comment><![CDATA[ \brief HRH configuration type

 This is the data type used for HRH configuration.]]></comment>
        <struct>
          <member name="firstIndex" type="CanIf_LPduIndexType" comment="index of first Rx L-PDU for this HRH"/>
          <member name="lastIndex" type="CanIf_LPduIndexType" comment="index of last Rx L-PDU for this HRH"/>
          <member name="swFiltering" type="uint8">
            <comment>
              <![CDATA[CANIF_BINARY_SOFTWARE_FILTERING - binary search;
                       CANIF_NO_SOFTWARE_FILTERING - no sw filtering.
              ]]>
            </comment>
          </member>
          <member name="intCtrlIdx" type="uint8" comment="CanIf internal controller index"/>
        </struct>
      </type>

      <!-- This is the type used for controller configuration. -->
      <type name="CanIf_CanControllerConfigType">
        <comment><![CDATA[ \brief Controller configuration

 This is the type used for controller configuration.]]></comment>
        <struct>
          <member name="controllerId" type="uint8" comment="CAN controller ID"/>
        </struct>
      </type>

      <!-- This type defines the driver configuration used in the CAN interface. -->
      <type name="CanIf_CanDriverConfigType">
        <comment><![CDATA[ \brief Driver configuration type

 This type defines the driver configuration used in the CAN interface.]]></comment>
        <struct>
          <member name="ctrlConfigPtr" type="CanIf_CanControllerConfigType" comment="array of controller configurations">
            <compiler-abstraction>
              <ref2cfg />
            </compiler-abstraction>
          </member>
          <member name="hohIdToCanIfIdxPtr" type="uint16" comment="HOH ID translation array">
            <compiler-abstraction>
              <ref2cfg />
            </compiler-abstraction>
          </member>
          <member name="hthConfigPtr" type="CanIf_HthConfigType" comment="array of HTH configurations">
            <compiler-abstraction>
              <ref2cfg />
            </compiler-abstraction>
          </member>
          <member name="hrhConfigPtr" type="CanIf_HrhConfigType" comment="array of HRH configurations">
            <compiler-abstraction>
              <ref2cfg />
            </compiler-abstraction>
          </member>
          <member name="upperHohIdLimit" type="Can_HwHandleType" comment="maximum configured HOH ID + 1"/>
          <member name="nrOfControllers" type="uint8" comment="Number of CAN controllers contained in this driver"/>
        </struct>
      </type>


    </configuration>  <!-- PreCompile -->
  </module>

    <!-- include the AUTOSAR standard data types, etc. -->
  <xi:include href="Base.xgen" xpointer="element(/1/1)"/>
</xgen>

